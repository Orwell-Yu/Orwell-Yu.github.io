{"meta":{"title":"mio的博客","subtitle":null,"description":"一个二次元博客？","author":"Orwell-Yu","url":"https://orwell-yu.github.io"},"pages":[{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"client/index.html","permalink":"https://orwell-yu.github.io/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"about","date":"2022-08-19T02:14:36.000Z","updated":"2022-08-19T10:26:32.000Z","comments":false,"path":"about/index.html","permalink":"https://orwell-yu.github.io/about/index.html","excerpt":"","text":"[秋山澪の小站] 与&nbsp; Mio&nbsp; （ 秋山 澪 ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"comment","date":"2022-08-18T15:13:48.000Z","updated":"2022-08-19T06:36:56.000Z","comments":true,"path":"comment/index.html","permalink":"https://orwell-yu.github.io/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"bangumi","date":"2022-08-19T01:32:48.000Z","updated":"2022-08-19T10:26:24.000Z","comments":true,"path":"bangumi/index.html","permalink":"https://orwell-yu.github.io/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"lab/index.html","permalink":"https://orwell-yu.github.io/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"links/index.html","permalink":"https://orwell-yu.github.io/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"donate","date":"2022-08-18T15:13:05.000Z","updated":"2022-08-19T03:15:18.000Z","comments":false,"path":"donate/index.html","permalink":"https://orwell-yu.github.io/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"music","date":"2022-08-18T06:18:28.000Z","updated":"2022-08-18T06:22:22.000Z","comments":false,"path":"music/index.html","permalink":"https://orwell-yu.github.io/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2022-08-19T15:09:03.000Z","updated":"2022-08-19T06:36:30.000Z","comments":true,"path":"rss/index.html","permalink":"https://orwell-yu.github.io/rss/index.html","excerpt":"","text":""},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"video/index.html","permalink":"https://orwell-yu.github.io/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"tags","date":"2022-08-12T14:14:16.000Z","updated":"2022-08-19T07:33:48.000Z","comments":true,"path":"tags/index.html","permalink":"https://orwell-yu.github.io/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://orwell-yu.github.io/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"}],"posts":[{"title":"写在《睡前消息》被封禁之后：中文媒体失掉自信力了吗？","slug":"Chinese_media","date":"2023-06-03T03:13:00.000Z","updated":"2023-06-03T03:48:30.956Z","comments":true,"path":"2023/06/03/Chinese_media/","link":"","permalink":"https://orwell-yu.github.io/2023/06/03/Chinese_media/","excerpt":"","text":"写在《睡前消息》被封禁之后：中文媒体失掉自信力了吗？《睡前消息》的失声今日收到知乎推送，猛然发现原来昨日（6.2），睡前消息宣布进入“暑假模式”。在之前的《睡前消息》588期指出柳州地方债问题后几小时内，《睡前消息》588期在中文互联网上全平台下架。一周之后恢复更新。但是昨日，睡前消息宣布进入“暑假模式”，并且只更新微信公众号的每日新闻列表。 《睡前消息》作为中文互联网上少有的“敢说”的媒体，这就是它存在的意义。你可以指责马逆不清楚技术，不了解军事；你可以嘲讽他是“粉红乌友马超”；可以批判他的“社会化抚养”是狂想空话哗众取宠；也可以指责他是戴着镣铐起舞，在红区反红旗。 但是你不能指责他不敢说。但是现在，他不敢说了。 因此，国内媒体一定不能少了马逆的位置，马逆好似国内新闻自媒体领域中仅存的那个敢叫板的异类，即使是有些“奉旨造反”的意味，他的存在也是最后的风向标。 但是现在，他不能说了。我们不禁要问：中文媒体发生了什么？中文媒体失掉自信力了吗？ 中文舆论场：立场先行与举报成风要分析中文媒体的问题，我们要先分析中文互联网的问题。 首先声明，我不是科班出身，也不是专业的媒体人士，我只是一个普通的中文互联网用户，我只能从我自己的角度出发，来分析中文互联网的问题。你可以指责我的信息来源和马逆一样来自公开资料和百度bing，你可以指责我没有专业的媒体知识，但是你不能指责我没有自己的观点。当然，出于实事求是的精神，我也希望你能在指出我的错误之后和我讨论，而不是无意义的情绪输出， 落入“立场先行”的陷阱。 中文互联网的舆论场，是一个“立场先行”的舆论场。这个舆论场的特点是，几乎所有人都有一个明确的“立场”。这个“立场”可以是“润人”、“粉红”、“兔友”、“神神”、“精日”、“精美”。当一段信息出现在中文互联网上的时候，用户往往是情绪化的，而不是理性的。他们会先判断这段信息的“立场”，然后再判断这段信息的真实性。 这就是“立场先行”。对于不符合自己“立场”的信息，用户会无条件的忽略，或者无脑地点踩。而对于符合自己“立场”的信息，用户会开心地接受，点赞，转发。这就是“立场先行”。在一些低龄化论坛，或者是平均学历较低的论坛，比如哔哩哔哩和贴吧，这种“立场先行”尤为严重。看到观点近似的就赞，看到观点不同的就踩。正是这种“立场先行”造就了翟山鹰这种人，诞生了许多的悲剧。而这种“立场先行”则导致了中文互联网上的“举报成风”。 在中文互联网上，举报成风。这个“举报”，不是指举报违法犯罪行为，而是指举报“立场不同”。在中文互联网上，你可以看到很多“举报”帖子，这些帖子的内容往往是“某某某是粉红”、“某某某是润人”、“某某某是精日”、“某某某是精美”、“某某某是兔友”、“某某某是神神”。这些帖子的目的，就是为了让这些“某某某”被封禁。 这就是“举报成风”。看到不顺眼的信息，不去验证其真实性，部分用户们就会选择举报，而平台为了避免风险和降低管理成本，也会选择删除或者封禁。在知乎这点尤其明显。而臭名昭著的哔哩哔哩智能审核“阿瓦隆”，则把这一事件退到了荒谬的高潮。这就是“举报成风”，这就是中文互联网各个论坛的苦痛：信息的删除不是因为错误，而是因为立场与举报。 明哲保身：中文媒体的自我审查在这种“立场先行”和“举报成风”的环境下，中文媒体的自我审查就显得尤为重要。中文媒体的自我审查，是为了避免被举报，被封禁。 但是，这种自我审查，却导致了中文媒体的“明哲保身”。中文媒体的“明哲保身”，就导致中文媒体不敢发表一些“敏感”信息，不敢发表一些“不符合主流”信息，不敢发表一些“不符合立场”的信息。 、 我们可以看到，各个媒体相比于10年前，或处于成本，或处于用户，或多或少地限制了信息的内容，减少了敏感的批判。数十年前以“敢说”而闻名的南方系媒体，也不得不在今天的环境下，选择“明哲保身”。自我审查，使得各个媒体的用户和观众不可避免地陷入信息茧房，只看见大家爱看的，只听见大家爱听的，而不是真实的信息。这种自我审查，使得中文媒体的自信力和公信力丧失殆尽。 如果尖锐的批评完全消失，温和的批评将会变得刺耳。 马逆显然就是那个温柔的批评。他就是一个指出国王真的没穿衣服的小孩。现在在无尽的“立场先行”和“举报成风”中，在各大媒体都集体失声装聋作哑的现在，我们需要更多的马逆，我们需要更多的小孩。我们需要更多的人，来指出国王真的没穿衣服。我们不希望也不能没有保持自信力的媒体。即使不穿衣服是时尚，即使小孩在胡说八道，我们至少要让小孩能说话。 解放思想，实事求是那么，我们要怎么追回中文媒体的自信力呢？首先就要我们网民做到实事求是，而不是立场先行。实践才是检验真理的唯一标准，而立场并不是。 要拯救中文媒体乃至中文互联网，就要做到实事求是。比如说看到我的这篇牢骚，希望你不是直接点踩而是指出我的错误，营造一个就事论事，理性讨论的环境。我们需要的是一个能够让小孩说话的环境，而不是一个让小孩闭嘴的环境。 虽然我只是“小孩”，即使我说的可能都是一些“non-sense”，也希望你能让我说，更好的是，指出我的错误。98上也有许多人是这么做的，比如我的-6风评，也比如我上一个帖子有关于社会化抚养的讨论。许多人并不了解，也根本没有听过马逆社会化抚养的观点，只是根据只言片语和想象就指出了所谓的“错误”——然而这些错误其实马逆还专门出过一期视频回答。这种“立场先行”的环境，使得许多人根本不愿意去了解对方的观点，而是直接指出对方在自己想象中的错误。 然后就是平台和监管。房间里的大象必须要被看到。现在中文互联网的问题就是封禁的成本太低。不经考证就可以随意删帖禁言。 就如去年疫情期间河南郑州的“红码事件”，一个由全国人民合理花费人力物力搭建起来的健康码系统，却被几个社区官员用极低的成本就给破坏了。平台和监管部门应该保证被删除的帖子和发言确实违反了事实，而不是因为几个举报和立场就能让一句话消失。毕竟，消失的很有可能是真相。李文亮医生的话消失了，但是疫情并没有消失。 平台是中国的互联网平台，当所有优质的信息和内容都因为自我审查和举报成风消失的时候，平台也就失去了用户。监管是人民政府的监管，全国人民肯定也不想中文互联网变成一个只有“立场”而没有“事实”的地方。 马逆在第490期睡前消息中提到了他对于媒体的要求：真善美，“真”要排第一位，而不能是善和美。我们要的是真相和事实，而不是立场和童话。 最后我想说，长大后，你会成为社会上的一颗螺丝钉，你会成为每天都要推动巨石的西西弗斯，但你依然可以在约束中，寻找到属于自己的自由和快乐。 一个健康的社会，不能只有一种声音。","categories":[{"name":"牢骚","slug":"牢骚","permalink":"https://orwell-yu.github.io/categories/牢骚/"}],"tags":[{"name":"吐槽","slug":"吐槽","permalink":"https://orwell-yu.github.io/tags/吐槽/"},{"name":"牢骚","slug":"牢骚","permalink":"https://orwell-yu.github.io/tags/牢骚/"}],"keywords":[{"name":"牢骚","slug":"牢骚","permalink":"https://orwell-yu.github.io/categories/牢骚/"}]},{"title":"ADS复习笔记（截止到Traceback）","slug":"Advanced_Data_Structure","date":"2023-04-16T15:11:00.000Z","updated":"2023-04-16T15:24:50.167Z","comments":true,"path":"2023/04/16/Advanced_Data_Structure/","link":"","permalink":"https://orwell-yu.github.io/2023/04/16/Advanced_Data_Structure/","excerpt":"","text":"Advanced Data StructureProlegomenonGrading PoliciesHomework(10)Discussions or quiz(10)Research Project(30) done in groups of 3choose 2 out of 7Report(20+20)/2 pointsIn-class presentation(10~15minutes,10 points)The speaker will be chosen randomlyE-mail to sign up for presentationBonus MidTerm(10)Final Exam(40) You can replace the MidTerm by a higher grade in Final Exam E-mail denghaoran@zju.edu.cn before 6th March to send your group. AVL Trees,Splay Trees and Amortized AnalysisAVL TreeTargetspeed up searching(with insertion and deletion) Recall:To solve this problem,the time complexity is: Array: $O(N)$ (Search) ; $O(1)$ (Insert) Sorted Array: $O(logN)$ ; $O(N)$ (Insert) Binary Sorted Tree: $O(height)$ ; $O(height)$(Insert)In the worst case,the $O(height)$ is $O(N)$ Optimize:Balanced Tree DefinitionBalanced TreeAn empty binary tree is height balanced. If $T$ is a nonempty binary tree with $T_L$ and $T_R$ as its left and right subtrees, then $T$ is height balanced iff $T_L$ and $T_R$ are height balanced $|h_L-h_R|\\leq1$ where $h_L$ and $h_R$ are the heights of $T_L$ and $T_L$ , respectively. Balance Factor(BF)The Balance Factor(BF) of a node=$h_L-h_R$ . In an AVL Tree ,$BF(node)=-1,0,or 1$. Tree Roation Tree Rotation is an operation on a binary tree that changes the suructure without interfering with the order of elements. After a rotation,the side of rotation increase its height by 1 whilst the side opposite the rotation decreases its height similarly. pseudo code of Left Rotation Tree Temp = A-&gt;Left A-&gt;Left = B B-&gt;Right = Temp The time complexity is $O(1)$. Insertion of an AVL TreeRR RotationRR Rotation:In General:Note:A is NOT necessarily thr root of the tree.A is the first Node that has a wrong BF after the insertion.The insertion could be just happened in the right subtree of B but NOT necessarliy be the right child of B. LL RotationMind the NOTE!In General: LR RotationIn General: RL RotationIn General: 注意：单旋转(Single Rotation)发生在要插入的值不在关键边(连接BF值产生异常的点和其相邻点的边)之间。图中虚线的边即为关键边，图中待插入的13不在关键边的4 ~ 7之间；12不在关键边13 ~ 14之间。双旋转(Double Rotation)发生在要插入的值在关键边的值之间，并分为RL旋转与LR旋转。旋转时$k_2$成为最后的根节点，$k_2$左子树给$k_1$作为右子树，$k_2$右子树给$k_3$作为左子树。$k_1$、$k_3$分别作为$k_2$的左右子树。图中BF值出现异常的点为$k_1$，与其相连的点为$k_3$，判断是LR旋转还是RL旋转的点为$k_2$。 Reference Read the declaration and functions in [1] Figures 4.42 – 4.48 Algorithm Analysis$n_h$=$F_n$-$1$$n_h$-&gt;$((1+\\sqrt{5})/2)^h$$h$-&gt;$O(ln(N))$ Splay TreeTargetAny $M$ consecutive tree opertaions starting from an empty tree take at most $O(M log N)$ time. Insertion of a Splay TreeX:a Node that is NOT rootP:parent of XG:grandParent of X Case1:P is the rootRotate X and P Case2:P is not the rootZig-zag:Double Rotation Zig-zig:Single Rotation Reference Read the 32-node example given in Figures 4.52 – 4.60 Note四种旋转情况的总结（适用于选择题画图）其中①②表示操作的顺序 Deletion of a Splay Tree Find(X) The Node X will be at root. Remove(X) There will be two subtrees $T_L$ and $T_R$. FindMax($T_L$) The Largest element will be the root of $T_L$, and has NO right child. Appendix：Implementation in C(AVL Tree,Splay Tree)详见Project1.c其中，AVL Tree的删除与普通二叉搜索树相同，为Delete()函数。Splay Tree相关部分需要先初始化NullNode变量。 Amortized Analysis(均摊分析)RecallThe target of a Splay Tree: Any $M$ consecutive tree opertaions starting from an empty tree take at most $O(M log N)$ time.–Amortized time bound Aggregate analysis(聚合分析)IdeaShow that for all n, a sequence of n operations takes worst-case time T(n) in total. In the worst case, the average cost, or amortized cost, per operation is therefore $T(n)/n$. 【Example】Stack with MultiPop(int k,Stack S) Algorithm { while ( !IsEmpty(S) &amp;&amp; k&gt;0 ) { Pop(S); k - -; } /* end while-loop */ } Consider a sequence of n Push,Pop,and MultiPop operations on an initially empty stack.Because we can pop each object from the stack at most once for each time we have pushed it onto the stack.$sizeof(S) \\leq n$$T_{amortized}= O( n )/n = O(1)$ Accounting method(信用方法)IdeaWhen an operation’s amortized cost exceeds its actual cost, we assign the difference to specific objects in the data structure as credit. Credit can help pay for later operations whose amortized cost is less than their actual cost.NoteFor all sequences of n operations, we must have: 【Example】Stack with MultiPop(int k,Stack S) while ( !IsEmpty(S) &amp;&amp; k&gt;0 ) { Pop(S); k - -; } /* end while-loop */ } Consider a sequence of n Push,Pop,and MultiPop operations on an initially empty stack. Potential method(势能方法)IdeaTake a closer look at the credit.为了避免给每一种操作都设计一个均摊代价，我们设计一个势能函数来统一化设计均摊代价。In general, a good potential function should always assume its minimum at the start of the sequence.【Example0】Stack with MultiPop(int k,Stack S) while ( !IsEmpty(S) &amp;&amp; k&gt;0 ) { Pop(S); k - -; } /* end while-loop */ } 【Example1】 Splay Trees: $T_{amortized}$ = $O( log N )$$\\Phi(T)=\\Sigma_{i \\in T} ln(S(i))$$S(i)$:以x为根的子树中的节点个数。也叫做子树的质。 Appendix:MathIf $a + b ≤ c$, and a and b are both positive integers, then:$log{a} + log{b} ≤ 2 log{c} - 2$Proof:By the arithmetic-geometric mean inequality,$(ab)^{1/2} ≤ (a+b)/2$Thus$(ab)^{1/2} ≤ c/2$Squaring both sides gives$ab ≤ c^2/4$Taking logarithms of both sides proves the lemma.其中，Zig-zag和Zig-zig都是双旋转，开销为2。Zig-zag中：$R_2(X)$和$R_1(G)$都是整棵树的质，故相互抵消。$R_1(P)&lt;R_1(X)$,故放缩。Zig-zig中：$R_1(X)+R_2(G) \\le 2R_2(X)-2$$2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_2(G) \\le 2R_2(X) -2 R_1(X) +R_2(P)-R_1(P) \\le 3(R_2(X) - R_1(X))$ Red-Black Trees and B+ TreesRed-Black TreesTargetBalanced binary seach tree using a key called color. DefinitionRed-Black Tree红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质： 性质1：每个节点要么是黑色，要么是红色。 性质2：根节点是黑色。 性质3：每个叶子节点（NIL）是黑色。(所有叶子节点都是哨兵，哨兵都是黑色的) 性质4：每个红色结点的两个子结点一定都是黑色。 性质5：任意一结点到每个叶子结点的简单路径都包含数量相同的黑结点。 性质3存在的意义：为了保证不存在奇怪的红黑树，所有孩子为空的节点都必须是哨兵，是黑色的，这样极度不平衡的树会不满足性质5。 black-heightThe black-height of any node x,denoted by bh(x),is the number of black nodes on any simple path from x(x not included) down to a leaf.bh(Tree)=bh(root). 【Lemma】A red-black tree with N internal nodes has height at most $2ln(N +1)$. Proof： Lemma1: For any node x, $sizeof(x) \\geq 2^{bh(x)} – 1$.If $h(x) = 0$, x is NULL -&gt; $sizeof(x) = 2^0 – 1 = 0$Suppose it is true for all x with $h(x) \\leq k$.For x with $h(x) = k + 1$, $bh(child) = bh(x) \\space or \\space bh(x) – 1 $Since $h(child) \\leq k$, $sizeof(child) \\geq 2^{bh(child)} – 1 \\geq 2^{bh(x) – 1} – 1$Hence $sizeof(x) = 1 + 2sizeof(child) \\geq 2^{bh(x)} – 1$ Lemma2: $bh(Tree) \\geq h(Tree) / 2$Since for every red node, both of its children must be black, hence on any simple path from root to a leaf, at least half the nodes (root not included) must be black.$Sizeof(root) = N \\geq 2^{bh(Tree)} – 1 \\geq 2^{h/2} – 1$ 由Lemma1和Lemma2可以得到Lemma的结论。 Insert由于贸然插入黑色节点很有可能会导致性质5出现问题，故我们尽量插入红色节点。综合考虑五条性质，插入红色节点时，只有性质2和性质4有可能会被破坏。 Case 1此时插入的红色节点z依然可能破坏性质2或者4，故作迭代处理。定义z, z.p, y, z’循环终止条件：为了保证满足性质4。自底向上修正树，z的子树都满足红黑性质结束后把根节点染成黑色循环过程中，如果z变为根节点，则(2)被破坏，(4)被保留；否则z.p及其祖先的颜色不会改变，(2)被保留，如果z.p为红色则(4)被破坏。性质4只可能在z和z.p之间被破坏循环开始前，如果z.p是根，则红黑树性质决定z.p为黑色，循环调整之前不会改变z.p的颜色循环结束后，z.p是黑色的（如果z为根节点那么其父节点哨兵结点也是黑色的），性质(4)不会被破坏，只有可能性质(2)被破坏，所以对根节点进行染色还有三项对称情况。 Case 2 &amp; Case 3case 2、3不需要迭代。对于case2、3来说，红黑树插入操作循环总数不超过2，因为case2、3一旦被执行就结束了。 Algorithm Analysis总的来说，红黑树的插入操作中，我们有：$T = O( h ) = O( lnN )$ DeleteWhen we do deletions,we must add 1 blcak to the path of the replacing node.登场人物：4个Case分别操作(Case 1 见上图)兄弟红易兄弟黑，换色单旋接着推；侄黑父红换兄色，父侄双黑染红兄，上推；近侄红来远侄黑，旋转能把模样改；远侄红来单旋转，父兄换色侄变黑。 B+ TreesDefinitionA B+ tree of order M is a tree with the following structural properties: The root is either a leaf or has between 2 and M children. All nonleaf nodes (except the root) have between $\\lceil M/2 \\rceil$ and $M$ children. All leaves are at the same depth. Assume each nonroot leaf also has between $\\lceil M/2 \\rceil$ and $M$ children. FindInsertBtree Insert ( ElementType X, Btree T ) { Search from root to leaf for X and find the proper leaf node; Insert X; while ( this node has M+1 keys ) { split it into 2 nodes with [(M+1)/2 ] and [(M+1)/2 ] keys, respectively; if (this node is the root) create a new root with two children; check its parent; } } Inverted File IndexInverted File IndexDefinitionIndex is a mechanism for locating a given term in a text.Inverted file contains a list of pointers(e.g. the number of a page) to all occurrences of that term in the text. Index GenerateorLeftist Heaps and Skew HeapsLeftist HeapRecallHeap: Structure Property + Order Property结构性质： 堆是完全二叉树 堆的每一个子树都是堆 顺序性质： 堆的每一个孩子都比自己大（小） 堆的操作： percolate up &amp; percolate down 堆的合并： 开销为$O(N)$，线性的把两个堆中的元素逐一插入。我们现在就要加速这一过程。 Leftist HeapStructure Property: a binary tree,but unbalanced Order Property: the same as normal heap DefiniitionNPLThe null path length,Npl(x),of any node X is the length of the shortest path from X to a node without two childeren. Define Npl(NULL)=-1.Note:$Npl(x)=min{Npl(c)+1}$ , for all c as children of x Leftist HeapThe leftist heap property is that for every node x in the heap,the null path length of the left child is at least as large as ($\\geq $) that of the right child. Example: 【Theorem】：A leftist tree with r nodes on the right path must have at least $2^r-1$ nodes. So we can find that the length of the right path of a leftist tree with N nodes is $\\lfloor log{(N+1)}\\rfloor$ Merge Operation Recursive 比较需要合并的两棵树树根节点谁更小，大的与小的右子树合并 递归方法合并根节点小的右子树和根节点大的整棵树。 比较新树的左右子树哪一个的$Npl$更大，若右边更大则交换左右子树。 Declarationstruct TreeNode { ElementType Element; PriorityQueue Left; PriorityQueue Right; int Npl; } ; ImplementationPriorityQueue Merge ( PriorityQueue H1, PriorityQueue H2 ) { if ( H1 == NULL ) return H2; if ( H2 == NULL ) return H1; if ( H1-&gt;Element &lt; H2-&gt;Element ) return Merge1( H1, H2 ); else return Merge1( H2, H1 ); } static PriorityQueue Merge1( PriorityQueue H1, PriorityQueue H2 ) { if ( H1-&gt;Left == NULL ) /* single node */ H1-&gt;Left = H2; /* H1-&gt;Right is already NULL and H1-&gt;Npl is already 0 */ else { H1-&gt;Right = Merge( H1-&gt;Right, H2 ); /* Step 1 &amp; 2 */ if ( H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl ) SwapChildren( H1 ); /* Step 3 */ H1-&gt;Npl = H1-&gt;Right-&gt;Npl + 1; } /* end else */ return H1; } Analysis$T_p = O(log N)$ Merge Operation Iterative Sort the right paths without changing their left children Swap children if necessary Implementation// 定义左偏树结点结构体 struct Node { int val; // 结点值 int dist; // 结点距离 Node* left; // 左子结点 Node* right; // 右子结点 Node(int v): val(v), dist(0), left(nullptr), right(nullptr) {} // 构造函数 }; // 合并两个左偏树，返回合并后的根结点 Node* merge(Node* x, Node* y) { if (!x) return y; // 如果x为空，返回y if (!y) return x; // 如果y为空，返回x if (x-&gt;val &gt; y-&gt;val) swap(x, y); // 保证x的值小于等于y的值 stack&lt;Node*&gt; st; // 创建一个栈，用来存储沿途修改的路径 while (true) { if (!x-&gt;right) { // 如果x没有右子结点，直接将y作为其右子结点，并结束循环 x-&gt;right = y; break; } st.push(x); // 将x压入栈中，记录修改路径 x = x-&gt;right; // 将x移动到其右子结点上 if (x-&gt;val &gt; y-&gt;val) swap(x, y); // 保证x的值小于等于y的值 } while (!st.empty()) { // 从栈中弹出修改过的结点，并调整其距离和左右子结点位置，保持左偏性质 Node* p = st.top();// 弹出一个父结点p p-&gt;right = x; // 将p的右子结点设为当前处理的结点x（初始为合并后的右子树） if (!p-&gt;left || p-&gt;left-&gt;dist &lt; p-&gt;right-&gt;dist) { swap(p-&gt;left, p-&gt;right); // 如果p没有左子结点或者其左子距离小于右子距离，则交换其左右子结点位置（保持左偏性质） } p-&gt;dist = p-&gt;right ? p-&gt;right-&gt;dist + 1 : 0; // 更新p的距离为其右子距离加一（如果有右子）或者零（如果没有） x = p; // 将当前处理的结点设为p（向上回溯） } return x; // 返回最终合并后的根节点（初始为最底层修改过的父节点） } Analysis$T_p = O(log N)$ DeleteMin Operation Delete the root Merge the two subtrees Analysis$T_p = O(log N)$ Skew HeapDefinitionIdea:Always swap the left and right children except that the largest of all the nodes on the right paths does not have its children swapped. No Npl.总是交换左右子节点，除了右边路径上最大的节点没有交换它的子节点。不需要Npl。由于没有npl，它可以节省更多空间。斜堆也不要求堆是左倾堆。由于斜堆并不是严格的左倾堆，最坏的情况下右路长度可能为N，因此采用递归调用merge的风险是出现stack overflow。只要一直插入如下图所示的结构（第一个节点不是，是为了方便画），Skew Heap就会退化成右倾的一条链。 Merge 如果一个空斜堆与一个非空斜堆合并，返回非空斜堆。 如果两个斜堆都非空，那么比较两个根节点，取较小堆的根节点为新的根节点。将”较小堆的根节点的右孩子”和”较大堆”进行合并。 合并后，交换新堆根节点的左孩子和右孩子。 ImplementationSkewNode* merge_skewheap(SkewHeap x, SkewHeap y) { if(x == NULL) return y; if(y == NULL) return x; // 合并x和y时，将x作为合并后的树的根； // 这里的操作是保证: x的key &lt; y的key if(x-&gt;key &gt; y-&gt;key) swap_skewheap_node(x, y); // 将x的右孩子和y合并， // 合并后直接交换x的左右孩子，而不需要像左倾堆一样考虑它们的npl。 SkewNode *tmp = merge_skewheap(x-&gt;right, y); x-&gt;right = x-&gt;left; x-&gt;left = tmp; return x; } 对于Skew Heap插入新的节点实质上也可以看作Merge操作。 Amortized Analysis【Definition】 A node p is heavy if the number of descendants of p’s right subtree is at least half of the number of descendants of p, and light otherwise. Note that the number of descendants of a node includes the node itself.如果节点p的右子树的子代数至少是p子代数的一半，则节点p为重，否则为轻。请注意，节点的后代数量包括节点本身。 The only nodes whose heavy/light status can change are nodes that are initially on the right path.合并操作中，只有右路径上的节点轻重状态回改变。右路径上重节点一定变轻节点，而轻节点不一定变重节点。 这里我们使用均摊分析中的势能方法分析斜堆的算法复杂度。如果我们如下定义$D_i$:$D_i=$the root of the resulting tree 那么，我们如下定义势能函数： $\\Phi(D_i)=$number of heavy nodes 设合并前两个斜堆的右路径上的重节点数量分别为$h_1$,$h_2$，所有左路径上的重节点数量为$h$（由于这些重节点的轻重不再变化），所有右路径上的轻节点数量分别为$l_1$,$l_2$。我们可以观察到，在合并之前，$\\Phi_0=h_1+h_2+h$ 由于在合并过程中，重节点一定变轻节点（左右子树要经过交换），而轻节点不一定变重节点。经过合并之后：$\\Phi_N\\leq l_1+l_2$（最差情况，所有的轻节点都叛变了）而最差情况：$T_{worst} = l_1 + h_1 + l_2 + h_2$所以，根据势能方法的定义，$T_{amortized} = T_{worst} + \\Phi_N – \\Phi_0 \\leq 2 (l_1 + l_2)$而$l = O( log N )$故$T_{amortized} = O( log N )$ Binomial QueueStructureA binomial queue is not a heap-ordered tree, but rather a collection of heap-ordered trees, known as a forest. Each heap-ordered tree is a binomial tree. A binomial tree of height 0 is a one-node tree. A binomial tree, $B_k$, of height $k$ is formed by attaching a binomial tree, $B_{k – 1}$, to the root of another binomial tree, $B_{k – 1}$. 仅包含一个结点的有序树是一棵二项树称为$B_0$树。二项树$B_k$由两棵$B_{k-1}$树组成，其中一棵$B_{k-1}$树的根作为另一棵$B_{k-1}$树根的最左孩子$(k≥0)$。 Note:$B_k$ consists of a root with k children, which are $B_0, B_1, …, B_{k – 1} $. $B_k$ has exactly $2^k$ nodes. The number of nodes at depth $d$ is $\\tbinom{k}{d}$. $B_k$ structure + heap order + one binomial tree for each height.$\\Rightarrow$ A priority queue of any size can be uniquely represented by a collection of binomial trees.一些由二项树构成的树林被称作二项堆，是一种优先队列。 OperationsFindMinThe minimum key is in one of the roots.There are at most $\\lceil logN \\rceil$ roots, hence $T_p = O(logN)$. We can remember the minimum and update whenever it is changed.Then this operation will take $O(1)$. MergeNote: If the smallest nonexistent binomial tree is Bi , then $T_p = Const · (i + 1)$.Performing $N$ Inserts on an initially empty binomial queue will take $O(N)$ worst-case time. Hence the average time is constant. DeleteMinStep 1: FindMin in $B_k$Step 2: Remove $B_k$ from $H$Step 3: Remove root from $B_k$Step 4: Merge (H’, H”) Implementation//definition typedef struct BinNode *Position; typedef struct Collection *BinQueue; typedef struct BinNode *BinTree; /* missing from p.176 */ struct BinNode { ElementType Element; Position LeftChild; Position NextSibling; } ; struct Collection { int CurrentSize; /* total number of nodes */ BinTree TheTrees[ MaxTrees ]; }; //merge two binomial trees BinTree Merge( BinTree T1, BinTree T2 ) { if( T1-&gt;Element &gt; T2-&gt;Element ) return Merge( T2, T1 ); T2-&gt;NextSibling = T1-&gt;LeftChild; T1-&gt;LeftChild = T2; return T1; } //merge two binomial queues BinQueue Merge_BinQueue( BinQueue H1, BinQueue H2 ) { BinTree T1, T2, Carry = NULL; int i, j; if( H1-&gt;CurrentSize + H2-&gt;CurrentSize &gt; Capacity ) Error( &quot;Merge would exceed capacity&quot; ); H1-&gt;CurrentSize += H2-&gt;CurrentSize; for( i = 0, j = 1; j &lt;= H1-&gt;CurrentSize; i++, j *= 2 ) { T1 = H1-&gt;TheTrees[ i ]; T2 = H2-&gt;TheTrees[ i ]; switch( !!T1 + 2 * !!T2 + 4 * !!Carry ) { case 0: /* No trees */ case 1: /* Only H1 */ break; case 2: /* Only H2 */ H1-&gt;TheTrees[ i ] = T2; H2-&gt;TheTrees[ i ] = NULL; break; case 4: /* Only Carry */ H1-&gt;TheTrees[ i ] = Carry; Carry = NULL; break; case 3: /* H1 and H2 */ Carry = Merge( T1, T2 ); H1-&gt;TheTrees[ i ] = H2-&gt;TheTrees[ i ] = NULL; break; case 5: /* H1 and Carry */ Carry = Merge( T1, Carry ); H1-&gt;TheTrees[ i ] = NULL; break; case 6: /* H2 and Carry */ Carry = Merge( T2, Carry ); H2-&gt;TheTrees[ i ] = NULL; break; case 7: /* All three */ H1-&gt;TheTrees[ i ] = Carry; Carry = Merge( T1, T2 ); H2-&gt;TheTrees[ i ] = NULL; break; } } return H1; } //delete the minimum element in binomial queue ElementType DeleteMin( BinQueue H ) { int i, j; int MinTree; /* The tree with the minimum item */ BinQueue DeletedQueue; Position DeletedTree, OldRoot; ElementType MinItem; if( IsEmpty( H ) ) { Error( &quot;Empty binomial queue&quot; ); return -Infinity; } MinItem = Infinity; for( i = 0; i &lt; MaxTrees; i++ ) { if( H-&gt;TheTrees[ i ] &amp;&amp; H-&gt;TheTrees[ i ]-&gt;Element &lt; MinItem ) { /* Update minimum */ MinItem = H-&gt;TheTrees[ i ]-&gt;Element; MinTree = i; } } DeletedTree = H-&gt;TheTrees[ MinTree ]; OldRoot = DeletedTree; DeletedTree = DeletedTree-&gt;LeftChild; free( OldRoot ); DeletedQueue = Initialize( ); DeletedQueue-&gt;CurrentSize = ( 1 &lt;&lt; MinTree ) - 1; for( j = MinTree - 1; j &gt;= 0; j-- ) { DeletedQueue-&gt;TheTrees[ j ] = DeletedTree; DeletedTree = DeletedTree-&gt;NextSibling; DeletedQueue-&gt;TheTrees[ j ]-&gt;NextSibling = NULL; } H-&gt;TheTrees[ MinTree ] = NULL; H-&gt;CurrentSize -= DeletedQueue-&gt;CurrentSize + 1; Merge_BinQueue( H, DeletedQueue ); return MinItem; } BacktrackingA sure-fire way to find the answer to a problem is to make a list of all candidate answers, examine each, and following the examination of all or some of the candidates, declare the identified answer. Backtracking enables us to eliminate the explicit examination of a large subset of the candidates while still guaranteeing that the answer will be found if the algorithm is run to termination. The basic idea is that suppose we have a partial solution ( $x_1, … , x_i$ ) where each $x_k \\in S_k$ for $1 \\leq k \\leq i &lt; n$. First we add $x_{i+1} \\in S_{i+1}$ and check if ( $x_1, … , x_i, x_{i+1}$ ) satisfies the constrains. If the answer is “yes” we continue to add the next x, else we delete $x_{i+1}$ and backtrack to the previous partial solution ( $x_1, … , x_{i}$ ). 我们不断枚举，当发现不满足条件时，回溯到上一步，继续枚举。 The Turnpike Reconstruction ProblemGiven N points on the x-axis with coordinates $x_1 &lt; x_2 &lt; …&lt; x_N$ . Assume that $x_1 = 0$. There are $N ( N – 1 ) / 2$ distances between every pair of points. bool Reconstruct ( DistType X[ ], DistSet D, int N, int left, int right ) { /* X[1]...X[left-1] and X[right+1]...X[N] are solved */ bool Found = false; if ( Is_Empty( D ) ) return true; /* solved */ D_max = Find_Max( D ); /* option 1：X[right] = D_max */ /* check if |D_max-X[i]|D is true for all X[i]’s that have been solved */ OK = Check( D_max, N, left, right ); /* pruning */ if ( OK ) { /* add X[right] and update D */ X[right] = D_max; for ( i=1; i&lt;left; i++ ) Delete( |X[right]-X[i]|, D); for ( i=right+1; i&lt;=N; i++ ) Delete( |X[right]-X[i]|, D); Found = Reconstruct ( X, D, N, left, right-1 ); if ( !Found ) { /* if does not work, undo */ for ( i=1; i&lt;left; i++ ) Insert( |X[right]-X[i]|, D); for ( i=right+1; i&lt;=N; i++ ) Insert( |X[right]-X[i]|, D); } } /* finish checking option 1 */ if ( !Found ) { /* if option 1 does not work */ /* option 2: X[left] = X[N]-D_max */ OK = Check( X[N]-D_max, N, left, right ); if ( OK ) { X[left] = X[N] – D_max; for ( i=1; i&lt;left; i++ ) Delete( |X[left]-X[i]|, D); for ( i=right+1; i&lt;=N; i++ ) Delete( |X[left]-X[i]|, D); Found = Reconstruct (X, D, N, left+1, right ); if ( !Found ) { for ( i=1; i&lt;left; i++ ) Insert( |X[left]-X[i]|, D); for ( i=right+1; i&lt;=N; i++ ) Insert( |X[left]-X[i]|, D); } } /* finish checking option 2 */ } /* finish checking all the options */ return Found; } Eight QueensFind a placement of 8 queens on an 8 X 8 chessboard such that no two queens attack. Two queens are said to attack iff they are in the same row, column, diagonal, or antidiagonal of the chessboard. void EightQueens ( int k ) { int i; if ( k &gt; N ) { /* a solution is found */ PrintSolution( ); return; } for ( i=1; i&lt;=N; i++ ) { X[k] = i; if ( Place( k ) ) /* pruning */ EightQueens( k+1 ); } } bool Place ( int k ) { int i; for ( i=1; i&lt;k; i++ ) { if ( ( X[i] == X[k] ) || ( abs(X[i]-X[k]) == abs(i-k) ) ) return false; } return true; } General Backtrackingbool Backtracking ( int i ) { Found = false; if ( i &gt; N ) return true; /* solved with (x1, …, xN) */ for ( each xi in Si ) { /* check if satisfies the restriction R */ OK = Check((x1, …, xi) , R ); /* pruning */ if ( OK ) { Count xi in; Found = Backtracking( i+1 ); if ( !Found ) Undo( i ); /* recover to (x1, …, xi-1) */ } if ( Found ) break; } return Found; } 回溯的效率跟S的规模、约束函数的复杂性、满足约束条件的结点数相关。约束函数决定了剪枝的效率，但是如果函数本身太复杂也未必合算。满足约束条件的结点数最难估计，使得复杂度分析很难完成。 Divide and ConquerAlgorithm DesignDivide: the problem into a number of sub-problems.Conquer: the sub-problems by solving them recursively.Combine: the solutions to the sub-problems into the solution for the original problem.General recurrence: $T(N) = aT(N/b) + f(N)$ Closest Points ProblemGiven $N$ points in a plane. Find the closest pair of points. (If two points have the same position, then that pair is the closest with distance 0.) Algorithm AnalysisSubstitution methodRecursion-tree method一个示例，用于分析算法复杂度的方法，叶子节点表示划分完成后最小子问题的时间开销，中间节点表示合并子问题的时间开销。 Master method【Master Theorem】Let $a \\geq 1$ and $b &gt; 1$ be constants, let $f(N)$ be a function, and let $T(N)$ be defined on the nonnegative integers by the recurrence $T(N) = aT(N/b) + f(N)$. Then: If $f(N)=O(N^{log_b{a-\\epsilon}})$ for some constant $\\epsilon &gt; 0$, then $T(N)=\\Theta(N^{log_ba})$ If $f(N)=\\Theta(N^{log_ba})$, then $T(N)=\\Theta(N^{log_ba}logN)$ If $f(N)=\\Omega(N^{log_b{a+\\epsilon}})$ for some constant $\\epsilon &gt; 0$, and if $ af(N/b)&lt;cf(N)$ for some constant $c &lt; 1$ and all sufficiently large $N$, then $T(N)=\\Theta f(N)$ 【Example】 Mergesort has $a = b = 2$, and case 2$T = O( N log N )$ $a = b = 2$, $f (N) = NlogN$ ?$T = O( N log N )$ (X)这时候主方法就挂了，因为没有满足三种中的任意一种，这种情况下要用递归树。 其他两种主方法的形式：","categories":[{"name":"技术","slug":"技术","permalink":"https://orwell-yu.github.io/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"https://orwell-yu.github.io/tags/技术/"},{"name":"学习","slug":"学习","permalink":"https://orwell-yu.github.io/tags/学习/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://orwell-yu.github.io/categories/技术/"}]},{"title":"FDS Review","slug":"FDS_Review","date":"2023-01-04T06:00:00.000Z","updated":"2023-01-04T06:10:27.701Z","comments":true,"path":"2023/01/04/FDS_Review/","link":"","permalink":"https://orwell-yu.github.io/2023/01/04/FDS_Review/","excerpt":"","text":"Algorithm AnlysisSpace ComlexityThe space complexity of an algorithm or a computer program is the amount of memory space required to solve an instance of the computational problem as a function of characteristics of the input. It is the memory required by an algorithm until it executes completely. Time ComlexityIn computer science, the time complexity is the computational complexity that describes the amount of computer time it takes to run an algorithm. Time complexity is commonly estimated by counting the number of elementary operations performed by the algorithm, supposing that each elementary operation takes a fixed amount of time to perform. Thus, the amount of time taken and the number of elementary operations performed by the algorithm are taken to be related by a constant factor. ListAbustrct Data Type 【Definition】An Abstract Data Type (ADT) is a data type that is organized in such a way that the specification on the objects and specification of the operations on the objects are separated from the representation of the objects and the implementation on the operations. Linked ListInterfaces#ifndef LLIST_H #define LLIST_H typedef void node_proc_fun_t(void*); typedef int node_comp_fun_t(const void*, const void*); typedef void LLIST_T; LLIST_T *llist_new(int elmsize); int llist_delete(LLIST_T *ptr); int llist_node_append(LLIST_T *ptr, const void *datap); int llist_node_prepend(LLIST_T *ptr, const void *datap); int llist_travel(LLIST_T *ptr, node_proc_fun_t *proc); void llist_node_delete(LLIST_T *ptr, node_comp_fun_t *comp, const void *key); void *llist_node_find(LLIST_T *ptr, node_comp_fun_t *comp, const void *key); #endif Stack &amp; QueueStackDefinition 【Definition】A stack is a Last-In-First-Out (LIFO) list, that is, an ordered list in which insertions and deletions are made at the top only. Operations &amp; ImplementationsOperations:Int IsEmpty( Stack S ); Stack CreateStack(); DisposeStack( Stack S ); //该函数销毁数组栈(释放数组空间与栈空间)，返回NULL指针 MakeEmpty( Stack S ); Push( ElementType X, Stack S ); ElementType Top( Stack S ); Pop( Stack S ); Array Implementation:struct StackRecord { int Capacity ; /* size of stack */ int TopOfStack; /* the top pointer */ /* ++ for push, -- for pop, -1 for empty stack */ ElementType *Array; /* array for stack elements */ } ; Linked List Implemetation(with Dummy): ApplicationsBalance SymbolsAlgorithm { Make an empty stack S; while(read in a character c) { if(c is an opening symbol) Push(c, S); else if(c is a closing symbol) { if(S is empty) { ERROR; exit; } else{ /* stack is okay */ if (Top(S) doesn’t match c) { ERROR, exit; } else Pop(S); } /* end else-stack is okay */ } /* end else-if-closing symbol */ } /* end while-loop */ if (S is not empty) ERROR; } Postfix Infix Prefix EvaluationNote: The order of operands is the same in infix and postfix. Operators with higher precedence appear before those with lower precedence. With () Implementation: Never pop a ( from the stack except when processing a ) . Observe that when ( is not in the stack, its precedence is the highest; but when it is in the stack, its precedence is the lowest. Define in-stack precedence and incoming precedence for symbols, and each time use the corresponding precedence for comparison. 括号入栈前优先级最高，入栈后优先级最低。 Plz read DS03 PPT Page 7 for further. QueueDefinition 【Definition】A queue is a First-In-First-Out (FIFO) list, that is, an ordered list in which insertions take place at one end and deletions take place at the opposite end. Operations &amp; ImplementationsOperations:int IsEmpty( Queue Q ); Queue CreateQueue( ); DisposeQueue( Queue Q ); MakeEmpty( Queue Q ); Enqueue( ElementType X, Queue Q ); ElementType Front( Queue Q ); Dequeue( Queue Q ); Implementations:struct QueueRecord { int Capacity ; /* max size of queue */ int Front; /* the front pointer */ int Rear; /* the rear pointer */ int Size; /* Optional - the current size of queue */ ElementType *Array; /* array for queue elements */ } ; Learn more about queue plz read PPT DS03 Page 11 Circular Queue:队列的入队、出队操作很简单。入队时，通过rear的位置判断队列是否已满。如果没有满，则将rear后移一位，将新元素放置在rear所在位置。出队时，也可以通过rear的位置判断队列是否为空。如果不空，则只需将front后移一位即可。 获取队头元素，判断队列不空，则只需返回front指向位置的元素即可。 想像一下，通过出队操作将数据弹出队列后，front之前的空间还能够再次得到吗？不能。所以使用普通数组实现队列，就再也不能使用front之前的空间了，这会导致大量空间丢失。 为了解决这个问题，将普通数组换成循环数组。在循环数组中，末尾元素的下一个元素不是数组外，而是数组的头元素。这样就能够再次使用front之前的存储空间了。 为了规避环形队列的两种边界情况：空或者满时都有rear-front=1,我们让两者始终差1，即始终有一个空位。 Complete Binary Tree and HeapOperations and ImplementationsOperations PriorityQueue Initialize( int MaxElements ); void Insert( ElementType X, PriorityQueue H ); ElementType DeleteMin( PriorityQueue H ); ElementType FindMin( PriorityQueue H ); Simple Implementations Binary HeapDefinition 【Definition】A binary tree with n nodes and height h is complete iff its nodes correspond to the nodes numbered from 1 to n in the perfect binary tree of height h. 也就是说，叶子节点只可能在最大的两层出现，上一层不满不可能有下一层。 Array Representation MinHeap &amp; MaxHeap ImplementationsInitializePriorityQueue Initialize( int MaxElements ) { PriorityQueue H; if ( MaxElements &lt; MinPQSize ) return Error( &quot;Priority queue size is too small&quot; ); H = malloc( sizeof ( struct HeapStruct ) ); if ( H ==NULL ) return FatalError( &quot;Out of space!!!&quot; ); /* Allocate the array plus one extra for sentinel */ H-&gt;Elements = malloc(( MaxElements + 1 ) * sizeof( ElementType )); if ( H-&gt;Elements == NULL ) return FatalError( &quot;Out of space!!!&quot; ); H-&gt;Capacity = MaxElements; H-&gt;Size = 0; H-&gt;Elements[ 0 ] = MinData; /* set the sentinel */ return H; } Insert/* H-&gt;Element[ 0 ] is a sentinel */ sentinel:dummy void Insert( ElementType X, PriorityQueue H ) { int i; if ( IsFull( H ) ) { Error( &quot;Priority queue is full&quot; ); return; } for ( i = ++H-&gt;Size; H-&gt;Elements[ i / 2 ] &gt; X; i /= 2 ) H-&gt;Elements[ i ] = H-&gt;Elements[ i / 2 ]; H-&gt;Elements[ i ] = X; } $T (N) = O ( log N )$ DeleteMinElementType DeleteMin( PriorityQueue H ) { int i, Child; ElementType MinElement, LastElement; if ( IsEmpty( H ) ) { Error( &quot;Priority queue is empty&quot; ); return H-&gt;Elements[ 0 ]; } MinElement = H-&gt;Elements[ 1 ]; /* save the min element */ LastElement = H-&gt;Elements[ H-&gt;Size-- ]; /* take last and reset size */ for ( i = 1; i * 2 &lt;= H-&gt;Size; i = Child ) { /* Find smaller child */ Child = i * 2; if (Child != H-&gt;Size &amp;&amp; H-&gt;Elements[Child+1] &lt; H-&gt;Elements[Child]) Child++; if ( LastElement &gt; H-&gt;Elements[ Child ] ) /* Percolate one level */ H-&gt;Elements[ i ] = H-&gt;Elements[ Child ]; else break; /* find the proper position */ } H-&gt;Elements[ i ] = LastElement; return MinElement; } $T (N) = O ( log N )$ PercolateUp &amp; PercolateDownvoid PercolateUp( int p, PriorityQueue H ){ int i; int x=H-&gt;Elements[p]; for(i = p;H-&gt;Elements[i/2]&gt;x &amp;&amp; i&gt;0;i/=2){ H-&gt;Elements[i]=H-&gt;Elements[i/2]; } H-&gt;Elements[i]=x; } void PercolateDown( int p, PriorityQueue H ){ int i; int child; int x=H-&gt;Elements[p]; for(i = p;i*2&lt;=H-&gt;Size;i=child){ child=i*2; if(child != H-&gt;Size &amp;&amp; H-&gt;Elements[child+1] &lt; H-&gt;Elements[child]){ child++; } if(x&gt;H-&gt;Elements[child]){ H-&gt;Elements[i]=H-&gt;Elements[child]; } else{ break; } } H-&gt;Elements[i]=x; } PuzzlesJudgment and Choice Push 5 characters ooops onto a stack. In how many different ways that we can pop these characters and still obtain ooops?5 ooo出入栈顺序随意，之后push( p ),pop( p ),push( o ),pop( o )。注意出栈不能比入栈多。可以入出入出入出，入出入入出出，入入出入出出，入入出出入出，入入入出出出，5个 Suppose that an array of size 6 is used to store a circular queue, and the values of front and rear are 0 and 4, respectively. Now after 2 dequeues and 2 enqueues, what will the values of front and rear be? A.2 and 0 Program7-1 Pop SequenceGiven a stack which can keep M numbers at most. Push N numbers in the order of 1, 2, 3, …, N and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. For example, if M is 5 and N is 7, we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, but not 3, 2, 1, 7, 5, 6, 4. Input Specification:Each input file contains one test case. For each case, the first line contains 3 numbers (all no more than 1000): M (the maximum capacity of the stack), N (the length of push sequence), and K (the number of pop sequences to be checked). Then K lines follow, each contains a pop sequence of N numbers. All the numbers in a line are separated by a space. Output Specification:For each pop sequence, print in one line “YES” if it is indeed a possible pop sequence of the stack, or “NO” if not. Sample Input: 5 7 5 1 2 3 4 5 6 7 3 2 1 7 5 6 4 7 6 5 4 3 2 1 5 6 4 3 7 2 1 1 7 6 5 4 3 2 Solution #include&lt;stdio.h&gt; void StackCheck(int m,int n,int a[]){ int b[1000]; int top=0,ptr=0,temp=1; while (ptr&lt;n) { if (temp==a[ptr] &amp;&amp; top&lt;m) { ptr++; temp++; }//模拟入栈和给出栈顶的数字相同 else if(top&gt;0 &amp;&amp; b[top]==a[ptr]){ top--; ptr++; }//模拟栈顶和给出栈顶的数字相同 else if(top&lt;m-1 &amp;&amp; ptr&lt;n){ b[++top]=temp; temp++; }//都不同，模拟入栈 else{ break; } } if (ptr&lt;n) printf(&quot;NO\\n&quot;);//不可能的条件 else printf(&quot;YES\\n&quot;); } int main() { int m,n,k; scanf(&quot;%d %d %d&quot;,&amp;m,&amp;n,&amp;k); for (int i=0; i&lt;k; i++) { int a[1000]; for (int j=0; j&lt;n; j++) { scanf(&quot;%d&quot;,&amp;a[j]); } StackCheck(m,n,a); } return 0; } Sample Output: YES NO NO YES NO TreeDefinition 【Definition】A tree is a collection of nodes. The collection can be empty; otherwise, a tree consists of: (1) a distinguished node r, called the root; (2) and zero or more nonempty (sub)trees T1, …, Tk, each of whose roots are connected by a directed edge from r. 深度：从root算起高度：从leaf算起 ImplementationTurn to BiTreeFirst, we need to transfer the tree into a BiTree.要点： 从这棵树的根结点开始，从上到下，看每一个结点，把你正在看的结点的孩子放在左子树，兄弟放在右子树。 口诀： 将节点的孩子 放在左子树； 将节点的兄弟 放在右子树。 Implementation of a BiTree TraversalExampleThere is a picture to better understand tree trasval. Implementationinorderpreorderpostorderrebuild Tree BuildMyTree(int inorder[],int postorder[],int n) { Tree T; if(n==0){ return NULL; } T=(Tree)malloc(sizeof(BiTree)); if(n==1){ T-&gt;Element=inorder[0]; T-&gt;Left=NULL; T-&gt;Right=NULL; return T; } int left; int right; for(int i=0;i&lt;n;i++){ if(inorder[i]==postorder[n-1]){ left=i; break; } } right=n-left-1; T-&gt;Element=postorder[n-1]; T-&gt;Left=BuildMyTree(inorder,postorder,left); T-&gt;Right=BuildMyTree(inorder+left+1,postorder+left,right); return T; } Properties of Binary Trees Threaded BinaryTree对于没有左或者右孩子的节点，我们根据线索二叉树的不同，让他们分别指向不同的遍历顺序中的前继节点或者后继节点，更大化地利用空间。对于没有孩子又没有前/后继的节点，其线索为NULL同时，为了知道左右子树到底是不是真的孩子还是线索二叉树的线索，还有两个布尔变量应该在结构体中申明。 Implementationtypedef struct ThreadedTreeNode *PtrTo ThreadedNode; typedef struct PtrToThreadedNode ThreadedTree; typedef struct ThreadedTreeNode { int LeftThread; /* if it is TRUE, then Left */ ThreadedTree Left; /* is a thread, not a child ptr. */ ElementType Element; int RightThread; /* if it is TRUE, then Right */ ThreadedTree Right; /* is a thread, not a child ptr. */ } Binary Search TreeDefinition 【Definition】A binary search tree is a binary tree. It may be empty. If it is not empty, it satisfies the following properties:(1) Every node has a key which is an integer, and the keys are distinct.(2) The keys in a nonempty left subtree must be smaller than the key in the root of the subtree.(3) The keys in a nonempty right subtree must be larger than the key in the root of the subtree.(4) The left and right subtrees are also binary search trees. Operations &amp; ImplementationsOperationsSearchTree MakeEmpty( SearchTree T ); Position Find( ElementType X, SearchTree T ); Position FindMin( SearchTree T ); Position FindMax( SearchTree T ); SearchTree Insert( ElementType X, SearchTree T ); SearchTree Delete( ElementType X, SearchTree T ); ElementType Retrieve( Position P ); ImplementationFindRecusive Version Position Find( ElementType X, SearchTree T ) { if ( T == NULL ) return NULL; /* not found in an empty tree */ if ( X &lt; T-&gt;Element ) /* if smaller than root */ return Find( X, T-&gt;Left ); /* search left subtree */ else if ( X &gt; T-&gt;Element ) /* if larger than root */ return Find( X, T-&gt;Right ); /* search right subtree */ else /* if X == root */ return T; /* found */ } Iterate Version Position Iter_Find( ElementType X, SearchTree T ) { /* iterative version of Find */ while ( T ) { if ( X == T-&gt;Element ) return T ; /* found */ if ( X &lt; T-&gt;Element ) T = T-&gt;Left ; /*move down along left path */ else T = T-&gt; Right ; /* move down along right path */ } /* end while-loop */ return NULL ; /* not found */ } FindMin Position FindMin( SearchTree T ) { if ( T == NULL ) return NULL; /* not found in an empty tree */ else if ( T-&gt;Left == NULL ) return T; /* found left most */ else return FindMin( T-&gt;Left ); /* keep moving to left */ } FindMax Position FindMax( SearchTree T ) { if ( T != NULL ) while ( T-&gt;Right != NULL ) T = T-&gt;Right; /* keep moving to find right most */ return T; /* return NULL or the right most */ } $T(N)=S(N)=d$where d is the depth of X Insert SearchTree Insert( ElementType X, SearchTree T ) { if ( T == NULL ) { /* Create and return a one-node tree */ T = malloc( sizeof( struct TreeNode ) ); if ( T == NULL ) FatalError( &quot;Out of space!!!&quot; ); else { T-&gt;Element = X; T-&gt;Left = T-&gt;Right = NULL; } } /* End creating a one-node tree */ else /* If there is a tree */ if ( X &lt; T-&gt;Element ) T-&gt;Left = Insert( X, T-&gt;Left ); else if ( X &gt; T-&gt;Element ) T-&gt;Right = Insert( X, T-&gt;Right ); /* Else X is in the tree already; we&#39;ll do nothing */ return T; /* Do not forget this line!! */ } $T(N)=O(d)$where d is the depth of X Delete SearchTree Delete( ElementType X, SearchTree T ) { Position TmpCell; if ( T == NULL ) Error( &quot;Element not found&quot; ); else if ( X &lt; T-&gt;Element ) /* Go left */ T-&gt;Left = Delete( X, T-&gt;Left ); else if ( X &gt; T-&gt;Element ) /* Go right */ T-&gt;Right = Delete( X, T-&gt;Right ); else /* Found element to be deleted */ if ( T-&gt;Left &amp;&amp; T-&gt;Right ) { /* Two children */ /* Replace with smallest in right subtree */ TmpCell = FindMin( T-&gt;Right ); T-&gt;Element = TmpCell-&gt;Element; T-&gt;Right = Delete( T-&gt;Element, T-&gt;Right ); } /* End if */ else { /* One or zero child */ TmpCell = T; if ( T-&gt;Left == NULL ) /* Also handles 0 child */ T = T-&gt;Right; else if ( T-&gt;Right == NULL ) T = T-&gt;Left; free( TmpCell ); } /* End else 1 or 0 child */ return T; } $T(N) =O(h)$where h is the height of the tree PuzzlesJudgment and Choice There exists a binary tree with 2016 nodes in total, and with 16 nodes having only one child.F 分析： 假设没有孩子的结点(叶结点)个数为n₀，只有一个孩子的结点(度为1的结点)个数为n₁，有两个孩子的结点(度为2的结点)个数为n₂。则n₀+n₁+n₂=2016 ∵n₀=n₂+1(二叉树的性质：叶结点个数等于度为2的结点个数加1) ∴n₀+n₁+n₂=2016⇨n₂+1+16+n₂=2016 ⇨2n₂=1999 n₂除不尽，所以答案错误。公式在课本P118；树的节点数=所有节点的度数+1二叉树，叶结点个数等于度为2的结点个数+1 If a general tree T is converted into a binary tree BT, then which of the following BT traversals gives the same sequence as that of the post-order traversal of T?inorder 转换后，T的preorder = BT的preorder(preorder不变)T的postorder = BT的inorder As the picture showed. 注意:左右子树不同,这棵树的左子树的左子树是空的 Function6-1 IsomorphicTwo trees, T1 and T2, are isomorphic if T1 can be transformed into T2 by swapping left and right children of (some of the) nodes in T1. For instance, the two trees in Figure 1 are isomorphic because they are the same if the children of A, B, and G, but not the other nodes, are swapped. Give a polynomial time algorithm to decide if two trees are isomorphic.Format of functions: int Isomorphic( Tree T1, Tree T2 ); where Tree is defined as the following: typedef struct TreeNode *Tree; struct TreeNode { ElementType Element; Tree Left; Tree Right; }; The function is supposed to return 1 if T1and T2 are indeed isomorphic, or 0 if not. Sample program of judge: #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; typedef char ElementType; typedef struct TreeNode *Tree; struct TreeNode { ElementType Element; Tree Left; Tree Right; }; Tree BuildTree(); /* details omitted */ int Isomorphic( Tree T1, Tree T2 ); int main() { Tree T1, T2; T1 = BuildTree(); T2 = BuildTree(); printf(“%d\\n”, Isomorphic(T1, T2)); return 0; } /* Your function will be put here */ Sample Output 1 (for the trees shown in Figure 1): 1 Sample Output 2 (for the trees shown in Figure 2): 0 solution int Isomorphic( Tree T1, Tree T2 ) { if(T1==NULL&amp;&amp;T2==NULL) return 1;//First Case if(T1==NULL&amp;&amp;T2!=NULL) return 0;//Breaking Case if(T1!=NULL&amp;&amp;T2==NULL) return 0;//Breaking Case if (T1-&gt;Element!=T2-&gt;Element) return 0;//Breaking Case if(T1-&gt;Left==NULL&amp;&amp;T2-&gt;Left==NULL) return Isomorphic(T1-&gt;Right,T2-&gt;Right); if((T1-&gt;Left!=NULL&amp;&amp;T2-&gt;Left!=NULL)&amp;&amp;(T1-&gt;Left-&gt;Element==T2-&gt;Left-&gt;Element)) return Isomorphic(T1-&gt;Left,T2-&gt;Left)&amp;&amp;Isomorphic(T1-&gt;Right,T2-&gt;Right); else return Isomorphic(T1-&gt;Left,T2-&gt;Right)&amp;&amp;Isomorphic(T1-&gt;Right,T2-&gt;Left); } Program7-1 ZigZagging on a TreeSuppose that all the keys in a binary tree are distinct positive integers. A unique binary tree can be determined by a given pair of postorder and inorder traversal sequences. And it is a simple standard routine to print the numbers in level-order. However, if you think the problem is too simple, then you are too naive. This time you are supposed to print the numbers in “zigzagging order” – that is, starting from the root, print the numbers level-by-level, alternating between left to right and right to left. For example, for the following tree you must output: 1 11 5 8 17 12 20 15.Input Specification:Each input file contains one test case. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the inorder sequence and the third line gives the postorder sequence. All the numbers in a line are separated by a space. Output Specification:For each test case, print the zigzagging sequence of the tree in a line. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.Sample Input: 8 12 11 20 17 1 15 8 5 12 20 17 11 15 8 5 1 Sample Output: 1 11 5 8 17 12 20 15 solution #include&lt;stdio.h&gt; #include&lt;stdlib.h&gt; typedef struct BiTree { int Element; struct BiTree *Left; struct BiTree *Right; }BiTree,*Tree; void ZigZaggingorder(Tree root) { Tree Stack1[105]; Tree Stack2[105]; int top1=0; int top2=0; printf(&quot;%d&quot;,root-&gt;Element); if(root-&gt;Left||root-&gt;Right) printf(&quot; &quot;); if(root-&gt;Right!=NULL) Stack1[++top1]=root-&gt;Right; if(root-&gt;Left!=NULL) Stack1[++top1]=root-&gt;Left; int flag=-1; while (top1||top2) { if(flag==-1){ while (top1) { if(Stack1[top1]-&gt;Left!=NULL) Stack2[++top2]=Stack1[top1]-&gt;Left; if(Stack1[top1]-&gt;Right!=NULL) Stack2[++top2]=Stack1[top1]-&gt;Right; if(top1==1 &amp;&amp; top2==0){ printf(&quot;%d&quot;,Stack1[top1]-&gt;Element); } else { printf(&quot;%d &quot;,Stack1[top1]-&gt;Element); } top1--; } flag*=-1; } if(flag==1){ while (top2) { if(Stack2[top2]-&gt;Right!=NULL) Stack1[++top1]=Stack2[top2]-&gt;Right; if(Stack2[top2]-&gt;Left!=NULL) Stack1[++top1]=Stack2[top2]-&gt;Left; if(top1==0 &amp;&amp; top2==1){ printf(&quot;%d&quot;,Stack2[top2]-&gt;Element); } else { printf(&quot;%d &quot;,Stack2[top2]-&gt;Element); } top2--; } flag*=-1; } } } Tree BuildMyTree(int inorder[],int postorder[],int n) { Tree T; if(n==0){ return NULL; } T=(Tree)malloc(sizeof(BiTree)); if(n==1){ T-&gt;Element=inorder[0]; T-&gt;Left=NULL; T-&gt;Right=NULL; return T; } int left; int right; for(int i=0;i&lt;n;i++){ if(inorder[i]==postorder[n-1]){ left=i; break; } } right=n-left-1; T-&gt;Element=postorder[n-1]; T-&gt;Left=BuildMyTree(inorder,postorder,left); T-&gt;Right=BuildMyTree(inorder+left+1,postorder+left,right); return T; } int main(){ int n; int inorder[105]; int postorder[105]; Tree T; scanf(&quot;%d&quot;,&amp;n); for(int i=0;i&lt;n;i++){ scanf(&quot;%d&quot;,&amp;inorder[i]); } for(int i=0;i&lt;n;i++){ scanf(&quot;%d&quot;,&amp;postorder[i]); } // printf(&quot;%d&quot;,inorder[0]); // printf(&quot;%d&quot;,postorder[0]); T=BuildMyTree(inorder,postorder,n); ZigZaggingorder(T); //levelorder(T); return 0; } Union &amp; FindRelationSymmetricRelation is symmetric, If $(a, b) ∈ R$, then $(b, a) ∈ R$. TransitiveRelation is transitive, If $(a, b) ∈ R$ &amp; $(b, c) ∈ R$, then $(a, c) ∈ R$. RelflexiveRelation is relflexive, If $(a, a) ∈ R$. ConsistentRelation is symmetric and relflexive. ImplementationArray Data Stucture ImplementationS [element] = the element’s parentS [root] = -SetSize and set name = root&#39;s index Unionvoid SetUnion ( DisjSet S, SetType Rt1,SetType Rt2 ) { S[Rt2] = Rt1; } Find (Including Path Compression)Recursive Version SetType Find ( ElementType X, DisjSet S ) { if ( S[ X ] &lt;= 0 ) return X; else return S[ X ] = Find( S[ X ], S ); } Iterate Version SetType Find ( ElementType X, DisjSet S ) { ElementType root, trail, lead; for ( root = X; S[ root ] &gt; 0; root = S[ root ] ); /* find the root */ for ( trail = X; trail != root; trail = lead ) { lead = S[ trail ] ; S[ trail ] = root ; } /* 重复再找一次，找的时候把每一层根的最终根都改掉 */ return root ; } SetUnion By Sizevoid SetUnion(int X1,int X2) { int root1=Find(X1); int root2=Find(X2); if(root1==root2) { S[root2]=root1; root1-=root2; } else { if(root1&lt;root2)//root1 is bigger than root2,so we Union root2 to root1 { S[root2]=root1; root1-=root2;//update the value of root2 } else { S[root1]=root2; root2-=root1; } } } PuzzlesJudgement &amp; Choice In Union/Find algorithm, if Unions are done by size, the depth of any node must be no more than $N/2$, but not $O(logN)$.F 每做一次归并，都会使得小的集合深度加1，但是总的深度还是看大的集合。只有深度相同的归并才能使得总的深度加1，2,2归并，深度变为3；3,3归并深度变为4。因此深度最大为$log_{2}N+1$所以，N次归并和M次查找，复杂度为$O(N+M\\log_2N)$ The array representation of a disjoint set containing numbers 0 to 8 is given by { 1, -4, 1, 1, -3, 4, 4, 8, -2 }. Then to union the two sets which contain 6 and 8 (with union-by-size), the index of the resulting root and the value stored at the root are:B.4 and -5 正的数代表根，负的数代表最终根以及集合的元素个数。没合并前是{0，1，2，3}，{4，5，6}，{7，8} Program7-1 File TransferWe have a network of computers and a list of bi-directional connections. Each of these connections allows a file transfer from one computer to another. Is it possible to send a file from any computer on the network to any other?Input Specification:Each input file contains one test case. For each test case, the first line contains $N (2≤N≤10^4)$, the total number of computers in a network. Each computer in the network is then represented by a positive integer between 1 and N. Then in the following lines, the input is given in the format:I c1 c2where I stands for inputting a connection between c1 and c2;orC c1 c2where C stands for checking if it is possible to transfer files between c1 and c2;orSwhere S stands for stopping this case. Output Specification:For each C case, print in one line the word “yes” or “no” if it is possible or impossible to transfer files between c1 and c2, respectively. At the end of each case, print in one line “The network is connected.” if there is a path between any pair of computers; or “There are k components.” where k is the number of connected components in this network. Sample Input 1: 5 C 3 2 I 3 2 C 1 5 I 4 5 I 2 4 C 3 5 S Sample Output 1: no no yes There are 2 components. Sample Input 2: 5 C 3 2 I 3 2 C 1 5 I 4 5 I 2 4 C 3 5 I 1 3 C 1 5 S Sample Output 2: no no yes yes The network is connected. Solution #include&lt;stdio.h&gt; int Find ( int X, int S[] ) { int root, trail, lead; for ( root = X; S[root] &gt; 0; root = S[root] ); /* find the root */ for ( trail = X; trail != root; trail = lead ) { lead = S[trail] ; S[trail] = root ; }/* collapsing */ return root ; } void SetUnion(int S[],int X1,int X2) { int root1=Find(X1,S); int root2=Find(X2,S); if(root1==root2) { S[root2]=root1; root1-=root2; } else { if(root1&lt;root2)//root1 is bigger than root2,so we Union root2 to root1 { S[root2]=root1; root1-=root2;//update the value of root2 } else { S[root1]=root2; root2-=root1; } } } int main(){ int n; int a,b=0; int cnt[10010]; scanf(&quot;%d&quot;,&amp;n); int computer[10010]; for(int i=0;i&lt;10010;i++){ computer[i]=-1; } char c = &#39;O&#39;; while(c!=&#39;S&#39;){ scanf(&quot;%c&quot;,&amp;c); if(c==&#39;I&#39;){ scanf(&quot;%d&quot;,&amp;a); scanf(&quot;%d&quot;,&amp;b); SetUnion(computer,a,b); } if(c==&#39;C&#39;){ scanf(&quot;%d&quot;,&amp;a); scanf(&quot;%d&quot;,&amp;b); if(Find(a,computer)==Find(b,computer)){ printf(&quot;yes\\n&quot;); } if(Find(a,computer)!=Find(b,computer)){ printf(&quot;no\\n&quot;); } } } int flag=0; for(int i=1;i&lt;=n;i++){ if(computer[i]&lt;0){ flag++; } } if(flag==1){ printf(&quot;The network is connected.&quot;); } else{ printf(&quot;There are %d components.\\n&quot;,flag); } return 0; } GraphDefinitions$G( V, E )$ where $G$ ::= graph,$V = V( G )$ ::= finite nonempty set of vertices,and $E = E( G )$ ::= finite set of edges.Undirected graph: $( vi , vj ) = ( vj , vi )$ ::= the same edge.Directed graph (digraph): $&lt; v_i , v_j &gt; ::= v_i -&gt; v_j \\neq &lt; vj , vi &gt;$In this class,Restrictions :(1) Self loop is illegal.(2) Multigraph is not considered(Multigraph: A Graph that there could be more than one edge between two nodes)Complete graph: a graph that has the maximum number of edges Simple Implementation of GraphAdjacency Matrixadj_mat[n][n] is defined for $G(V, E)$ with $n$ vertices, $n &gt; 1$ :Note: If G is undirected, then adj_mat[ ][ ] is symmetric.Thus we can save space by storing only half of the matrix.In a word, the advantage of adjacency matrix is simple to implement, but the disadvantage is waste of space. In praxtice,for most incomplete graphs, more than half of the space is often wasted. Adjacency Lists Simple Implementation in Ctypedef int Vertex; /* 用顶点下标表示顶点,为整型 */ typedef int WeightType; /* 边的权值设为整型 */ typedef char DataType; /* 顶点存储的数据类型设为字符型 */ /* 边的定义 */ typedef struct ENode *PtrToENode; struct ENode{ Vertex V1, V2; /* 有向边&lt;V1, V2&gt; */ WeightType Weight; /* 权重 */ }; typedef PtrToENode Edge; /* 邻接点的定义 */ typedef struct AdjVNode *PtrToAdjVNode; struct AdjVNode{ Vertex AdjV; /* 邻接点下标 */ WeightType Weight; /* 边权重 */ PtrToAdjVNode Next; /* 指向下一个邻接点的指针 */ }; /* 顶点表头结点的定义 */ typedef struct Vnode{ PtrToAdjVNode FirstEdge;/* 边表头指针 */ DataType Data; /* 存顶点的数据 */ /* 注意：很多情况下，顶点无数据，此时Data可以不用出现 */ } AdjList[MaxVertexNum]; /* AdjList是邻接表类型 */ /* 图结点的定义 */ typedef struct GNode *PtrToGNode; struct GNode{ int Nv; /* 顶点数 */ int Ne; /* 边数 */ AdjList G; /* 邻接表 */ }; typedef PtrToGNode LGraph; /* 以邻接表方式存储的图类型 */ LGraph CreateGraph( int VertexNum ) { /* 初始化一个有VertexNum个顶点但没有边的图 */ Vertex V; LGraph Graph; Graph = (LGraph)malloc( sizeof(struct GNode) ); /* 建立图 */ Graph-&gt;Nv = VertexNum; Graph-&gt;Ne = 0; /* 初始化邻接表头指针 */ /* 注意：这里默认顶点编号从0开始，到(Graph-&gt;Nv - 1) */ for (V=0; V&lt;Graph-&gt;Nv; V++){ Graph-&gt;G[V].FirstEdge = NULL; } return Graph; } void InsertEdge( LGraph Graph, Edge E ) { PtrToAdjVNode NewNode; /* 插入边 &lt;V1, V2&gt; */ /* 为V2建立新的邻接点 */ NewNode = (PtrToAdjVNode)malloc(sizeof(struct AdjVNode)); NewNode-&gt;AdjV = E-&gt;V2; NewNode-&gt;Weight = E-&gt;Weight; /* 将V2插入V1的表头 */ NewNode-&gt;Next = Graph-&gt;G[E-&gt;V1].FirstEdge; Graph-&gt;G[E-&gt;V1].FirstEdge = NewNode; /* 若是无向图，还要插入边 &lt;V2, V1&gt; */ /* 为V1建立新的邻接点 */ NewNode = (PtrToAdjVNode)malloc(sizeof(struct AdjVNode)); NewNode-&gt;AdjV = E-&gt;V1; NewNode-&gt;Weight = E-&gt;Weight; /* 将V1插入V2的表头 */ NewNode-&gt;Next = Graph-&gt;G[E-&gt;V2].FirstEdge; Graph-&gt;G[E-&gt;V2].FirstEdge = NewNode; } LGraph BuildGraph() { LGraph Graph; Edge E; Vertex V; int Nv, i; scanf(&quot;%d&quot;, &amp;Nv); /* 读入顶点个数 */ Graph = CreateGraph(Nv); /* 初始化有Nv个顶点但没有边的图 */ scanf(&quot;%d&quot;, &amp;(Graph-&gt;Ne)); /* 读入边数 */ if ( Graph-&gt;Ne != 0 ) { /* 如果有边 */ E = (Edge)malloc( sizeof(struct ENode) ); /* 建立边结点 */ /* 读入边，格式为&quot;起点 终点 权重&quot;，插入邻接矩阵 */ for (i=0; i&lt;Graph-&gt;Ne; i++) { scanf(&quot;%d %d %d&quot;, &amp;E-&gt;V1, &amp;E-&gt;V2, &amp;E-&gt;Weight); /* 注意：如果权重不是整型，Weight的读入格式要改 */ InsertEdge( Graph, E ); } } /* 如果顶点有数据的话，读入数据 */ for (V=0; V&lt;Graph-&gt;Nv; V++) { scanf(&quot; %c&quot;, &amp;(Graph-&gt;G[V].Data)); } return Graph; } Toplogical SortDefinitionAOV Network ::= digraph $G$ in which $V( G )$ represents activities ( e.g. the courses ) and $E( G )$ represents precedence relations ( e.g. means that C1 is a prerequisite course of C3 ).$i$ is a predecessor of $j$ ::= there is a path from $i$ to $j$$i$ is an immediate predecessor of $j ::= &lt; i$, $j &gt; \\in E( G )$,then $j$ is called a successor ( immediate successor ) of $i$Partial order ::= a precedence relation which is both transitive $( i \\to k, k \\to j \\Rightarrow i \\to j )$ and irreflexive ( $i \\to i$ is impossible ).(which means there must be no circles)A topological order is a linear ordering of the vertices of a graph such that, for any two vertices, $i, j,$ if $i$ is a predecessor of $j$ in the network then $i$ precedes $j$ in the linear ordering. Normal Implementationvoid Topsort( Graph G ) { int Counter; Vertex V, W; for ( Counter = 0; Counter &lt; NumVertex; Counter ++ ) { V = FindNewVertexOfDegreeZero( ); if ( V == NotAVertex ) { Error ( “Graph has a cycle” ); break; } TopNum[ V ] = Counter; /* or output V */ for ( each W adjacent to V ){ Indegree[ W ] – – ; } } } Analyse the time complexity:$T = O( |V|^2 )$ Implementation with Queuevoid Topsort( Graph G ) { Queue Q; int Counter = 0; Vertex V, W; Q = CreateQueue( NumVertex ); MakeEmpty( Q ); for ( each vertex V ) if ( Indegree[ V ] == 0 ){ Enqueue( V, Q ); } while ( !IsEmpty( Q ) ) { V = Dequeue( Q ); TopNum[ V ] = ++ Counter; /* assign next */ for ( each W adjacent to V ){ if ( – – Indegree[ W ] == 0 ) { Enqueue( W, Q ); } } } /* end-while */ if ( Counter != NumVertex ){ Error( “Graph has a cycle” ); } DisposeQueue( Q ); /* free memory */ } Analyse the time complexity:$T = O( |V|+|E| )$ Shortest PathGiven a digraph $G = ( V, E )$, and a cost function $c( e )$ for $e \\in E( G )$. The length of a path $P$ from source to destination is $\\sum_{e_i \\in P}c(e_i)$ (also called weighted path length). Simple representationTable[ i ].Dist ::= distance from s to vi /* initialized to be $\\infin$ except for s */ Table[ i ].Known ::= 1 if vi is checked; or 0 if not Table[ i ].Path ::= for tracking the path /* initialized to be 0 *,上一个点/ ImplementationUnweighted Graph with a Queuevoid Unweighted( Table T ) { /* T is initialized with the source vertex S given */ Queue Q; Vertex V, W; Q = CreateQueue (NumVertex ); MakeEmpty( Q ); Enqueue( S, Q ); /* Enqueue the source vertex */ while ( !IsEmpty( Q ) ) { V = Dequeue( Q ); T[ V ].Known = true; /* not really necessary */ for ( each W adjacent to V ){ if ( T[ W ].Dist == Infinity ) { T[ W ].Dist = T[ V ].Dist + 1; T[ W ].Path = V; Enqueue( W, Q ); } /* end-if Dist == Infinity */ } } /* end-while */ DisposeQueue( Q ); /* free memory */ } $T = O( |V|+|E| )$ Dijkstra’s Algorithm for Weighted Graphvoid Dijkstra( Table T ) { /* T is initialized by Figure 9.30 on p.303 */ Vertex V, W; for ( ; ; ) { V = smallest unknown distance vertex; if ( V == NotAVertex ){ break; } T[ V ].Known = true; for ( each W adjacent to V ){ if ( !T[ W ].Known ){ if ( T[ V ].Dist + Cvw &lt; T[ W ].Dist ) { Decrease( T[ W ].Dist to T[ V ].Dist + Cvw ); T[ W ].Path = V; } /* end-if update W */ //Cvw: the weight of the edge form v to w } } } /* end-for( ; ; ) */ } NOTE:This algorithm does not work for edge with negative cost.$T = O( |V|^2 + |E| )$If this algorithm work with a priority queue,the time complexity could be$T = O( |V| log|V| + |E| log|V| ) = O( |E| log|V| )$ Acyclic GraphsIf the graph is acyclic, vertices may be selected in topological order since when a vertex is selected, its distance can no longer be lowered without any incoming edges from unknown nodes. Network Flow Problem$G=(V,E)$是一个有向图，其中每条边$(u,v)∈E$均有一个非负容量$c(u,v)&gt;=0$。如果$(u,v) \\notin E$，则假定$c(u,v)=0$。流网络中有两个特别的顶点：源点$s$和汇点$t$。下图展示了一个流网络的实例。 Minimum Spanning TreeA spanning tree of a graph $G$ is a tree which consists of $V( G )$ and a subset of $E( G )$ Note: The minimum spanning tree is a tree since it is acyclic – the number of edges is $|V| – 1$. It is minimum for the total cost of edges is minimized. It is spanning because it covers every vertex. A minimum spanning tree exists iff $G$ is connected. Adding a non-tree edge to a spanning tree, we obtain a cycle Prim’s Algorithm对顶点操作，在最小生成树的顶点集$U$和待处理顶点集$V-U$中，不断地寻找最短边(代价最小边)，找到后将对应顶点加入集合$U$，直到所有顶点均处理完毕($V-U$里没有剩余顶点),DFS Prim算法如何保证不成环？因为每次选择的点都是在集合$V$以外的 Implementation/* 邻接矩阵存储 - Prim最小生成树算法 */ Vertex FindMinDist( MGraph Graph, WeightType dist[] ) { /* 返回未被收录顶点中dist最小者 */ Vertex MinV, V; WeightType MinDist = INFINITY; for (V=0; V&lt;Graph-&gt;Nv; V++) { if ( dist[V]!=0 &amp;&amp; dist[V]&lt;MinDist) { /* 若V未被收录，且dist[V]更小 */ MinDist = dist[V]; /* 更新最小距离 */ MinV = V; /* 更新对应顶点 */ } } if (MinDist &lt; INFINITY) /* 若找到最小dist */ return MinV; /* 返回对应的顶点下标 */ else return ERROR; /* 若这样的顶点不存在，返回-1作为标记 */ } int Prim( MGraph Graph, LGraph MST ) { /* 将最小生成树保存为邻接表存储的图MST，返回最小权重和 */ WeightType dist[MaxVertexNum], TotalWeight; Vertex parent[MaxVertexNum], V, W; int VCount; Edge E; /* 初始化。默认初始点下标是0 */ for (V=0; V&lt;Graph-&gt;Nv; V++) { /* 这里假设若V到W没有直接的边，则Graph-&gt;G[V][W]定义为INFINITY */ dist[V] = Graph-&gt;G[0][V]; parent[V] = 0; /* 暂且定义所有顶点的父结点都是初始点0 */ } TotalWeight = 0; /* 初始化权重和 */ VCount = 0; /* 初始化收录的顶点数 */ /* 创建包含所有顶点但没有边的图。注意用邻接表版本 */ MST = CreateGraph(Graph-&gt;Nv); E = (Edge)malloc( sizeof(struct ENode) ); /* 建立空的边结点 */ /* 将初始点0收录进MST */ dist[0] = 0; VCount ++; parent[0] = -1; /* 当前树根是0 */ while (1) { V = FindMinDist( Graph, dist ); /* V = 未被收录顶点中dist最小者 */ if ( V==ERROR ) /* 若这样的V不存在 */ break; /* 算法结束 */ /* 将V及相应的边&lt;parent[V], V&gt;收录进MST */ E-&gt;V1 = parent[V]; E-&gt;V2 = V; E-&gt;Weight = dist[V]; InsertEdge( MST, E ); TotalWeight += dist[V]; dist[V] = 0; VCount++; for( W=0; W&lt;Graph-&gt;Nv; W++ ) /* 对图中的每个顶点W */ if ( dist[W]!=0 &amp;&amp; Graph-&gt;G[V][W]&lt;INFINITY ) { /* 若W是V的邻接点并且未被收录 */ if ( Graph-&gt;G[V][W] &lt; dist[W] ) { /* 若收录V使得dist[W]变小 */ dist[W] = Graph-&gt;G[V][W]; /* 更新dist[W] */ parent[W] = V; /* 更新树 */ } } } /* while结束*/ if ( VCount &lt; Graph-&gt;Nv ) /* MST中收的顶点不到|V|个 */ TotalWeight = ERROR; return TotalWeight; /* 算法执行完毕，返回最小权重和或错误标记 */ Kruskal’s Algorithm对边操作，每次选取一条最短边，如果不会和当前最小生成树构成环（回路），将此最短边加入最小生成树中。当选取了$n-1$（顶点数-1）条边，或找出了所有符合条件的不成环边最小生成树生成完毕,BFS void Kruskal ( Graph G ) { T = { } ; while ( T contains less than |V| - 1 edges &amp;&amp; E is not empty ) { choose a least cost edge (v, w) from E ; delete (v, w) from E ; if ( (v, w) does not create a cycle in T ) add (v, w) to T ; else discard (v, w) ; } if ( T contains fewer than |V| - 1 edges ) Error ( “No spanning tree” ) ; } Analysis:$T=O(|E|log|E|)$ Implementation/* 邻接表存储 - Kruskal最小生成树算法 */ /*-------------------- 顶点并查集定义 --------------------*/ typedef Vertex ElementType; /* 默认元素可以用非负整数表示 */ typedef Vertex SetName; /* 默认用根结点的下标作为集合名称 */ typedef ElementType SetType[MaxVertexNum]; /* 假设集合元素下标从0开始 */ void InitializeVSet( SetType S, int N ) { /* 初始化并查集 */ ElementType X; for ( X=0; X&lt;N; X++ ) S[X] = -1; } void Union( SetType S, SetName Root1, SetName Root2 ) { /* 这里默认Root1和Root2是不同集合的根结点 */ /* 保证小集合并入大集合 */ if ( S[Root2] &lt; S[Root1] ) { /* 如果集合2比较大 */ S[Root2] += S[Root1]; /* 集合1并入集合2 */ S[Root1] = Root2; } else { /* 如果集合1比较大 */ S[Root1] += S[Root2]; /* 集合2并入集合1 */ S[Root2] = Root1; } } SetName Find( SetType S, ElementType X ) { /* 默认集合元素全部初始化为-1 */ if ( S[X] &lt; 0 ) /* 找到集合的根 */ return X; else return S[X] = Find( S, S[X] ); /* 路径压缩 */ } bool CheckCycle( SetType VSet, Vertex V1, Vertex V2 ) { /* 检查连接V1和V2的边是否在现有的最小生成树子集中构成回路 */ Vertex Root1, Root2; Root1 = Find( VSet, V1 ); /* 得到V1所属的连通集名称 */ Root2 = Find( VSet, V2 ); /* 得到V2所属的连通集名称 */ if( Root1==Root2 ) /* 若V1和V2已经连通，则该边不能要 */ return false; else { /* 否则该边可以被收集，同时将V1和V2并入同一连通集 */ Union( VSet, Root1, Root2 ); return true; } } /*-------------------- 并查集定义结束 --------------------*/ /*-------------------- 边的最小堆定义 --------------------*/ void PercDown( Edge ESet, int p, int N ) { /* 改编代码4.24的PercDown( MaxHeap H, int p ) */ /* 将N个元素的边数组中以ESet[p]为根的子堆调整为关于Weight的最小堆 */ int Parent, Child; struct ENode X; X = ESet[p]; /* 取出根结点存放的值 */ for( Parent=p; (Parent*2+1)&lt;N; Parent=Child ) { Child = Parent * 2 + 1; if( (Child!=N-1) &amp;&amp; (ESet[Child].Weight&gt;ESet[Child+1].Weight) ) Child++; /* Child指向左右子结点的较小者 */ if( X.Weight &lt;= ESet[Child].Weight ) break; /* 找到了合适位置 */ else /* 下滤X */ ESet[Parent] = ESet[Child]; } ESet[Parent] = X; } void InitializeESet( LGraph Graph, Edge ESet ) { /* 将图的边存入数组ESet，并且初始化为最小堆 */ Vertex V; PtrToAdjVNode W; int ECount; /* 将图的边存入数组ESet */ ECount = 0; for ( V=0; V&lt;Graph-&gt;Nv; V++ ) for ( W=Graph-&gt;G[V].FirstEdge; W; W=W-&gt;Next ) if ( V &lt; W-&gt;AdjV ) { /* 避免重复录入无向图的边，只收V1&lt;V2的边 */ ESet[ECount].V1 = V; ESet[ECount].V2 = W-&gt;AdjV; ESet[ECount++].Weight = W-&gt;Weight; } /* 初始化为最小堆 */ for ( ECount=Graph-&gt;Ne/2; ECount&gt;=0; ECount-- ) PercDown( ESet, ECount, Graph-&gt;Ne ); } int GetEdge( Edge ESet, int CurrentSize ) { /* 给定当前堆的大小CurrentSize，将当前最小边位置弹出并调整堆 */ /* 将最小边与当前堆的最后一个位置的边交换 */ Swap( &amp;ESet[0], &amp;ESet[CurrentSize-1]); /* 将剩下的边继续调整成最小堆 */ PercDown( ESet, 0, CurrentSize-1 ); return CurrentSize-1; /* 返回最小边所在位置 */ } /*-------------------- 最小堆定义结束 --------------------*/ int Kruskal( LGraph Graph, LGraph MST ) { /* 将最小生成树保存为邻接表存储的图MST，返回最小权重和 */ WeightType TotalWeight; int ECount, NextEdge; SetType VSet; /* 顶点数组 */ Edge ESet; /* 边数组 */ InitializeVSet( VSet, Graph-&gt;Nv ); /* 初始化顶点并查集 */ ESet = (Edge)malloc( sizeof(struct ENode)*Graph-&gt;Ne ); InitializeESet( Graph, ESet ); /* 初始化边的最小堆 */ /* 创建包含所有顶点但没有边的图。注意用邻接表版本 */ MST = CreateGraph(Graph-&gt;Nv); TotalWeight = 0; /* 初始化权重和 */ ECount = 0; /* 初始化收录的边数 */ NextEdge = Graph-&gt;Ne; /* 原始边集的规模 */ while ( ECount &lt; Graph-&gt;Nv-1 ) { /* 当收集的边不足以构成树时 */ NextEdge = GetEdge( ESet, NextEdge ); /* 从边集中得到最小边的位置 */ if (NextEdge &lt; 0) /* 边集已空 */ break; /* 如果该边的加入不构成回路，即两端结点不属于同一连通集 */ if ( CheckCycle( VSet, ESet[NextEdge].V1, ESet[NextEdge].V2 )==true ) { /* 将该边插入MST */ InsertEdge( MST, ESet+NextEdge ); TotalWeight += ESet[NextEdge].Weight; /* 累计权重 */ ECount++; /* 生成树中边数加1 */ } } if ( ECount &lt; Graph-&gt;Nv-1 ) TotalWeight = -1; /* 设置错误标记，表示生成树不存在 */ return TotalWeight; } Depth-First Search(DFS)Implementatiomvoid DFS ( Vertex V ) /* this is only a template */ { visited[ V ] = true; /* mark this vertex to avoid cycles */ for ( each W adjacent to V ) if ( !visited[ W ] ) DFS( W ); } /* T = O( |E| + |V| ) as long as adjacency lists are used */ Application 1: List Componentsvoid ListComponents ( Graph G ) { for ( each V in G ) if ( !visited[ V ] ) { DFS( V ); printf(“\\n“); } } Application 2: Biconnectivity【Definition】articulation point: $v$ is an articulation point if $G’ = DeleteVertex( G, v )$ has at least 2 connected components.biconnected graph: $G$ is a biconnected graph if $G$ is connected and has no articulation points.biconnected component: A biconnected component is a maximal biconnected subgraph.Now, we want to find the biconnected components of a connected undirected $G$. Solution:Find the articulation points in $G$: The root is an articulation point if it has at least 2 children Any other vertex $u$ is an articulation point if $u$ has at least 1 child, and it is impossible to move down at least 1 step and then jump up to u’s ancestor,which means that :$u$ is not the root, and has at least 1 child such that $Low( child ) \\geq Num( u )$. $Num(u)$:DFS遍历时顶点的序号$Low(u)$:原图中和该顶点有边的顶点的最低序号In this graph,vertices {1，3，5，7} are articulation point. Implementation in C#define min(x,y) ((x)&gt;(y)?(y):(x)) void DFS(int u, Graph G, void(*visit)(Vertex V)){ num[u]=low[u]=count++; stack[++top] = u; instack[u]=true; for(PtrToVNode v =G-&gt;Array[u];v;v=v-&gt;Next){ //和G相邻的点 if (!instack[v-&gt;Vert] &amp;&amp; !visited[v-&gt;Vert]) { DFS(v-&gt;Vert, G, visit); //v-&gt;Vert:v的节点编号 low[u] = min(low[u], low[v-&gt;Vert]); } else if (instack[v-&gt;Vert]) { low[u] = min(low[u], num[v-&gt;Vert]); } } Vertex poped_v = -1; if (num[u] == low[u]) { while (poped_v != u) { poped_v=stack[top--]; visit(poped_v); instack[poped_v] = false; visited[poped_v] = true; } printf(&quot;\\n&quot;); } } Application 3: Euler Circuits【Definition】 Euler tour: Draw each line exactly once without lifting your pen from the paper. Euler curcuit: Draw each line exactly once without lifting your pen from the paper, AND finish at the starting point. 【Proposition】 An Euler circuit is possible only if the graph is connected and each vertex has an even degree. An Euler tour is possible if there are exactly two vertices having odd degree. One must start at one of the odd-degree vertices. PuzzlesJudgement &amp; ChoiceProgramSortInseration SortImplementationvoid InsertionSort ( ElementType A[ ], int N ) { int j, P; ElementType Tmp; for ( P = 1; P &lt; N; P++ ) { Tmp = A[ P ]; /* the next coming card */ for ( j = P; j &gt; 0 &amp;&amp; A[ j - 1 ] &gt; Tmp; j-- ) A[ j ] = A[ j - 1 ]; /* shift sorted cards to provide a position for the new coming card */ A[ j ] = Tmp; /* place the new card at the proper position */ } /* end for-P-loop */ } AnalysisThe worst case:Input A[ ] is in reverse order. $T( N ) = O( N^2 )$ The best case:Input A[ ] is in sorted order. $T( N ) = O( N )$ Shell SortImplementationvoid Shellsort( ElementType A[ ], int N ) { int i, j, Increment; ElementType Tmp; for ( Increment = N / 2; Increment &gt; 0; Increment /= 2 ) /*h sequence */ for ( i = Increment; i &lt; N; i++ ) { /* insertion sort */ Tmp = A[ i ]; for ( j = i; j &gt;= Increment; j - = Increment ) if( Tmp &lt; A[ j - Increment ] ) A[ j ] = A[ j - Increment ]; else break; A[ j ] = Tmp; } /* end for-I and for-Increment loops */ } Heap SortImplementationvoid PercDown(int A[], int N, int p) { int parent, child; int temp = A[p]; for (parent = p; 2 * parent + 1 &lt; N; parent = child) { child = 2 * parent + 1; if (child + 1 &lt; N &amp;&amp; A[child + 1] &gt; A[child]) child++; if (temp &lt; A[child]) A[parent] = A[child]; else break; } A[parent] = temp; } void Heapsort( ElementType A[ ], int N ) { int i; for ( i = N / 2; i &gt;= 0; i - - ) /* BuildHeap */ PercDown( A, i, N ); for ( i = N - 1; i &gt; 0; i - - ) { Swap( &amp;A[ 0 ], &amp;A[ i ] ); /* DeleteMax */ PercDown( A, 0, i ); } } QuickSort(Median-3 version)Implementation#define Cutoff 5 /*小数据下插入排序更快，不足Cutoff用插入排序*/ void Quicksort( ElementType A[ ], int N ) { Qsort( A, 0, N - 1 ); /* A: the array */ /* 0: Left index */ /* N – 1: Right index */ }//面向对象思想，封装过程 /* Return median of Left, Center, and Right */ /* Order these and hide the pivot */ ElementType Median3( ElementType A[ ], int Left, int Right ) { int Center = ( Left + Right ) / 2; if ( A[ Left ] &gt; A[ Center ] ) Swap( &amp;A[ Left ], &amp;A[ Center ] ); if ( A[ Left ] &gt; A[ Right ] ) Swap( &amp;A[ Left ], &amp;A[ Right ] ); if ( A[ Center ] &gt; A[ Right ] ) Swap( &amp;A[ Center ], &amp;A[ Right ] ); /* Invariant: A[ Left ] &lt;= A[ Center ] &lt;= A[ Right ] */ Swap( &amp;A[ Center ], &amp;A[ Right - 1 ] ); /* Hide pivot */ /* only need to sort A[ Left + 1 ] … A[ Right – 2 ] */ return A[ Right - 1 ]; /* Return pivot */ } void Qsort( ElementType A[ ], int Left, int Right ) { int i, j; ElementType Pivot; if ( Left + Cutoff &lt;= Right ) { /* if the sequence is not too short */ Pivot = Median3( A, Left, Right ); /* select pivot */ i = Left; j = Right – 1; /* why not set Left+1 and Right-2? */ for( ; ; ) { while ( A[ + +i ] &lt; Pivot ) { } /* scan from left */ while ( A[ – –j ] &gt; Pivot ) { } /* scan from right */ if ( i &lt; j ) Swap( &amp;A[ i ], &amp;A[ j ] ); /* adjust partition */ else break; /* partition done */ } Swap( &amp;A[ i ], &amp;A[ Right - 1 ] ); /* restore pivot */ Qsort( A, Left, i - 1 ); /* recursively sort left part */ Qsort( A, i + 1, Right ); /* recursively sort right part */ } /* end if - the sequence is long */ else /* do an insertion sort on the short subarray */ InsertionSort( A + Left, Right - Left + 1 ); } Complexity and Stability PuzzlesJudgment and Choice During the sorting, processing every element which is not yet at its final position is called a “run”. Which of the following cannot be the result after the second run of quicksort? A.5, 2, 16, 12, 28, 60, 32, 72 B.2, 16, 5, 28, 12, 60, 32, 72 C.2, 12, 16, 5, 28, 32, 72, 60 D.5, 2, 12, 28, 16, 32, 72, 60D 三个pivot , 快速排序每一轮的过程, 观察有几个元素在正确的位置, 每轮当分割点pivot的元素一定会在正确的位置。最理想的是每次都选到中间值, 这样两轮后有三个分割点。A选项，28和72在正确位置, B选项，2和72在正确位置。他们是因为选到了最值72,所以是两个pivot。C选择2和28,32在正确位置。D选项，没有选到最值, 又没有三个pivot, 就是错的。 Given input { 321, 156, 57, 46, 28, 7, 331, 33, 34, 63 }. Which one of the following is the result after the 2nd run of the Least Signification Digit (LSD) radix sort? A.→7→321→28→34→33→331→156→46→57→63 B.→7→321→28→331→34→33→46→156→57→63 C.→156→28→321→331→33→34→46→57→63→7 D.→7→321→28→331→33→34→46→156→57→63D 第一次按照个位排：321-&gt;331-&gt;33-&gt;63-&gt;34-&gt;156-&gt;46-&gt;57-&gt;7-&gt;28第二次按照十位排：7-&gt;321-&gt;28-&gt;331-&gt;33-&gt;34-&gt;46-&gt;156-&gt;57-&gt;63 Among the following sorting methods, which ones will be slowed down if we store the elements in a linked structure instead of a sequential structure?Insertion sort; 2. Selection Sort; 3. Bubble sort; 4. Shell sort; 5. Heap sortA.1 and 2 onlyB.2 and 3 onlyC.3 and 4 onlyD.4 and 5 onlyD 如果在链表中存储数据，变慢的操作是：访问第 $n$ 个元素，变快的是插入。shell需要访问第 $k$ 个元素，heap需要访问 $i/2$ 的元素。 HashingSymbol TableDefinitione.g.In a symbol table for a compilername = identifier (e.g. int)attribute = a list of lines that use the identifier, and some other fields 这里先说一下哈希表的定义：哈希表是一种根据关键码去寻找值的数据映射结构，该结构通过把关键码映射的位置去寻找存放值的地方，说起来可能感觉有点复杂，我想我举个例子你就会明白了，最典型的的例子就是字典，大家估计小学的时候也用过不少新华字典吧，如果我想要获取“按”字详细信息，我肯定会去根据拼音an去查找 拼音索引(当然也可以是偏旁索引)，我们首先去查an在字典的位置，查了一下得到“安”，结果如下。这过程就是键码映射，在公式里面，就是通过key去查找f(key)。其中，按就是关键字(key)，f()就是字典索引，也就是哈希函数，查到的页码4就是哈希值。细分T和keyT：key的值域n：实际的key的数量 Collision &amp; OverflowA collision occurs when we hash two nonidentical identifiers into the same bucket, i.e. $f ( i1 ) = f ( i2 )$ when $i1 \\neq i2$ .但是问题又来了，我们要查的是“按”，而不是“安，但是他们的拼音都是一样的。也就是通过关键字按和关键字安可以映射到一样的字典页码4的位置，这就是哈希冲突(也叫哈希碰撞)，在公式上表达就是key1≠key2，但f(key1)=f(key2)。冲突会给查找带来麻烦，你想想，你本来查找的是“按”，但是却找到“安”字，你又得向后翻一两页，在计算机里面也是一样道理的。 An overflow occurs when we hash a new identifier into a full bucket. Hash Function $f ( x )$ must be easy to compute and minimizes the number of collisions. $f ( x )$ should be unbiased. That is, for any x and any i, we have that Probability$( f ( x ) = i ) = 1 / b$. Such kind of a hash function is called a uniform hash function. ImplementationStruct Definitionstruct ListNode; typedef struct ListNode *Position; struct HashTbl; typedef struct HashTbl *HashTable; struct ListNode { ElementType Element; Position Next; }; typedef Position List; /* List *TheList will be an array of lists, allocated later */ /* The lists use headers (for simplicity), */ /* though this wastes space */ struct HashTbl { int TableSize; List *TheLists; }; Create TableHashTable InitializeTable( int TableSize ) { HashTable H; int i; if ( TableSize &lt; MinTableSize ) { Error( &quot;Table size too small&quot; ); return NULL; } H = malloc( sizeof( struct HashTbl ) ); /* Allocate table */ if ( H == NULL ) FatalError( &quot;Out of space!!!&quot; ); H-&gt;TableSize = NextPrime( TableSize ); /* Better be prime */ H-&gt;TheLists = malloc( sizeof( List ) * H-&gt;TableSize ); /*Array of lists*/ if ( H-&gt;TheLists == NULL ) FatalError( &quot;Out of space!!!&quot; ); for( i = 0; i &lt; H-&gt;TableSize; i++ ) { /* Allocate list headers */ H-&gt;TheLists[ i ] = malloc( sizeof( struct ListNode ) ); /* Slow! */ if ( H-&gt;TheLists[ i ] == NULL ) FatalError( &quot;Out of space!!!&quot; ); else H-&gt;TheLists[ i ]-&gt;Next = NULL; } return H; } FindPosition Find ( ElementType Key, HashTable H ) { Position P; List L; L = H-&gt;TheLists[ Hash( Key, H-&gt;TableSize ) ]; P = L-&gt;Next; while( P != NULL &amp;&amp; P-&gt;Element != Key ) /* Probably need strcmp */ P = P-&gt;Next; return P; } Insertionvoid Insert ( ElementType Key, HashTable H ) { Position Pos, NewCell; List L; Pos = Find( Key, H ); if ( Pos == NULL ) { /* Key is not found, then insert */ NewCell = malloc( sizeof( struct ListNode ) ); if ( NewCell == NULL ) FatalError( &quot;Out of space!!!&quot; ); else { L = H-&gt;TheLists[ Hash( Key, H-&gt;TableSize ) ]; NewCell-&gt;Next = L-&gt;Next; NewCell-&gt;Element = Key; /* Probably need strcpy! */ L-&gt;Next = NewCell; } } } Separate Chaining使用链接散列表。这个是使用链表解决冲突。表的长度由题目给定。 Open AdressingAlgorithm: insert key into an array of hash table { index = hash(key); initialize i = 0// the counter of probing; while ( collision at index ) { index = ( hash(key) + f(i) ) % TableSize; if ( table is full ) break; else i ++; } if ( table is full ) ERROR (“No space left”); else insert key at index; } $f(x)$:Collision resolving function.$f(0) = 0.$ Liner Probing$f(i) = i$ Quadratic Probing$f ( i ) = i^2 $【Theorem】If quadratic probing is used, and the table size is prime, then a new element can always be inserted if the table is at least half empty.【Proof】Just prove that the first $[TableSize/2]$ alternative locations are all distinct.That is, for any$0 &lt; i \\neq j &lt; [TableSize/2]$, we have$( h(x) + i^2 )\\% TableSize \\neq ( h(x) + j^2 ) \\% TableSize $Suppose: $ h(x) + i^2 = h(x) + j^2 ( mod \\ TableSize )$then: $i^2 = j^2 ( mod \\ TableSize )$ $( i + j ) ( i - j ) = 0 (mod \\ TableSize )$ BUT as TableSize is prime,either $( i + j )$ or $( i - j )$ is divisible by TableSize!Contradiction !Q.E.D. Implementation in Quadratic ProbingFindPosition Find ( ElementType Key, HashTable H ) { Position CurrentPos; int CollisionNum; CollisionNum = 0; CurrentPos = Hash( Key, H-&gt;TableSize ); while( H-&gt;TheCells[ CurrentPos ].Info != Empty &amp;&amp; H-&gt;TheCells[ CurrentPos ].Element != Key ) { CurrentPos += 2 * ++CollisionNum - 1; //(i+1)^2-i^2=2*(i+1)-1 if ( CurrentPos &gt;= H-&gt;TableSize ) CurrentPos - = H-&gt;TableSize; } return CurrentPos; } Insertionvoid Insert ( ElementType Key, HashTable H ) { Position Pos; Pos = Find( Key, H ); if ( H-&gt;TheCells[ Pos ].Info != Legitimate ) { /* OK to insert here */ H-&gt;TheCells[ Pos ].Info = Legitimate; H-&gt;TheCells[ Pos ].Element = Key; /* Probably need strcpy */ } } Double Hashing Rehashing动态增长哈希表 Build another table that is about twice as big;(find the closest prime to the two times big size) Scan down the entire original hash table for non-deleted elements; Use a new function to hash those elements into the new table. When to Rehash? As soon as the table is half full When an insertion fails When the table reaches a certain load factor Usually there should have been $N/2$ insertions before rehash, so $O(N)$ rehash only adds a constant cost to each insertion.However, in an interactive system, the unfortunate user whose insertion caused a rehash could see a slowdown. 通过第一个$hash_1(x)$计算，比如$hash_1(x)=key\\%TableSize$,若此时出现冲突，使用如下的公式计算$(hash_1(key) + i * hash_2(key)) \\% TableSize $。还有冲突就增加$i$。","categories":[{"name":"技术","slug":"技术","permalink":"https://orwell-yu.github.io/categories/技术/"}],"tags":[{"name":"学习","slug":"学习","permalink":"https://orwell-yu.github.io/tags/学习/"},{"name":"web","slug":"web","permalink":"https://orwell-yu.github.io/tags/web/"},{"name":"数据结构基础","slug":"数据结构基础","permalink":"https://orwell-yu.github.io/tags/数据结构基础/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://orwell-yu.github.io/categories/技术/"}]},{"title":"孙吧顶针","slug":"孙吧顶真","date":"2022-08-19T06:29:00.000Z","updated":"2022-08-19T10:33:58.000Z","comments":true,"path":"2022/08/19/孙吧顶真/","link":"","permalink":"https://orwell-yu.github.io/2022/08/19/孙吧顶真/","excerpt":"","text":"孙吧丁真表情包来点珍藏多年的丁真","categories":[{"name":"转载","slug":"转载","permalink":"https://orwell-yu.github.io/categories/转载/"}],"tags":[{"name":"图集","slug":"图集","permalink":"https://orwell-yu.github.io/tags/图集/"},{"name":"搞笑","slug":"搞笑","permalink":"https://orwell-yu.github.io/tags/搞笑/"}],"keywords":[{"name":"转载","slug":"转载","permalink":"https://orwell-yu.github.io/categories/转载/"}]},{"title":"2022 Summer","slug":"2022 Summer","date":"2022-08-18T07:29:00.000Z","updated":"2022-08-20T12:48:18.591Z","comments":true,"path":"2022/08/18/2022 Summer/","link":"","permalink":"https://orwell-yu.github.io/2022/08/18/2022 Summer/","excerpt":"","text":"前言千万别吐槽流水账，为了省事本来就是根据旅游前编写的企划Markdown改的这次还挺开心的，而且惊心动魄地遇见了武汉长沙疫情没错我们就是死神大学生当然疫情本身没啥杀伤力，真正可怕的是防疫者的人心 武汉住宿:丽顿壹号客栈 Day 1(2022.7.24)杭州萧山国际机场 厦门航空 MF823713:55 ~ 15:30 武汉天河国际机场地铁：2号线（1h8min）天河机场-&gt;中山公园 丽顿壹号客栈B2口出，到酒店后就吃饭入住，逛了江汉路购物街，晚上开6 Day 2(2022.7.25)丽顿壹号客栈地铁：2号线（46min）循礼门-&gt;广埠屯 武汉大学 (2 hours)然而咕了午餐 湖北省博物馆 (2 hours)然而还是咕了 东湖 (2 hours)骑行环绕但是感觉和瓜渚湖差不多所以拍不出啥照片地铁：2号线（51 min）华中科技大学-&gt;循礼门 丽顿壹号客栈Day 3(2022.7.26)丽顿壹号客栈地铁：2号线-&gt;5号线（38min）循礼门-&gt;积玉桥-&gt;司门口黄鹤楼 黄鹤楼古迹，但是感觉有点乏味步行（黄鹤楼东门出） 辛亥革命武昌起义纪念馆 民主之门，民国之门 地铁：5号线-&gt;1号线彭刘杨-&gt;积玉桥-&gt;循礼门 武汉美术馆(1 hours)感觉还是很不错的 丽顿壹号客栈Day 4(2022.7.27)丽顿壹号客栈8:30 出发地铁：2号线-&gt;4号线（58min）循礼门-&gt;洪山广场-&gt;武汉火车站 武汉火车站 G63710:27~11:52 武汉站-&gt;长沙南长沙住宿：馨里酒店（长沙火车站锦泰广场地铁站店）地铁：2号线（35min）长沙南火车站-&gt;锦泰广场 馨里酒店（长沙火车站锦泰广场地铁站店）小小摆一天 长沙初探，坡子街、文和友打卡小小的爆个照应某人要求此处照片删除 Day 5(2022.7.28)馨里酒店地铁：2号线（30min）锦泰广场-&gt;橘子洲 橘子洲地铁：2号线-&gt;6号线（32min）橘子洲-&gt;迎宾路口-&gt;湘雅医院来到了心心念念的主席山 宜将剩勇追穷寇，不可沽名学霸王 看到一个竹林间纳凉的老人,莫名有点悲怆感 谢子龙影像艺术中心、李自健美术馆地铁：3号线-&gt;2号线（1h12min）洋湖湿地-&gt;长沙火车站-&gt;锦泰广场还是很不错的，边上还有李自健美术馆谢子龙的建筑很有特色，也有助于摄影创作刚好有个Back To Black活动，就再爆个照 馨里酒店Day 6(2022.7.29)馨里酒店地铁：2号线（42min）锦泰广场-&gt;溁湾镇 岳麓山（岳麓书院等）总的来说挺普通的本来下午想做滑道下山，结果因为下雨停了，只能被迫走路下山下山过程中看到了古岳麓寺、黄兴墓、隋舍利塔，甚至还有藏在山中的长沙会战第九战区司令部山中的司令部，如果没有指示牌绝对发现不了，还挺有意思的地铁：2号线（42min）溁湾镇-&gt;锦泰广场 馨里酒店晚上还和T宝吃了甜蜜双人餐，鏖战多索雷斯 Day 7(2022.7.30)行李寄存在酒店 馨里酒店打的 湖南省博物馆还挺好玩的，文物很多，比较有名的是素纱襌衣和辛追夫人遗体辛追夫人不让拍照说来有趣，我们刚走它就改名了湖南博物院所以说我们参观的是最后的博物馆打的 馨里酒店打的这里还差点落下了我的1000XM4 长沙南站 G141815：37~20：28 绍兴北站这就结束啦来张momo镇楼","categories":[{"name":"生活","slug":"生活","permalink":"https://orwell-yu.github.io/categories/生活/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://orwell-yu.github.io/tags/生活/"},{"name":"记录","slug":"记录","permalink":"https://orwell-yu.github.io/tags/记录/"},{"name":"旅行","slug":"旅行","permalink":"https://orwell-yu.github.io/tags/旅行/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"https://orwell-yu.github.io/categories/生活/"}]},{"title":"PyTorch初步：LeNet-5模型搭建","slug":"LeNet-5","date":"2022-08-18T04:29:00.000Z","updated":"2022-08-19T10:33:56.000Z","comments":true,"path":"2022/08/18/LeNet-5/","link":"","permalink":"https://orwell-yu.github.io/2022/08/18/LeNet-5/","excerpt":"","text":"Lab5：深度神经网络训练与加速Zhewen Yu 第一部分 LeNet-5模型1.模型搭建1.1初始化网络根据给出的参考图片，定义网络层。 def __init__(self): super(MyLeNet_5,self).__init__() self.conv1 = nn.Conv2d(in_channels=1,out_channels=6,kernel_size=5,padding=2) self.Sigmoid = nn.Sigmoid() self.pool1 = nn.AvgPool2d(kernel_size=2,stride=2) self.conv2 = nn.Conv2d(in_channels=6,out_channels=16,kernel_size=5) self.pool2 = nn.AvgPool2d(kernel_size=2,stride=2) self.conv3 = nn.Conv2d(in_channels=16,out_channels=120,kernel_size=5) self.flatten = nn.Flatten() self.fc1 = nn.Linear(120,84) self.output = nn.Linear(84,10) 1.其中，由于输入是32*32，实际图片大小是28*28,定义padding为2。2.这里使用sigmoid函数作为激活函数,nn.Sigmoid() 函数是光滑的，便于求导，同时它能够有效的压缩数据幅度。，sigmoid在该模型中效果好于ReLU作为激活函数。3.在最后一次卷积后，图片成为1*1大小，这里考虑将其展开。4.最后设置两个线性连接层，最后输出10个数字。 1.2前向传播网络def forward(self, x): x = self.Sigmoid(self.conv1(x)) x = self.pool1(x) x = self.Sigmoid(self.conv2(x)) x = self.pool2(x) x = self.conv3(x) x = self.flatten(x) x = self.fc1(x) x = self.output(x) return x 1.这里选择激活前两次卷积的结果，以获得较好的结果。2.根据图片逐步搭建池化层和连接层。 2.模型训练2.1将数据转化为张量格式#Data to Tensor data_transform = transforms.Compose( [transforms.ToTensor()] ) 矩阵格式的数据在神经网络中要先张量化。 2.2加载MNIST数据集并设定测试集数据#MNIST import train_dataset=datasets.MNIST(root=&#39;./data&#39;, train=True ,transform=data_transform,download=True) train_dataloader=Data.DataLoader(dataset=train_dataset,batch_size=16,shuffle=True) #load test test_dataset=datasets.MNIST(root=&#39;./data&#39;, train=False ,transform=data_transform,download=True) test_dataloader=Data.DataLoader(dataset=test_dataset,batch_size=16,shuffle=False) 使用DataLoader载入已有的MNIST数据集，其中，batch_size定为16，设定为乱序，载入到当前目录的data文件夹中。 2.3 设置处理设备为GPU#device : GPU or CPU device = torch.device(&quot;cuda:0&quot; if torch.cuda.is_available() else &quot;cpu&quot;) #import GPU model=MyLeNet_5().to(device) 在没有GPU时，也可以由CPU训练。 2.4 定义损失函数、优化器和学习率#Loss Function loss_fn=nn.CrossEntropyLoss() #optimizer optimizer=optim.SGD(model.parameters(),lr=1e-3,momentum=0.9) # Learning Rate Lr_scheduler=optim.lr_scheduler.StepLR(optimizer,step_size=10,gamma=0.1) 这里的损失函数使用交叉熵函数，优化器使用随机梯度下降法。查询资料得知，momentum参数设定为0.9时训练结果最好。对于学习率，为防止抖动太大，每间隔10轮变为原来的0.1。 2.5 定义训练函数。#train def train(dataloader,model,loss_fn,optimizer): loss,current,n = 0.0, 0.0 ,0 for batch,(X,y) in enumerate(dataloader): #forward X,y=X.to(device),y.to(device) output = model(X) cur_loss = loss_fn(output,y) _, pred = torch.max(output,axis=1) cur_acc=torch.sum(y==pred)/output.shape[0] #backward optimizer.zero_grad() cur_loss.backward() optimizer.step() #计算准确率 loss += cur_loss.item() #累加本批次损失 current += cur_acc.item() n+=1 print(&quot;train_loss:&quot;+str(loss/n)) print(&quot;train_acc:&quot;+str(current/n)) 通过交叉熵函数返回的损失值，反向传播增加准确率。 2.6 定义验证函数#验证 def val(dataloader,model,loss_fn,i): model.eval() loss,current,n = 0.0, 0.0 ,0 with torch.no_grad(): for batch,(X,y) in enumerate(dataloader): X,y=X.to(device),y.to(device) output = model(X) cur_loss = loss_fn(output,y) _, pred = torch.max(output,axis=1) cur_acc=torch.sum(y==pred)/output.shape[0] loss += cur_loss.item() #累加本批次损失 current += cur_acc.item() n+=1 writer.add_scalar(&quot;Loss/train&quot;,cur_loss , i) writer.add_scalar(&quot;Acc/train&quot;, cur_acc, i) print(&quot;val_loss:&quot;+str(loss/n)) print(&quot;val_acc:&quot;+str(current/n)) return current/n 基本复制训练部分，值得注意的是验证时模型不参与更新。 2.7设定训练循环#start train epoch =50 min_acc= 0 for i in range(epoch): print(f&#39;round{i+1}\\n-------------&#39;) train(train_dataloader,model,loss_fn,optimizer) a = val(test_dataloader,model,loss_fn,i) #save best model if a &gt;min_acc: folder = &#39;save_model&#39; if not os.path.exists(folder): os.mkdir(&#39;save_model&#39;) min_acc=a print(&#39;save best model&#39;) torch.save(model.state_dict(),&#39;save_model/best_model.pth&#39;) print(&#39;Finished Training&#39;) 设定训练50轮次，保存模型数据到best_model文件夹。 2.8使用TensorBoard实现可视化期间也根据TensorBoard官网教程，在训练程序头尾加上相应代码。 from torch.utils.tensorboard import SummaryWriter writer = SummaryWriter() # ...中间部分省略 writer.flush() writer.close() 关于TensorBoard结果，在4.4中。 3.模型测试3.1 前期导入基本与train.py一致 #Data to Tensor data_transform = transforms.Compose( [transforms.ToTensor()] ) # ...中间部分省略 model.load_state_dict(torch.load(&quot;save_model/best_model.pth&quot;)) 从保存模型参数的best_model文件夹中导入模型。 3.2将张量转化为图片并进行20轮测试# tensor to pictures show = ToPILImage() #vertify for i in range(20): X,y = test_dataset[i][0],test_dataset[i][1] show(X).show() X = Variable(torch.unsqueeze(X, dim =0).float(),requires_grad=False).to(device) with torch.no_grad(): pred = model(X) predicted, actual = classes[torch.argmax(pred[0])],classes[y] print(f&#39;predicted:&quot;{predicted}&quot;,actual:&quot;{actual}&quot;&#39;) 4.模型结果4.1 GPU占用率截图 4.2 训练结束截图 4.3 训练测试截图 4.4 TansorBoard截图可以看到，占用率较为一般，但是实验结果和准确率极高，为1，损失极低，约为0。、 第二部分 参考文献特别鸣谢 哔哩哔哩大学、知乎大学、YouTube UniversityLe-Net 5模型部分https://www.bilibili.com/video/BV11g411u7eL?spm_id_from=333.337.search-card.all.click通过这个视频理解了前向传播、反向传播https://www.bilibili.com/video/BV1SF411K7fK?spm_id_from=333.337.search-card.all.click&amp;vd_source=b7a86eab6c7d442eb274e6592fa32c1f通过这个视频理解了Le-Net5模型原论文https://www.bilibili.com/video/BV1vU4y1A7QJ?spm_id_from=333.337.search-card.all.click通过这个视频逐步理解和搭建了自己的Le-Net5模型骨架https://zhuanlan.zhihu.com/p/362052826通过这篇文章逐步搭建自己的Le-Net5模型骨架 第三部分 代码详见我的github(https://github.com/Orwell-Yu/MyLeNet-5)","categories":[{"name":"技术","slug":"技术","permalink":"https://orwell-yu.github.io/categories/技术/"}],"tags":[{"name":"资源","slug":"资源","permalink":"https://orwell-yu.github.io/tags/资源/"},{"name":"AI","slug":"AI","permalink":"https://orwell-yu.github.io/tags/AI/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://orwell-yu.github.io/categories/技术/"}]},{"title":"当我们在看寝取（ntr)本时，我们在看些什么","slug":"NTR","date":"2022-08-18T04:29:00.000Z","updated":"2022-08-19T10:33:54.000Z","comments":true,"path":"2022/08/18/NTR/","link":"","permalink":"https://orwell-yu.github.io/2022/08/18/NTR/","excerpt":"","text":"当我们在看寝取（ntr)本时，我们在看些什么老文章了，再拿出来水一水。 NTR的核心要义是权力，无论是哪种类型的NTR，其快感的来源，是权力对于个人人格的碾压否定，对于人自身自由的压制；更深层面的，是对原有社会契约关系的破坏。这种权力可能是社会性的，金钱地位名声等，可能是动物性的，俗称睡服。最后的结果无非两种，被压迫者放弃了反抗的权利，向权力妥协；被压迫者反抗权力，重获自由。 弗洛伊德认为，世界上的一切都与性有关，除了性本身，性只关乎权力。施暴者代表的就是这种权力，是权力的具现化，实际上这个人甚至可以不是男的，手段可以不是发生性关系，在ntr叙事里性不过是权力的投影；而女主和苦主是这份权力的被压迫者，不同的情节设计和人物设计会将这份权力的倾轧分配给二者，比如hiten的翔鹤本三部曲，第一部里提督和翔鹤被权力倾轧的程度是比较均衡的，第二部里翔鹤是主要的压迫对象，第三部是破除权力压迫。（所以第一部看着最带感） 一般来说对于女主的碾压是多于苦主的，各类经典的女主视角和隐瞒苦主都是以压迫女主为核心要义的；对于苦主的碾压在情节上的设计更多是苦主自身的无力和主动的妥协或放弃，这一类作品往往冲击力更大，因为本质上这是两个男性在进行权力交锋。 那么代入施暴者，体会的就是权力倾轧的快感，是一种破坏欲和掌控欲；代入苦主，体会的是被压迫的痛苦；代入女主，体会的是自己被工具化的痛苦和被异化时的无力。 跳脱出ntr叙事模式，我们也可以通过这一套权力倾轧模式构筑作品。 不论带入的是施暴者，苦主，还是女主，本质上我们是在批判社会对人的异化。 寝取本，就好像卡夫卡的k与城堡、卡夫卡的那只蟑螂，可以说NTR有市场，就如同现代社会的卡夫卡，标志着异化者与被异化者的狂欢。（大嘘）","categories":[{"name":"随想","slug":"随想","permalink":"https://orwell-yu.github.io/categories/随想/"}],"tags":[{"name":"web","slug":"web","permalink":"https://orwell-yu.github.io/tags/web/"},{"name":"本子讨论","slug":"本子讨论","permalink":"https://orwell-yu.github.io/tags/本子讨论/"},{"name":"哲学","slug":"哲学","permalink":"https://orwell-yu.github.io/tags/哲学/"}],"keywords":[{"name":"随想","slug":"随想","permalink":"https://orwell-yu.github.io/categories/随想/"}]},{"title":"苏联笑话合集","slug":"苏联笑话","date":"2022-08-18T04:29:00.000Z","updated":"2022-08-19T10:33:58.000Z","comments":true,"path":"2022/08/18/苏联笑话/","link":"","permalink":"https://orwell-yu.github.io/2022/08/18/苏联笑话/","excerpt":"","text":"苏联笑话合集例行姓名扫盲：弗拉基米尔同志=弗拉基米尔·伊里奇·乌里昂诺夫（列宁）约瑟夫同志=约瑟夫·维萨里昂诺维奇·朱加什维利（斯大林）尼基塔同志=尼基塔·谢尔盖耶维奇·赫鲁晓夫列昂尼德同志=列昂尼德·伊里奇·勃列日涅夫尤里同志=尤里·弗拉基米罗维奇·安德罗波夫康斯坦丁同志=康斯坦丁·乌斯季诺维奇·契尔年科米哈伊尔同志=米哈伊尔·谢尔盖耶维奇·戈尔巴乔夫拉甫连季同志=拉甫连季·巴甫洛维奇·贝利亚鲍里斯=鲍里斯·尼古拉耶维奇·叶利钦约翰先生=约翰·菲茨杰拉德·肯尼迪吉米先生=吉米·卡特罗纳德先生=罗纳德·里根英迪拉先生=英迪拉·甘地安瓦尔先生=安瓦尔·萨达特 笑话开始1~501）一位公民打电话到亚美尼亚电台问主持人：“共产主义到底是艺术还是科学？”主持人说：“我也不清楚，但我肯定不是科学。”“为什么？”“如果是科学的话，他们应该拿狗做试验。” 2）斯大林的权威斯大林在大会上引经据典地说：“马克思和列宁说一加一等于二，而托洛茨基和布哈林说一加一不等于三。是托洛茨基和布哈林说的对呢？还是马克思和列宁说得对呢？（下面听众一脸疑惑）毫无疑问，是马克思和列宁说的对！”（台下热烈鼓掌）“托洛茨基和布哈林是帝国主义派来的间谍，这些说一加一不等于三的人多么多么无耻啊……”3）有个人向尼基塔同志汇报说：“现在大剧院正上演一个剧，里面有您出现，每当您一出场，下面就热烈鼓掌。”尼基塔同志听了以后非常得意。有一天他买了一张普通票，去看这个剧，他陷入了沉思，忘记了鼓掌，这时旁边有人推了他一把，紧张地说：“哎！你为什么不鼓掌？不要命啦？！” 4）在苏共二十三次代表大会上，列昂尼德同志作报告，他问：“我们这里有没有敌人？”一个人回答：“有一个，他坐在第四排第十八号位子上。”“为什么他是敌人？”“因为列宁说过‘敌人是不会打瞌睡的’，而我发现全场只有他一个人没有打瞌睡！” 5）苏联偷盗现象严重，人民不满。有人问：“到什么时候才没有偷盗现象呢？”有人回答：“到共产主义就没有人偷了，因为在社会主义一切都被偷光了。” 6）美术馆里有一幅描写亚当和夏娃的画。一个英国人看了，说：“他们一定是英国人，男士有好吃的东西就和女士分享。”一个法国人看了，说：“他们一定是法国人，情侣裸体散步。”一个苏联人看了，说：“他们一定是苏联人，他们没有衣服，吃得很少，却还以为自已在天堂！“ 7）一个莫斯科市民的鹦鹉丢了。这是只会骂人的鹦鹉，要是落到克格勃的手里可糟了。这人便在报纸上发表了一篇声明：“本人遗失鹦鹉一只。另，本人不同意它的政治观点。” 8）列宁的夫人克鲁普斯卡娅曾经当面指出斯大林的专制独裁统治，令后者气急败坏，斯大林说：“你再说，我就宣布你不是列宁的妻子！” 9）弗拉基米尔同志、约瑟夫同志、尼基塔同志、列昂尼德同志、米哈伊尔同志一起坐火车旅行。铁轨到了尽头，火车停下。弗拉基米尔同志号召：“立即发动无产者搞星期六义务劳动，修铁路，直通共产主义！”约瑟夫同志抽着烟斗，严肃地下令：“给我从西伯利亚调100万劳改犯来，修不通铁路，统统枪毙。”尼基塔同志敲着皮鞋喊：“把后面的铁路接到前面去，火车继续开！”列昂尼德同志拉上了窗帘，然后对车上所有人说：““同志们，不如拉上所有的窗帘，坐在座位上自己摇动身体，做出列车还在前进的样子……！”米哈伊尔同志摸了摸宽大的前额说：“同志们，管他火车开到哪里，只要把沿途标上‘社会主义’的牌子就行了！” 10）一个老师愁眉苦脸，贝利亚同志关切的询问：“怎么啦？我能帮您什么忙？”老师说：“拉甫连季同志，您帮不上忙，您看，现在的孩子都怎么啦：今天我问柳芭‘列夫·托尔斯泰是怎么死的？’她却说‘不是我干的。’我问萨沙，他也说‘不是我干的。’我问尼古拉，回答也一样！”第二天，贝利亚同志找到老师：“您可以放心了，他们已经招认他们杀了列夫·托尔斯泰。” 11）列昂尼德同志去新德里拜访英迪拉先生，发现阿三随地小便，窃笑不已。英迪拉先生十分不快，去莫斯科回访的时候便满大街找，不禁感叹苏联人民素质高，但又很不甘心。皇天不负，英迪拉先生终于发现有个人在路边浇墙呢，大喜。列昂尼德同志恼羞成怒，下令追查，并回复说――“那人是印度驻苏大使。” 12）一个英国人，一个法国人，一个苏联人在一起聊天。英国人：最幸福的事情就是冬天晚上回家，穿着羊毛裤坐在壁炉前面。法国人：你们英国人就是古板，最幸福的事情是和一个金发女郎一起去地中海度假，然后我们好和好散。苏联人：最幸福的事情就是半夜有人敲门，开门后：“康斯坦丁，你被捕了。 ”“你弄错了，康斯坦丁在隔壁。” 13）一天米哈伊尔同志因私外出，嫌司机车开的太慢，催促了好几次。但因交通拥挤，还是不能让他满意。最后米哈伊尔同志一把抢过方向盘，把司机推到后面，自己开起来。他一路横冲直撞，造成一片混乱。有人打电话向交通局长反映。局长大怒，质问该地段交警。局长：“看到肇事者没有？”警察：“看到了。”局长：“为什么不逮捕他？”警察：“我不敢？”局长：“为什么？”警察：“他的官很大。”局长：“有多大？”警察：“不知道，反正他的司机是戈尔巴乔夫。” 14）米哈伊尔同志视察农场，看到猪儿乖乖，一时兴起站在猪中间照了张像。待到报纸准备发表时，编辑为照片的标题犯了难——“戈尔巴乔夫同志和猪在一起”，不好；“猪和戈尔巴乔夫同志在一起”，也不好；……报纸出版后，照片下的说明文字是——“左起第三位是戈尔巴乔夫同志。” 15）列昂尼德同志和吉米先生在瑞士开会，休息时间两个人很无聊，就开始比谁的保镖更忠诚。吉米先生把自己的保镖叫进来，推开窗（外面是20层楼）说：“约翰，从这里跳下去！”约翰哭着说：“您怎么能这样呢，我还有老婆孩子呐。”吉米先生被感动了，流着泪说是自己不对，叫约翰走了，然后轮到列昂尼德同志，他也大声叫自己的保镖伊万。“伊万，从这里跳下去！”伊万二话不说就要往下跳，吉米先生一把抱住他说：“你疯了？跳下去会死的！”伊万一边挣扎着要跳下去，一边说：“放开我，混蛋，我还有老婆孩子呐。” 16）吉米先生到苏联访问列昂尼德同志，列昂尼德同志陪他参观“建设的伟大成就”，并且得意的说：“到了下一个五年计划，每个苏联家庭都可以拥有一架私人飞机！”吉米先生惊讶地问：“ 他们要飞机干什么呢？”列昂尼德同志说：“当然有用啊……譬如你在莫斯科听说列宁格勒开始供应面包了，你可以马上开着飞机赶去排上队。”吉米先生：“……” 17）弗拉基米尔同志快去世了，叫赶快把继承人斯大林召进克里姆林宫来，临终有几句话要嘱托。“不瞒你说，我还有一个隐忧啊，斯大林同志。”“说吧，亲爱的弗拉基米尔同志。”斯大林专心地听着。“那就是，人们会跟你走吗？不知你想过了没有？”“他们一定会跟我走的。”斯大林强调说，“一定会！”“但愿如此。”弗拉基米尔同志说，“我只是担心，万一他们不跟你走，你怎么办？”“没问题！”斯大林答道：“那他们就得跟你走！” 18）尼基塔同志和约翰先生交谈，各自吹嘘，约翰先生说：“美国医学发达，有种药片死人吃了可以复活。”尼基塔同志说：“苏联体育发达，有人十分钟可以从莫斯科跑到华盛顿。”约翰先生要求兑现，尼基塔同志慌了手脚，召集委员们商量对策。卡冈诺维奇说：“这很好办，你先让肯尼迪把药片拿来，让斯大林同志吃了；斯大林同志如果真的复活，那么你用不了五分钟就可以从苏联跑到美国。” 19）尼基塔同志的汽车被一头牛挡住了，怎么也赶不走，尼基塔同志便下车对牛说：“你再不走，我就把你送到集体农庄去。”牛听了便一溜烟的跑开了。 20）鲍里斯·叶利钦的演讲：“多年来，在戈尔巴乔夫的领导下，我们的祖国俄罗斯一直处在悬崖的边缘。现在，我终于可以自豪地宣布，赶跑了戈尔巴乔夫，我们伟大的俄罗斯终于向前迈出了一大步。” 21）尼基塔同志喜欢以农业专家自居。一次参观某集体农庄养猪场，发现一头病歪歪的小猪。 农庄主席解释说这猪从小营养不良，养僵了。尼基塔同志想想自己幼年当猪倌的经历，当即说，“让我把这猪抱到克里姆林宫去，保证两个月养肥还给你们。”尼基塔同志回家怎么摆弄那猪也不长。情急下决定把猪处理掉。他在傍晚时分将猪放入婴儿车，准备推到莫斯科河边抛掉。谁知半路上偏偏遇上米高扬同志。“尼基塔同志，散步哪。”“啊……出来走走……”“这是谁啊？”“哦，是我……小外孙。”“我看看。哦，多好的孩子，长得真像他外祖父！” 22）《神曲》的作者但丁决定下地狱体验一下他诗中的生活。在地狱里犯人们有淹在血泊里的，有的被火烧烤着。但丁突然发现一个最可恶的坏蛋下面的血泊只淹到膝盖。但丁十分奇怪，上前一看，认出了是贝利亚。 但丁问：“看样子，你挺舒服的啊。为什么血只淹到你的膝盖以下呢？拉甫连季·巴甫洛维奇？”贝利亚得意的回答道：“我是站在约瑟夫·维萨里昂诺维奇·斯大林同志的肩膀上呢！” 23）理查德先生访问苏联。在记者招待会上，理查德先生想借机宣扬美国式的民主，于是说：“在我们美国言论自由，任何人都可以在白宫前大骂：‘理查德·米尔豪斯·尼克松是王八蛋！’肯定没有警察来抓他。”列昂尼德同志不动声色的说：“在苏联同样也是言论自由，任何人也都可以在克里姆林宫前大骂：‘理查德·米尔豪斯·尼克松是王八蛋’同样也没有警察来抓他！” 24）赫鲁晓夫在揭露斯大林同志的暴行时，台下有人递条子上去。赫鲁晓夫同志当场宣读了条子的内容：“当时你在干什么？”。然后厉声喝道：“这是谁写的，请站出来！”连问三次，台下一直没有人站出来。赫鲁晓夫于是说道：“现在让我来回答你吧，当时我就坐在你的位置上。” 25）一天列昂尼德同志在克里姆林宫的走廊上，正好撞上了安德罗波夫。“早上好列昂尼德·伊里奇！我有个好谜语，看你猜不猜得出？我爹的儿子但又不是我本人，这会是谁？”“嗯…………”，列昂尼德同志绞尽脑汁就是答不上来，“这条谜倒挺有水平的，算了！我猜不上来。”“我兄弟！” 列昂尼德同志一听，果然有理，非常欣赏，夸奖了安德罗波夫同志聪明。 再往前没走多远，列昂尼德同志又碰上了前来汇报工作的戈尔巴乔夫同志，他于是把刚从尤里同志那儿听来的谜语拿来在米哈伊尔同志面前卖弄一番，问道：“米哈伊尔同志，你来听这个谜语如何？我爹的儿子但又不是我本人，这会是谁？” 没想到戈尔巴乔夫也答不上来。列昂尼德同志顿时得意非凡地大叫：“哈哈，你真他妈笨！连尤里·弗拉基米罗维奇的兄弟都不知道！” 26）尤里·安德罗波夫执政仅一年零三个月，他的大部分时间是在医院度过的，他患有严重的肾病。康斯坦丁同志同志终于明白了为什么尤里同志登上列宁墓讲话时，前面总有两个麦克风。 他神秘地对米哈伊尔同志说：“你知道为什么尤里同志前面总有两个麦克风吗？一个是讲话用的，而另一个是给他输送氧气的。” 27）伊万看电视，是列昂尼德同志在演讲。伊万觉得无聊，换了一个，还是列昂尼德同志在演讲，又换一个，还是他。伊万一连拨了几十个台，最后累了，准备关电视。这时候电视画面变成了克格勃的尤里同志，怒气冲冲地叫：“你再敢换？再敢换？再换判你10年大牢！” 28）集体农庄庄员伊万在河里捉到一条大鱼，高兴的回到家里和老婆说：“看，我们有炸鱼吃了！”“没有油啊。”“那就煮！”“没锅。”“烤鱼！”“没柴。”伊万气死了，走到河边把鱼扔了回去。那鱼在水里划了一个半圆，上身出水，举起右鳍激动地高呼：“斯大林万岁！” 29）来了一个格鲁吉亚代表团。他们被斯大林接见，谈话，然后离开，斯大林开始找他的烟斗，找不到。他叫贝利亚来：“拉甫连季·巴甫洛维奇，去追代表团，找找谁拿了我的烟斗。”贝利亚赶忙去追代表团。五分钟后，斯大林在一堆纸下找到了他的烟斗。他叫贝利亚——“瞧，拉甫连季·巴甫洛维奇，我找到我的烟斗了。”“太晚了。”贝利亚说，“代表团中的半数已经承认他们拿了你的烟斗，并且加入了‘利用偷烟斗进行暗杀活动的托洛茨基组织’，而另外一半则在审讯中死掉了。” 30）苏联30年代肃反扩大化时期。内务人民委员部的一间牢房里关了三个人，彼此间谈起坐牢的原因。第一个人说：我是因为批评了拉狄克；第二个人说：我是因为支持了拉狄克；第三个人说：我就是卡尔·拉狄克。 31）勃列日涅夫，杜布切克，艾登和尼克松4人乘坐气球。气球漏气了，抬不动4人，开始下坠，必须有人牺牲自己跳出。美国总统喊了声“为了自由世界！”，然后跳了出去。气球下坠暂缓，但过一会儿漏气更多，下坠又加快，必须再跳出1人。于是英国首相喊：“为了女王陛下！”，也跳了出去。暂缓一会儿又不行了，于是列昂尼德同志喊道：“为了社会主义大家庭！”说着就把杜布切克扔出去了。 32）一个苏联人在公众场合对着列昂尼德同志的肖像骂了句“白痴”，被克格勃逮捕，判了5年徒刑，他的罪名是：侮辱党和国家领导人判刑1年，泄露党和国家机密判刑4年。不过听说他很快就被释放了，因为自从列昂尼德同志在联合国发表演说之后，那就不再是党和国家机密了。 33）演讲人在做关于五年计划成就的报告：在列宁格勒新建了一个电站。大厅里有人说：“我刚从那回来，那没有什么电站。”演讲者没有回答，继续说：“在斯大林格勒已建成了一个化学厂。”大厅里有人说： “一周前我在那里，那里没有什么化学厂。”演讲人：“同志们，你们最好少东游西逛的，要多看一些报纸！比如《真理报》！” 34）越战时期 ，河内物资奇缺 ，向苏联求救 。苏联电 ：勒紧腰带 。河内回电 ：请给腰带 。 35）一位美国历史学家和一位俄罗斯历史学家，讨论谁领导二十世纪的前半世纪。“我投票赞成胡佛先生，”美国人说，“他尝试着教导我们美国人不再酗酒！”“那个没什么了不起！”俄国人说，“我选择斯大林，他尝试教我们俄国人不再吃饭。” 36）电报：莫斯科、克里姆林宫，列宁收。列宁同志，请帮助贫穷的犹太人吧！——拉宾诺维奇。第二天，拉宾诺维奇被带到了应去的地方。问：你大脑还正常吗？你不知道，列宁很久以前就死了？拉宾诺维奇：哼，你们总是这样，如果你需要，那他就是讲永生的；如果贫穷的犹太人需要，他就死了。拉宾诺维奇看着标语：列宁死了，但是他的事业还活着。拉宾诺维奇说：最好是列宁活着。 37）一个苏联克格勃特工和一个美国中情局特工互相吹嘘各自的机构是如何的杰出。那个克格勃特工首先发言说，“我们拥有你们美国过去15年里所有导弹发射的详细数据。”中情局特工说：“这不算什么。我们中情局掌握着你们苏联未来15年里所有当选的中央委员名单 。” 38）三个囚犯被送到了古拉格。他们开始谈论为什么他们会来到这里。“我来到这儿，是因为我上班总是迟到五分钟，他们指控我是在（以怠工来）破坏。”第一个说。“我来到这儿，是因为我上班总是早到五分钟，他们指控我是间谍。”第二个说。“我来到这儿，是因为我上班总是准时赶到。”第三个说，“他们指控我拥有一个西方制的手表。” 39）当年的捷克斯洛伐克政府中，设立了一个“海军部”，苏联老大哥就对捷克人说：“你们是内陆国家，设什么海军部？”捷克人回答说：“你们不是也设了文化部吗？” 40）列昂尼德同志：“同志们，美国人登上了月球，我们不能再等了，党决定让你们上太阳。 ”宇航员：“总书记同志，我们会被烧死的。 ”列昂尼德同志：“没关系，同志们，党都替你们想好了，你们晚上去。 ” 41）莫斯科地铁上：“请问您是在克格勃工作的同志吗？？”“不是。”“那您有没有亲戚或朋友在克格勃工作呢？”“没有。”“那您是否跟克格勃有些交往或联系？”“没有，你要干嘛啊？”“干嘛，他妈的，你踩着我的脚了！” 42）二战中，一个英国兵、一个法国兵和一个苏联兵被德国人俘虏了。他们被判处死刑。 行刑前，德国士兵问他们还有什么最后的要求吗？英国人说：“我要一杯啤酒。”他得到一杯啤酒。法国人说：“我想要喝杯葡萄酒。”——他的要求也得到了满足。 轮到苏联人了，他说：“请狠命踢我的屁股。”两个膀大腰圆的德国兵过来，狠狠的把他踢出老远。说时迟，那时快，苏联人突然神勇爆发，挥拳打倒边上几个德国兵，夺得一挺机枪，把一群德国人全撂倒，然后三个人死里逃生。 逃跑的路上，英国人和法国人说：“为什么不早点动手啊？我们差点都被枪毙了！” 苏联人回答：“要是没人踢屁股，我们苏联人可什么也干不了！” 43）列宁表明该如何管理国家 ；斯大林表明该如何不管理国家 ；赫鲁晓夫试图表明谁都能管理国家 ；勃列日涅夫正在表明国家是根本不需要管理的 。 44）两男一女在沉船后沦落荒岛。如果两个男的是西班牙人，他们会用决斗来决定谁拥有那个女人；如果他们是法国人，一个是女人的丈夫，另一个是她的情人；如果他们是苏联人，则会把报告书塞入瓶子，让水流把它漂回祖国，请上级指示他们谁可以娶她为妻。 45）苏联某地出土了一具古尸，科学家们使尽浑身解数也没能鉴定出他的年代 这时候来了两个自称是克格勃的年轻人，二话不说把古尸架进了间小屋。不大工夫，年轻人出来拍拍手说“2235年前的”，科学家们大骇，忙追问克格勃究竟掌握了什么高技术手段。 “这很简单。”年轻人整整衣服说，“他自己招了。” 46）外国领导人要来参观莫斯科幼儿园，问小朋友：“你们国家领导人是谁？”答：“北极熊！”“你们国家最有名的动物呢？”答：“勃烈日涅夫！”“莫斯科哪个地方最高？”“当然是五百三十三米高的奥斯坦基诺电视塔了！”“不，是卢比扬卡广场上克格勃大楼的地下室。从那儿能看清全国每个角落的一举一动。” 47）一个美国人刚从莫斯科机场出来，他想打听一下时间。这时从身旁走过一位莫斯科人，手里拎着个沉重的箱子，很吃力的样子。美国人拦住了他，问他当地时间。莫斯科人放下箱子，抬手看了看表，一口气报出来现在的时间然后还有气压、温度、湿度等信息。美国人很吃惊，问道：“这块表的功能可真多，是苏联的技术生产的吗？”，莫斯科人自豪地回答：“是的，是我们苏联技术制造的。”然后又吃力地重新拎起那个箱子接着说道“就是电池重了点。” 48）列昂尼德同志在冬季奥运会上阅读讲话稿：“O-O-O-O-O。”“不，”，他的助理向他低声道，“那是奥运会的图标。” 49）谁能把大象装进冰箱里呢？超级政治家能够办到。第一步：抓一只猫，让猫在强烈的政治攻击下承认自己是大象。第二步：公布计划：生产一种能装进大象的冰箱，动员国民捐款。实际上并不生产。第三步：收买证人，证明大象已经被装进冰箱里。第四步：利用媒体优势反复强调“猫是大象的祖先”这一理论，以防后患。 50）苏联健康委员会向列昂尼德同志建议：从即日起，我们不打算再使用老鼠做医学实验，取而代之的是来自于克格勃的志愿者，所列的理由主要有三：一、由于粮食紧缺，直接影响到老鼠的生存。而我国目前的克格勃成员要比老鼠多得多；二、实验人员在对克格勃志愿者下手时的罪恶感要比对老鼠下手时小得多；三、无论你怎样努力，有些事情老鼠还是不会去做的，而对克格勃来说没有他们不能去做的事情。 51~10051）二次大战时，罗斯福，丘吉尔，及斯大林三位巨头在雅尔塔开会。罗斯福，丘吉尔处处被动，因此两人合计着想算计斯大林一把。丘吉尔首先开腔：“昨天我作了一个梦，梦见自己成了地球的主宰！”罗斯福也接着说：“昨天我也作了一个梦，梦见自己成了宇宙的主宰！”两人说完后，得意地瞧着斯大林。斯大林微微一笑，说道：“昨天我也作了一个梦，梦见自己既没有批准对丘吉尔先生的任命，也没有批准对罗斯福先生的任命。” 52）莫斯科卢比扬卡9号大楼外。一个愁眉苦脸的男子一边走路一边自言自语：“肥皂没有，电池没有，袜子也没有……”这时旁边走过来一个看起来象是便衣的人小声对他说：“公民同志，您要是再这样诋毁我们伟大的社会主义国家，我就要拿手枪把敲你的脑袋了！”那个男子看看便衣警察，继续自言自语：“看看，连子弹也没有……” 53）苏联社会变化在于，在斯大林时代，当有陌生人敲门的时候，屋子里的人都停止说政治笑话而把酒拿出来，到了70年代以后，还有陌生人敲门的话，他们会开始说政治笑话而把酒藏起来。 54）苏联生产的彩电常常发生爆炸事故。一次彩电爆炸事故发生以后，一个现场采访的记者气愤地说：“这种彩电应该让敌人看！！” 55）亚历山大、凯撤、拿破仑做为贵宾，参加红场阅兵。我要是有苏联的坦克，我将是战无不胜的！——亚历山大说。我要是有苏联的飞机，我将征服全世界！——凯撤说。我要是有《真理报》，全世界现在也不会知道滑铁卢！——拿破仑说 56）问：拉宾诺维奇，你经常读报纸吗？答：当然，要不我怎么知道我们有幸福的生活？ 问：消息报和真理报有什么区别？答：在真理报上没有消息，在消息报上没有真理。（注：《真理报》和《消息报》分别相当于苏联的《人民日报》和《参考消息》） 问：工兵和报纸的编辑有什么共同之处？答：他们不论是谁，一生只能错一次。 问：报纸和广播什么最有用？答：当然是报纸。你不能用电视擦桌子，你不能用电视擦屁股。 问：可以把汽车卷到报纸里去吗？答：要是上面有赫鲁晓夫同志的话。 57）病人在挂号的地方要找眼耳科医生，人们对她说只有耳鼻喉科医生和眼科医生。但是病人还是坚持说：“我还是想要耳科医生。”医生问：“你到底是哪里不正常？”病人：“看见的是一个，听见的又是一个。” 58）问：广播电台总说，我们的食品充足，可是冰箱里却总是空的，这是为什么？答：把广播连到冰箱上就好了。 59）精神病院里播放着赫鲁晓夫的演讲。讲完一段，所有人都热烈鼓掌，只有一个人站着不动。旁人问道：“你为什么不鼓掌？”答：“因为我是医生。” 60）问：悲观主义者和乐观主义者有什么区别？答：悲观主义者是信息灵通的乐观主义者，而乐观主义者是经过很好引导的悲观主义者。 61）问：为什么有人提出合理化建议，要在新型的电视机上安装活动刷，象汽车的风挡玻璃上的雨刷一样。答：这是因为总是有人往上吐痰。 62）问：英国的情报人员是怎样在伦敦抓到苏联间谍的，而这个间谍曾经认为根本不可能抓到？答：我们只是得到命令要抓这样一个人，他从公共卫生间里出来的时候会一边走一边系裤扣。 63）问：听说莫斯科奥运村的房子是由特殊材料制成的，请说一下，它的成份是什么？答：是的，10%的水泥和90%的麦克风。 64）苏联举行十月革命节阅兵，沿着大街开来了炮兵、机械化步兵、坦克、自行火炮、战术导弹、战略核导弹，破坏力一个比一个大，可队列末尾却是两个带公文包的矮子。在看台上勃列日涅夫惊讶地问：“这两个人破坏力比核导弹还大！他们是什么人？”安德罗波夫说：“不是我的人。”格列奇科说：“没见过他们。”柯西金低声答道：“他们是国家计划经济委员会的……”（注：安德罗波夫当时系克格勃主席，格列奇科系国防部长，柯西金系部长会议主席——即总理） 65）问：妻子怎样才能控制自己的丈夫？答：德国女人让自己的男人事务缠身，法国女人用自己的身体来笼络自己的男人，苏联女人用党组织来控制自己的男人。 66）说：曾经有法老和犹太人，法老灭绝了，犹太人活下来了；曾经有宗教裁判官和犹太人，前者都死绝了，后者活了下来，曾经有纳粹和犹太人，前者灭绝了，后者存活了下来，现在有共产主义者和犹太人。问：你到底想说什么？答：没什么，只是说犹太人可能活到最后。 67）军事演习区，一位妇女驾车在大桥前被一名军官拦住：“对不起，公民，您现在不能过去。”“为什么？”“这座桥在一小时前被炸毁了。”“您能告诉我这究竟是怎么回事吗？”“很抱歉，不行，我本人已于2小时前阵亡。” 68）在苏联的一次大会上，主持人突然说：下面请认为社会主义好的同志坐到会场的左边，认为资本主义好的同志坐到会场右边。大部分人坐到了左边，少数人坐到右边，只有一个人还坐在中间不动。主持人：“那位同志，你到底认为社会主义好还是资本主义好？”答：“我认为社会主义好，但是我的生活像是资本主义。”主持人慌忙说：“那请您赶快坐到主席台上来。” 69）苏联邮政局发行历届领导人纪念邮票。发行没1个月，邮政局宣布紧急停止使用该邮票，理由是：寄信人不知道往哪面吐唾沫。 70）早年莫斯科修地铁，工程师将方案上报斯大林审批。不久，方案发下来，上面有斯大林的签字，细心的工程师发现图纸上多了一个圆型的茶杯印，于是莫斯科地铁就多了一条环形线。 71）问：我们为什么不能两党制？答：妈的，这一个党都养不起，还两个党，你疯了！ 72）卫国战争期间，一个级别较低的军官在最高统帅部向斯大林送呈文件，由于过分紧张，他打翻了办公桌上的墨水瓶，浓黑的墨水滴在了斯大林雪白的裤子上。低级军官立即吓的面无人色，浑身哆嗦，连话都说不出来。斯大林见他吓成这个样子，很不满的说：“你以为斯大林同志只有一条裤子吗？” 73）“列昂尼德·伊里奇又住院了。”“作什么手术？ ”“扩胸手术。”“为什么？”“勋章没地方挂了。” 74）列昂尼德同志同志当上苏共中央总书记之后，将在乡下的老母亲接到了莫斯科。老太太来了以后，列昂尼德同志得意洋洋地向老妈展示了一番自己的豪华别墅、高级汽车、名贵家具等等，展示完了后，列昂尼德同志问老太太这一切如何？老太太说：“儿啊，这一切都很好，但是——共产党来了你怎么办？” 75）拉宾诺维奇在克里姆林宫里工作，他待在救世主塔楼前望着远方，以便在共产主义到来时及时发出信号。美国人想要引诱他为他们工作，让它在经济危机到来时发出警告。拉宾诺维奇回答说：“不，我需要一个固定的工作。” 76）列宁对大家说：“我们的一只脚已经踏上社会主义，另一只脚则迈向共产主义。”一个老大娘说：“要是时间太长，人就会变成拐子。” 77）肃反时期学生：“里海鳊是什么？”老师：“这是鲸的一种，它能游到共产主义。”学生：“真的吗？”老师：“当然，如果你发现有哪只里海鳊游不到共产主义，那它就是反革命。” 78）“兔子和赫鲁晓夫有什么区别？”“兔子不喜欢瞎说。” 79）“你已经储藏肥皂和洗衣粉了吗？”“没有，怎么了？”“哎，你怎么这样，要知道尼基塔同志要主管化学工业了！” 80）“要是鳄鱼呑下列昂尼德同志，将会出现什么情况？”“要两个星期才能消化徽章。” 81）在勃列日涅夫的住宅里响起了电话铃声，妻子拿起了话筒，传来了一个女人的声音。妻子：“你是哪位？”女人：“我是他的中学同学。”妻子：“你肯定不是他的中学同学，列昂尼德什么时候也没上过学校。” 82）一位苏联女歌手预先就知道自己会成功，因为她将歌唱歌颂斯大林的歌曲。 83）问：还存在个人崇拜吗？答：崇拜还有，个人已经没有了。 84）问：勃列日涅夫的眉毛是什么样的？答：是斯大林的胡子，只是在更高的水平上。（注：斯大林的胡子密，勃列日涅夫的眉毛浓） 85）法学家、外科医生、建筑师和共产主义者争论谁的职业更古老：“当上帝把亚当和夏娃逐出伊甸园地，这就是法律行为。”——法学家说。“请听我说，在这之前上帝用亚当的肋条造出夏娃时，这就是外科手术。”——外科医生说“请听我说，比这更早的时候上帝创造了世界，在这之前完全是一片混乱。”——建筑师说。“谁创造了混乱？当然是共产主义者。”——共产主义者叫道。 86）三个人准备入党，但是都担心自己的非无产阶级出身：“实话说，我爸爸有一个小工厂，当然不能和斯大林汽车厂相比。”－—一个人说。“实话说，我爸爸有一个小商店，当然不能和国营百货商店相比。”—－另一人说。“实话说，我妈妈有一个小妓院，当然不能和现在的相比。”—－拉宾诺维奇说。 87）问：为什么在苏联没有失业现象？答：这是因为大家都在忙。一些人在建设，另一些人在破坏。 88）问：拉宾诺维奇在流放到西伯利亚的时候都做了什么？答：从事科学研究。娶楚克奇人为妻，培育抗寒的犹太人。 89）问：在苏联什么是最永恒的事情？答：暂时的困难。 90）在集体农庄党的会议上将研究两个问题：建造木棚和建设共产主义。在没有木板的情况下，直接研究第二个问题。 91）炮兵学院标语——我们的目标：共产主义。 92）社会主义者、资本主义者、共产主义者商定要见一面。社会主义者过了约会的时间才到。“对不起，我去排队买香肠来着。”社会主义者抱歉的说道“什么是排队？”资本主义者问。“什么是香肠？”共产主义者问。 93）问：共产主义社会的人将会是什么样的？答：有一双小手，因为他们什么都不用做，机器都替他们做了。他们有一双小脚，因为他们不用走，只是坐车、坐船、坐飞机。他们会有一个小肚子，因为吃的都是高热量的药丸。他们都有非常大的脑袋，他们要绞尽脑汁想方设法获得这种药丸。 94）问：共产主义实现时警察还存在吗？答：当然不。那时候所有公民都已经学会自己逮捕自己了。 95）问：数学和科学社会主义有什么区别？答：在数学上，如果给出什么东西，都需要证明。而科学共产主义什么都能证明，就什么也不能提供。 96）问：共产主义还有会货币吗？答：南斯拉夫的修正主义者会说有，中国的教条主义者说没有。我们的尼基塔同志认为应该辩证的看待这个问题：会有货币，但不是每人都有。 97）斯大林做报告说：“……共产主义已经出现在苏联的地平线上了……”老工人不知道什么是地平线，回家后问儿子。儿子说：“地平线就是能看到却永远走不到的一条线。” 98）二战结束后，一个波兰农村老太看到街上贴着的照片就说像自己的外甥。别人训斥她：“瞎说什么，这是斯大林同志。”老太：“他是干什么的？”答：“他赶跑了纳粹。”老太急切地问：“他能不能把俄国人也赶跑啊？” 99）列昂尼德同志访问印度时，大批印度人到机场欢迎。列昂尼德同志便问英迪拉先生：“你是用什么办法让这么多人来欢迎我的？”回答：“凡是来欢迎你的人都能够得到5个卢比的奖励。”后来英迪拉先生到苏联访问时，有成千上万的苏联人从机场到莫斯科市内的道路上夹道欢迎。英迪拉先生问列昂尼德同志：“你是用什么办法让这么多人来欢迎我的？”回答：“凡是不来欢迎你的莫斯科人，每人罚款5卢布。” 100）勃列日涅夫即将访问波兰，波兰当局命令一位著名画家创作一幅名为《勃列日涅夫在波兰》的大型油画作为献礼。很不情愿的画家在威逼下接受了工作。画完成后，波兰一高官前来验收，结果让他大吃一惊：画面上是一男一女在豪华的大床上极尽缠绵，窗外的风景是克里姆林宫。“这是什么？这女的是谁？！”高官愤怒地问。“勃列日涅夫的夫人。”画家答道。“男的呢？！”“勃列日涅夫的秘书。”“可勃列日涅夫同志在哪里？”“勃列日涅夫在波兰。”画家答道。 101~150101）一老者人行道闲溜，不慎落入道旁河中，遂高呼：“救命！”一旁有两警察路过，可他们视若不见，仍边走边谈笑。老者情急生智，遂又高呼：“打倒勃列日涅夫！”两警察闻之大惊，急速跳入河中，将老者拖上岸来铐之。 102）戈尔巴乔夫颁布限酒令后，想要买到酒只能在指定销售处排长队来买。一个莫斯科人排队排烦了，就嚷道：“我要到克里姆林宫把戈尔巴乔夫干掉。”然后转身离去。一会儿他又回来了。旁边人问他：“已经干掉了吗？”答：“干什么干啊！那里的队比这里还长。” 103）问：可能在瑞典建成共产主义吗？答：不能。列宁同志说了，“共产主义不在山那边”！ 104）问：可能在以色列建成共产主义吗？答：为什么那么小的国家要有那么大的福气？ 105）问：可能在美国建成共产主义吗？答：从原则上是可能的。但是那样的话我们到哪里买粮食？ 106）问：可能在瑞士建成共产主义吗？答：可能的。但是为什么？瑞士哪得罪你了？ 107）工人说：“我们已经是共产主义了。”有人问：“为什么？”工人说：“我们实现了各尽所能、各取所需的分配原则。”“什么？？？”工人解释道：“你没看见我们工人各尽所能，我们的领导各取所需吗？” 108）问：苏联人第六感的什么方面最发达？答：高度的满足感。 109）问：苏联制度的优越性在哪里？答：成功地克服了在其它社会制度里不会存在的困难。 120）问：假设你在酒吧里，而一个陌生人坐到你的身边并开始唉声叹气，你该怎么做？答：立即去阻止这种反苏宣传！ 121）问：苏联和英国的童话有什么不同？答：英国童话的开头通常是：“很久很久以前……”，而我们的则是：“不远了，不远了……” 122）问：为什么我们执行总路线那么慢？答：因为每次党代会转的弯太大。 123）问：下次选举的结果会是怎样的？答：没人知道。有人从中央委员会那里偷走了下次选举的确切结果。 124）问：有40颗牙4条腿的是什么东西？答：鳄鱼。问：有4颗牙40条腿的是什么东西？答：政治局。（注：讽刺老人政治，20个人只剩下4颗牙没掉了） 125）“同志，你对这个问题有什么意见吗？”党支书问道。“对，我是有意见，但我不同意我的意见！” 126）问：鸡和蛋哪个先有？答：从前两个都有。 127）问：是什么原因决定了我们能在西方国家买那么多小麦？答：要知道资本主义的最大缺点就是生产过剩。 128）一对夫妇生了一个孩子，如果长得像父母，那就是按反动的孟德尔-摩尔根基因学说生出来的；如果长得像他们的邻居，那就是按照李森科的革命的环境决定学说生出来的。 129）复活了的马克思，在看了苏联的“现实社会主义”、“发达社会主义”后说：“全世界无产者，原谅我！”列宁看了苏联实现了的那种社会主义后说：“我准备重返瑞士，以便从头做起。” 130）有人问：“社会主义和资本主义与什么不同？”回答说：“在资本主义人与人都是狼，而在社会主义人与人是狼同志。”另一种回答：“在资本主义是人剥削人，而在社会主义刚好相反。” 131）两个中学同学相遇然后寒暄。“您现在在哪工作。”“中学老师。您呢？”“克格勃。”“啊，您在克格勃具体干什么？”“我们负责揪出那些对国家不满的家伙。”“您的意思是……还有人比较满意？”“那些人不归我们管——管他们的是纪委。” 132）苏联穷兵黩武，军中物质紧缺。军需处长在一名下士的陪同下到兵营视察物质供应情况。他们走到油料库附近，在地上发现一个烟头。军需处长不满的说：“这是谁的烟头？！”下士看了看四周，欣喜的说：“看来谁的也不是，上校同志，赶快拣起来吧！” 133）古巴举行盛大五一节游行，卡斯特罗率党和国家领导人全体出席，检阅游行队伍。就在游行队伍通过主席台的时候，卡斯特罗同志突然发现人群中有一个人掏出一块新手帕擦了擦鼻子，于是他马上对身边的一位政治局委员道：“我敢打赌，这个拿手帕擦鼻子的人里面没穿内裤！”委员不以为然，难道卡斯特罗同志真长了透视眼不成？他马上命令警卫把那个人叫道跟前，亲自询问，吃惊地发现，这人长裤里面果然是光着的。委员敬佩地问领袖：“卡斯特罗同志，您是如何知道透过外衣看见他没穿内裤的？”卡斯特罗回答：“我看见他掏出了新手帕，他的布票显然没用来买内裤嘛。”众人大惊，无不佩服领袖超凡的洞察力…… 134）勃列日涅夫发表广场演说，群众听见“……勃列日涅夫同志的逝世令我们非常难过……”，一片哗然。勃列日涅夫似乎发现了什么，把手伸进口袋摸了一下。 “同志们，对不起，离开政治局的时候，我穿了安德罗波夫同志的西装。” 135）匈牙利的政治笑话 ：学生问：“为什么苏联好？”老师答：“因为苏联红军解放了我们。”学生问：“为什么美国不好？”老师答：“因为美国还没有来解放我们。” 136）一位苏联外交家和他的女朋友见面，女友问：“在你们那儿，人们通常是怎样约会的？” “在我们那儿，人们通常会更快地熟悉对方……” “真的？” “因为男女见面之初，总是要互相搜索对方的身体，看有没有藏着窃听器！” 137）在政治局会议上，勃烈日涅夫兴致勃勃地说：“同志们都说我那三本回忆录写得好，哪天给我弄一套，我也读一读。”（注：勃列日涅夫获得了列宁文学奖的三本回忆录《小地》、《复兴》、《垦荒地》在其死后被揭露系捉刀之作） 138）某日，戈尔巴乔夫召开国民大会。“同志们，目前国内形势有些紧张，望大家谅解！”一工人站起曰：“我们保证按时上班。”戈尔巴乔夫大悦，继续说：“再过些时日，大家会更紧张，也许会有人挨饿！”工人又说：“我们可延长时间干！”戈尔巴乔夫有些感动：“随时间发展，大概会有失业现象。”工人回答：“不要紧，我们将加班玩命的工作。”戈热泪盈眶：“谢谢，但是最后也许会有人饿死。”工人大声说：“我们24小时连续工作，怎么样，总书记？！”戈狂奔下主席台，紧紧握住该人的手，说：“…我…我该…该…我该怎么说呢，您从事何种职业？” 工人受宠若惊，面露难色说：“我……我…我是火葬厂的。” 139）一个美国人和一个苏联人坐在一起聊天。美国人说：“在我们美国，工人一个月挣八百元。”苏联人问：“在你们国家多少钱够生活一个月？”“四百元。”“那多出的四百元怎么办？”“我们不管，那是他们自己的事。”苏联人若有所思地说：“在我们俄国，工人一个月也挣八百元。”“那多少钱才够生活？”“一千二百元。”“啊？那还差四百元怎么办？”“我们不管，那是他们自己的事。” 140）苏联人造卫星试验中动用了以下力量： 东德的火箭； 罗马尼亚的能源； 捷克的电子设备； 俄罗斯的狗。（注：讽刺经互会，苏联的一切都是从东欧国家搞来的。事例为苏联用火箭将小狗莱卡送上太空。） 141）勃列日涅夫出访埃及。安瓦尔·萨达特总统请求苏联提供三笔经济援助。“第一笔是100万吨煤。”安瓦尔说。 “没问题。”勃列日涅夫答道。 “还要20条远洋货轮。” “完全可以！” “最后是一个小小要求，我想要一辆自行车，送给我的孩子做生日礼物。” “那可不成，”勃列日涅夫皱起了着眉头，“波兰人不生产自行车。” 142）苏联式的选举：第一次苏联式的选举是由上帝发明的。上帝把夏娃带到亚当面前，并宣布道：“选择你的妻子吧！孩子。” 143）一艘苏联核潜艇和美国核潜艇在公海相遇。苏联潜艇又旧又破，满是锈斑，美国人的潜艇则非常整洁，苏联人邀请美国军官们到自己的艇上参观。 美国军官们经过通道来到潜艇主控室参观。突然，陪同他们的苏联艇长歇斯底里的暴怒起来：“他**！是哪个混蛋把这该死的靴子扔在控制台上的？？！” 美国人得意的说：“在我们美国潜艇上，从来没有……”苏联艇长怒气冲冲的说：“美国？已经没有美国了！到底是哪个混蛋把这该死的靴子扔在控制台上的？？！”（注：靴子扔到控制台上-导弹发射-没有美国了……） 144）美国宇航员和苏联宇航员同时登上了月球。 “报告休斯顿，苏联人也登上了月球！”“没关系。”“报告休斯顿，苏联人正在把月球涂成红色！”“没关系。” 于是，美国宇航员眼睁睁看着苏联人把整个月球漆成红色然后扬长而去。 “报告休斯顿，苏联人已经把月球涂成了红色！”“那正好，就在上面加上Coca Cola的标志吧！” 145）一次，前苏联诗人马雅可夫斯基正在发表演讲，一个矮胖的人走到讲台上来，指责诗人的演讲有极大的偏见，最后嚷道：“我应当提醒你，拿破仑有一句名言：‘从伟大到可笑，只有一步之差’……”马雅可夫斯基看了看那人同自己的距离，跨前到距那人一步，然后用赞同的口气说：“不错，从伟大到可笑，只有一步之差……” 146）戈尔巴乔夫时期。一男子来到酒馆……男子：“来瓶儿伏特加！”侍者：“10卢布。”男子：“上次来还是5卢布，怎么……？”侍者：“伏特加5卢布，另外5卢布是党的革命基金。” 男人不情愿地掏出10卢布递给侍者。奇怪，侍者又找了他5卢布。男子：“怎么又找了5卢布？”侍者：“酒都卖光了。” 147）为了刺探苏联的战略情报，美国研制了U-2高空侦察机，无奈苏军打不着，因为U-2实在是飞的太高了！结果有一次还是把U-2打下了一架，只见美国飞行员（鲍威尔）手上戴了六只戒指！赫鲁晓夫在联大上出示了被打下的飞行员照片，向世界展示，并问美国人：“你们的飞行员飞那么高干什么，还戴了六只戒指，难道想飞到火星上勾引那里的女人？！” 148）谢尔盖中士带领他的小队完成了防核训练。 “小伙子们，你们还有什么问题？可以提出来。” “请问，中士同志，当核武器爆炸时，我应该把武器放在什么地方？” “伸长手臂，把你的机枪放在离身体尽可能远的地方。” “那是为了什么？” “免得武器熔化时，液态金属溅到军服上，使国家发给你使用的装备蒙受损失。” 149）有一次，著名的歌唱家科兹洛夫斯基得知斯大林很赏识他，便向斯大林提出一个请求：“我从来没有去过国外，所以我想……” “你不会出逃吧？” “瞧您说的，斯大林同志！对我来说，家乡的村庄比外国可要亲得多。” “不错，好样的！那你就回家乡去吧。” 150）科学院院士博戈莫列茨发展了有关长寿的理论。他断言，人可以活到150岁。斯大林本人显然也对他的工作成果很感兴趣，所以非常关心他的工作。 博戈莫列茨任何要求均得到满足，被授予各种奖章和称号：科学院院士，斯大林奖金获得者，社会主义劳动英雄…… 博戈莫列茨于1946年去世，终年65岁。斯大林得知这个消息后说：“这家伙把大家都骗了！” 151~200151）有一次，朱可夫从斯大林的办公室里出来时，怒气冲冲地说：“小胡子魔鬼！” 正在接待室的贝利亚听到了句话，他走进斯大林的办公室，把这话告诉了斯大林。斯大林让人把朱可夫叫了回来。 “朱可夫同志，您从我办公室出去时，说了一句‘小胡子魔鬼’，您是在说谁？” “希特勒！我还能说准呢，斯大林同志？” “贝利亚同志，而您又是在说谁呢？” 152）克格勃审核。“你爱你的太太吗？”主考官问。“是的。”“你爱你的国家吗？”主考官又问。“是的。”“那一个是你的最爱？”主考官问。“国家。”“好，我们将带你的老婆到这里，你拿这把枪到隔壁房去杀了她。” 这男子到了隔壁房，没多久便传出6声枪响，接着又传出压碎声持续着数分钟。此男子带着松垮的领带走出房间，他将手枪放在桌上。主考官看着他，并问：“怎么了？”他说：“你给我的枪都装着空包弹，我只好勒死她。” 153）一天，办公中的苏斯洛夫忽然捧腹大笑起来。安德罗波夫：“米哈伊尔·安德烈耶维奇同志，您想起了什么好笑的事情吗？”苏斯洛夫：“忽然想到了昨天听到的一个关于勃列日涅夫的笑话……实在太好笑了。” 安德罗波夫：“哦？能说来听听吗？”苏斯洛夫：“你疯了？！我刚把那个说笑话的送进精神病院！”（注：苏斯洛夫系勃列日涅夫时期的意识形态权威和党内第二把手，素有“灰衣主教”之称，负责文化界的意识形态工作；苏联常将不同政见者送至精神病院进行“治疗”） 154）斯大林周围的人都非常怕他。一次，电影导演科津采夫为斯大林放映自己导演的一部电影。他想知道斯大林对影片的印象如何。这时，斯大林的助手波斯克利贝舍夫走了进来，交给斯大林一张字条，并打开了电灯。斯大林含糊地嘟哝了一句：“不好。” 科津采夫立即晕了过去。斯大林说：“等这个可怜虫醒过来后，你们告诉他，我说‘不好’是说字条不好，不是说他的电影。整个西方都对斯大林同志说‘不好’，斯大林可没有因此而晕过去。” 155）美国总统访问莫斯科，并在一家工人家做客。这家有各种现代化电器，还有私家车，生活很是富裕。访问即将结束时，美国总统问主人：“能告诉我你最想买的一件奢侈品吗？”主人：“一双优质皮鞋。” 156）书记：我们苏联皮鞋的产量是美国的两倍！群众：而且重量也是他们的四倍！ 157）某干部去视察植树工作。只见两个青年，一个在挖树坑，另一个随后用土填上。干部很奇怪，问他们在干什么。一个青年说：“我和彼得、伊万是植树的，我负责挖树坑，彼得负责插树苗，伊万负责填土。今天彼得生病了不能来，可是我们还要坚持工作啊！这不，我和伊万来了……” 158）一个领导在给集体农庄庄员训话：“生活在苏联，你们是多么幸福！你们有的吃，有的穿，而且每年能买一双新鞋子！”后排的一个老太太立刻说“对！和沙皇时代差不多！” 159） 1936年秋，西方盛传斯大林重病不治，溘然长逝。美国合众社驻莫斯科记者查尔斯·尼特想获得最权威的消息，就来到克里姆林宫门口，请秘书把他的信转交给斯大林。信中恳求斯大林对上述谣传予以证实或否定。斯大林的复信如下：可敬的先生： 据我从外电外报获悉，我早已离开罪恶的人世，移居极乐世界。既然您不想从文明人名单中勾销，对外电外报倒是不能不笃信无疑的。敬请相信这些报道，务必不要打扰我在极乐世界的长眠。顺致敬意。 约·斯大林 1936年10月26日 160）列夫·梅赫利斯在苏联卫国战争期间曾任方面军军事委员会委员。有一次，他在向斯大林报告了前线形势后，顺便提起风流倜傥的罗科索夫斯基将军“有生活作风问题”。斯大林听了没做任何反应。梅赫利斯不甘心，执意要打击这位春风得意的将军，临走时又向斯大林问道：“我们到底拿罗科索夫斯基同志怎么办？他搞女人搞得也太得意了！”斯大林不喜欢纠缠干部的枝节问题，更不爱听小报告。他反问梅赫利斯：“怎么办？你只能眼馋呗。” 161）苏联海军元帅伊万·伊萨科夫于1938年起担任苏联副海军人民委员。1946年的一天，斯大林打电话给他，说考虑任命他为海军参谋长。伊萨科夫回答：“斯大林同志，我得向您报告。我有严重缺陷，有一条腿在战争中受重伤被截掉。”“这是您认为必须报告的唯一缺陷吗？”“对。”“我们原先那位参谋长连头脑都没有，还照样坚持工作。您不过就缺条腿，没什么了不起。”斯大林说。 162）问：什么长达两公里并且老吃白菜？案：莫斯科肉店前排的队。 163）列宁说：“共产主义=苏维埃+电气化”。所以：苏维埃=共产主义-电气化电气化=共产主义-苏维埃 164）据外电报道，前苏联克格勃最近公开了一份绝密文件。该文件称，Windows是克格勃精心炮制的软性核弹，在冷战时期企图用来摧毁美国的电子工业，拖垮全美经济。但出人意料的是，由于政府部门的官僚作风，误将Windows装进了前苏联的大多数计算机里，最终导致了前苏联的解体。曾潜伏在微软的克格勃程序员阿里山说：“我曾警告苏联政府，千万不能使用Windows，因为我在Windows的核心层中放置了逻辑炸弹，每当系统处理与国民经济有关的数据时，就会发生计算错误，使政府决策机构产生错误决策，使国民经济恶化。不幸的是，美国人却用了MacOS来计算国民经济数据，结果弄巧成拙，害了苏联。”上述新闻发布后，微软迅速在其网站上放置了修正这个错误的补丁程序。美国人却认为Windows功不可没，微软的股票当天涨了25％。 165）勃列日涅夫问罗马教皇：“为什么人们相信罗马天主教的天堂，而不相信共产主义的天堂？”“这是因为我们的天堂从来没有让别人看到。” 166）问：德国在马克思那里继承了什么？答：对于东德来说是《共产党宣言》，对于西德来说是资本主义。 167）列宁说：共产主义就是苏维埃加上全国的电气化。赫鲁晓夫说：共产主义就是苏维埃加上全国的玉米化。 168）列宁时代像是在隧道里，周围一片黑暗，只是在前面有光；在斯大林时代，象是在汽车里，一人领路，一半人在上坐着，另一半人在上颠簸；在赫鲁哓夫时代，就像在参观团里一样，一个人表演，其他人在笑；在勃列日涅夫时代，像看电影一样，大家都等着散场。 169）拉宾诺维奇被开除出党，原因有三个。甲：当政治局书记来到他的办公室的时候，那里还悬挂着赫鲁晓夫和勃列日涅夫的肖像： “你为什么你到现在还没有摘掉这个傻瓜？” “是哪一个？ ”乙：看到政治局委员豪华的葬礼，拉宾诺维奇说： “真是浪费钱财，用这些钱我能安葬所有的政治局委员。 ”丙：书记问：“为什么没有参加最后一次党的会议？” “我哪知道哪个是最后一次。 ” 170）问：听说要授予勃列日涅夫同志大元帅称号？答：真的。并且如果他要能读得出来那个词，还可以授予他人民艺术家的称号。 171）发行了勃列日涅夫图像的邮票，但总是粘不上，一些人吐沫的方向不对，另一些人舔的方向不对。 172）勃列日涅夫拿着发发言稿，开始发言。“犹太复国主义者同志们！”听众疑惑不解，勃列日涅夫于是又瞄了发言稿一眼：“犹太复国主义者！同志们，他们又在准备……” 173）问：为什么勃列日涅夫能出国，安德罗波夫却不能？答：因为前者安的是电池，后者接的是电线。 （勃列日涅夫用心脏起搏器，安德罗波夫用透析机） 174）勃列日涅夫问柯西金：“那个击败拿破仑的独眼俄国元帅叫什么来着？”“库图佐夫。”“那个独眼的英国海军上将呢？”“纳尔逊。”“这个独眼的犹太人叫什么？”“达扬。”“为什么我们的元帅格列奇科到现在还有两个眼睛？” 175）当尼克松访问苏联时，勃列日涅夫向他展示了一种最新式的可以通向地狱的电话，通话费是 27 戈比。回到美国后，尼克松讲了这件事。原来，美国的这种电话已经发明很长时间了。理查德先生于是和地狱通了一次电话。但这次能话的费用是一万二千美元！理查德先生失望地说：“怎么会这样，那里才 27 戈比。”人们向他解释说：“在那里是市话，从我们这里打是长途。” 176）美国人、英国人、和苏联人夸口，说能给猫吃下芥茉。美国人逮住猫，把芥茉塞到了猫嘴里。“这是暴力！”苏联人抗议道。英国人把芥茉放在两片香肠里，给猫吃下去。“这是欺骗！”苏联人抗议道。苏联人把芥茉抺在猫的尾巴上，猫敖敖叫着，用嘴去舔他的尾巴。“请注意，他是自愿的，并且唱着歌！” 177）访问苏联的尼克松问勃列日涅夫：“为什么苏联工人不罢工？”勃列日涅夫没有回答他，而是他带到了车间。他向工人们说道：“从明天开始，你们将会缩减工资！”（掌声）“将要提高工时！”（掌声）“每十个人就要吊死一个！”（掌声，有人问，是自己准备绳子还是由工会提供？） 178）在莫斯科，一个顾客走到书报摊前，问：“请问有没有‘真理’？”“我们这里没有‘真理’，只有‘消息’！”卖报纸的老太婆回答。 179）有人问负责食品供应工作的官员：“在完成食品发展计划以后，将如何组织对苏联人民的食品供应工作？”官员答道：“到那时对食品的供应工作将会又快，又准确，又高效。只要早上通过电话预订，晚上就会通过电视机供应到户！” 180）赫鲁晓夫与肯尼迪会晤时互赠礼品。肯尼迪说：“我决定赠您一枚小型原子弹，这是一枚真正的原子弹，要小心保管，一旦爆炸会产生毁灭性的后果！”“我把我的农业部长赠送给您。”赫鲁晓夫说。“对他您也得小心点，如果您要任用他，也会产生毁灭性的后果……” 181）在苏共20大上，赫鲁晓夫在做秘密报告前突然消失了。但是过了几分钟后他又回来了，并登上了主席台。人们问他：“赫鲁晓夫同志，您刚才去哪了？”“我去列宁墓里看了看，摸摸斯大林还有没有脉搏，以防万一。” 182）工人代表问赫鲁晓夫：“为什么您拒绝实行6小时工作制？”赫鲁晓夫答：“因为实行了6小时工作制后，你们就会有更多的时间来编讽刺我的笑话了。” 183）赫鲁晓夫赠给卡斯特罗一辆新轿车，但是没有方向盘。卡斯特罗发给赫鲁晓夫一封电报：“请把方向盘寄来，否则我无法启动这辆车。”赫鲁晓夫发电报答复说：“你只要坐上去，然后闭上眼睛就行了。我这里有遥控器。”（注：在古巴导弹危机中赫鲁晓夫完全将古巴当做了手中的棋子。） 184）赫鲁晓夫去集体农庄视察，一不小心掉到了青饲料储藏窖里。有个农民把他拖了上来。赫鲁晓夫对他说：“谢谢你，好兄弟。但是请不要对任何人说我掉到了窖里。”“尼基塔同志，也请您不要对任何人说是我把您从地窖里救了上来。” 185）有位经常讲笑话的人被捕了，并被押去见赫鲁晓夫，被捕者大喊：“我没有罪，我讲的笑话不过是说面包、香肠、家具……全都没有！”赫鲁晓夫生气地说：“不许你讲笑话扰乱社会秩序！谁说我们没有这些东西？很快都会有的！每个家庭都会有！”“赫鲁晓夫同志，您不许我讲笑话，可是您刚才怎么又讲笑话了？？” 186）“现在进行最后一项议题。”勃列日涅夫向会议代表宣布说，“我们已经研究过了，由于苏斯洛夫同志的健康原因，决定派他去休养。同志们，他的老年病恶化了。”“怎么发现的？”一位工人代表问。“这很简单。不久前我在走廊里遇到他并对他说：‘您好，苏斯洛夫同志。’他回答我说：‘您好，勃列日涅夫同志。’然后，他又说：‘但是，我不是苏斯洛夫，我是柯西金。’你们看，他连自己的名字都搞错了！” 187）苏斯洛夫去世了。亲朋好友都来参加悼念活动，医疗组的医生们也出席了。其中一位医生突然发现勃列日涅夫神情恍惚，不大正常，就对同伴们说：“我们要记住，现在患大脑动脉硬化症的人不少，这个病已经成为我们的主要敌人了。”“不对。”勃列日涅夫听到他们的议论后说，“现在我们的主要敌人不是大脑动脉硬化症，而是纪律涣散症。你们看，大家都等了半个多小时了，可是苏斯洛夫还没来！！” 188）在记者招待会上，有人问勃列日涅夫：“列昂尼德·伊里奇，这什么苏联缺乏肉制品？”“问题的原因在于，我们正在突飞猛进地奔向共产主义，而牲畜的生长却跟不上我们！”勃列日涅夫明确地回答。 189）昨天莫斯科发生了地震，但学者们对此表示怀疑，因为莫斯科处在非地震带上。最后经过研究，并非是地震，而是勃列日涅夫同志佩有勋章的衣服掉在了地上。 190）问：苏联农业面临的主要障碍是什么？答：主要的障碍有4个：春天、夏天、秋天和冬天。 191）“伊万，你喝半升酒以后还能工作吗？”“能！”“喝一升呢？”“也能！”“那么喝两升呢？”“喝两升就要醉了，虽然不能工作了，但是还能担任领导。” 192）克里姆林宫里，觥筹交错，酒池肉林，声色犬马，天昏地暗……约瑟夫·斯大林大帅点的菜有浇汁爱沙尼亚，五香波兰，油闷比萨拉比亚等等，大块朵颐之际嘴里突然传出“咯崩”一声，2颗门牙和一枚硬币掉到桌子上，只见硬币上刻有两个字——“芬兰”…… 193）“波兰人为什么怀念捷尔任斯基？”“因为他比其他任何波兰人杀的俄国人都多得多。”（注：捷尔任斯基系全俄肃清反革命和怠工分子委员会——简称肃反委员会/契卡——的第一位领导人，该组织后来演变为国家政治保安局-内务部-克格勃） 194）一个犹太人要办护照离开苏联定居以色列，民政官员问他理由。“一共有两个原因让他不得不离开苏联去定居以色列。”“哪两个？”“第一条是，昨晚我听邻居说，一旦苏维埃政权完了，他们马上会像纳粹一样对待我们。”“可我们的苏维埃政权永远不会完啊？”“对啊，这是第二条理由。” 195）某犹太人去办理签证离开苏联定居以色列，遇到民政官员，照样问理由。“你为什么要离开苏联定居以色列？难道因为你是犹太人？”“不是啊。我不想离开苏联，但我的妻子，丈母娘都要离开苏联。”“这样吧，我给她们办签证，让她们去以色列，你留在苏联吧。”“不行，只有我是犹太人，她们都不是。” 196）一个匪徒试图劫持苏联民航飞机去伦敦，结果在飞机上就被一个英勇的阿塞拜疆的农民当场制止。记者采访这个阿塞拜疆农民何以如此勇敢，结果农民小声说：——同志啊，我偷偷带了两箱卷心菜在飞机上，打算去莫斯科卖了，如果那混蛋带我们去伦敦，这两箱卷心菜就不值钱了。 197）38年的时候，某党员被清洗进了监狱。在牢房里，他发现有人在不断祷告上帝，感谢沙皇，一脸笑容。一打听，这位是某个隐藏了有年头的军官。他问这军官，为什么这么开心啊？“感谢上帝啊，沙皇万岁，现在的监狱里关了这么多布尔什维克和犹太人了！” 198）苏联的一个比喻，未必是笑话：人生好比过马路，前半段往左看，后半段往右看。苏联70年以后的中央委员大都60岁以上，后面的事情就可以知道了。 199）据说，苏联出生的婴儿非常容易得神经紊乱，后来调查发现，这是因为苏联婴儿早在娘胎里就开始为一些很重要的问题而担心。在娘胎的头三个月，他们担心他们的爸爸妈妈会不会把他们做掉。接下来三个月，他们又开始为他们的爸爸妈妈是不是会结婚而担心。最后几个月，他们又得考虑他们的外婆或者奶奶是否还健康——除了这二位，大概没人愿意照顾他们了。最后几个月，他们又得担心，妈妈是不是还记得爸爸到底是谁。 200）苏联计算机技术明显落后于当时最先进水平，特别是在集成电路方面，即使是芯片，由于一贯俄罗斯笨重的风格，变得特别大。于是，《真理报》只能这样报道：我国伟大的苏联制造出了世界上最大的芯片！ 201~250201）莫斯科大学毕业四十年的同学聚会，柳德米拉一眼就认出了当年热恋过的瓦西里。旁人都问，怎么会这么快就从一堆老头中认出自己当年的情人？“因为他还穿着当年的那件大衣！” 202）苏联一直采取鼓励生育的政策，可孩子还是越来越少。经过调查，终于有人发现原因了：——双人床的质量太差而伏特加的质量太好。 203）关于苏联的乐队：——对苏联而言，什么是一个乐队三重奏组合？——那是去西方的旅行演出的一个四重奏组合刚刚回来。 204）“捷尔任斯基爱孩子是真的吗？”“是的，他只悢他们的父母……” 205）毛泽东访苏，有人问艾思奇：“毛主席到莫斯科，斯大林为什么不去迎接？”艾说他也不知道，可以打听打听。第二天上课时，艾回答说：“斯大林去了，可是没接上。” 206）列宁和卢那察尔斯基去参观未来派的前卫艺术展览会。“我一点也不懂！”列宁说。“我一点也不懂。”卢那察尔斯基说。人们说，这是最后两个不懂艺术的苏联领导人。 207）某天在克里姆林宫的宴会，赫鲁晓夫直接用手抓肉就吃下去，旁边的斯大林看了以后皱了皱眉头， 告诉赫鲁晓夫：“尼基塔·谢尔盖耶维奇，用刀子吧。”赫鲁晓夫听到以后，马上拿了刀子就站起来——“斯大林同志，请问您要干掉谁？” 208）话说斯大林死后， 因为被赫鲁晓夫视为禁忌， 因此希望把斯大林的遗体葬在海外，于是苏联向各国征求意愿：英： 我们这边已经有丘吉尔，大战的英雄有一个就很够了。德： 我们这边已经有希特勒，独裁者有一个就太多了。这时， 以色列表明同意的意见。但是赫鲁晓夫马上脸色变青， 拼命反对——“靠！ 那里以前有人复活过啊！” 209）一个持不同政见者被捕，罪名是在红场上散发传单。法庭。法官问：克格勃公诉人，你指控被告散发发动传单，可在红场上散发的明明是空白纸张。克格勃公诉人：谁都知道那上面该写什么。 210）有一次赫鲁晓夫访问美国，他对艾森豪威尔说他看到许多美国人酗酒。艾森豪威尔对此感到吃惊，他并不认为美国的酗酒者比别的国家多。赫鲁晓夫坚持他的观点。于是，艾森豪威尔从办公桌抽屉里拿出一支手枪递给赫鲁晓夫说：“如果您遇到酗酒的醉鬼，我允许您向他开枪。”赫鲁晓夫把手枪装在口袋里，来到了纽约。他在苏联驻联合国使馆过夜，第二天早晨在纽约市到处溜达。他在帕克路和八号街口碰到一个醉鬼，他向这个醉鬼开了一枪。然后，在麦迪逊路和八十二号街口向另一个醉鬼开了第二枪。到列克星顿路和八十四号街口又向第三个醉鬼开了枪。第二天，纽约各报都在头版用大标题刊登消息：“三个苏联外交官神秘地遭到暗杀。” 211）一个美国人和一个苏联人被判下地狱。恶魔告诉他们：“你们有两个选择：美国式和苏联式的地狱。在美国式的地狱中，你们什么都可以做，但是每天早上必须吃一桶屎。而在苏联式的地狱中，也可以想干什么就干什么，不过每天早上得吃两桶屎。”美国佬马上选了美国式的地狱。而苏联人则最终选择了自己的祖国。一周后他们又相遇了，苏联人问：“你那如何？”美国人回答：“确实如恶魔说的那样。我的地狱还不错。就是每天一桶屎简直要我命。你那呢？”“差不多和你那一样，不过吃不到屎，你知道的，苏联什么都短缺。” 212）美苏两个国家意见一致时，没有联合国可以干的事；两个国家不一致时，联合国干不了什么事…… 213）中苏开战，第一天苏联俘虏了500万中国人，第二天苏联俘虏了500万中国人，第三天苏联俘虏了500万中国人，第四天苏联投降了。 214）一天，在莫斯科的一个公墓里，有两个人在交谈着……“你今天怎么愁眉苦脸的？”“昨天一辆班车出了车祸，车上无人幸免。”“哦，那是挺惨的，让我们一起为他们哀悼吧！”“不，我才不是为这个难过呢！”“那你……”“那辆班车是克格勃的。”“哦？那你还难过什么？”“车上有3个座位是空的。” 215）问：为什么在共产国际上没有新几内亚的代表？答：没有找到愿意往自己的鼻子上穿孔套圏的犹太人。 216）问：为什么俄罗斯联邦共和国称为 РСФСР？答：因为斯大林和托洛茨基的做法通常都是相反的，这样称呼他们俩都能一样读出来了。 217）“唉！这些犹太人，为自己设计的是犹太复国主义，为别人设计的却是马克思主义！” 218）新的公共汽车规则：违反一次，穿一个孔；违反两次，穿二个孔；要是三次的话，民族一栏改成犹太人。 219）既然 BBC 有那样专业的素养，知道苏联的所有秘密，政治局决定再开会的时候，成员不许离开。可能有一次柯西金突然捂往的肚子，请求充许方便一下，但是人们不他走，过了几分钟，有人敲门，卫生员拿着桶进来了：“刚刚听 BBC 说阿列克谢·尼古拉耶维奇出丑了！” 220）我们知道世界的新闻——从塔斯社的反驳和辟谣中。（注：塔斯社系苏/俄官方通讯社） 221）问：拉宾诺维奇，你喜欢苏联的国歌吗？答：是的，就是没有词。 222）问：要是在列宁格勒发生了象塔什干那样的地震，会发生什么情况？答：那可能就会只剩下彼得堡了！ 223）赫鲁晓夫把自己新出品的香肠送到国外去分析，不久就得到了结果：“赫鲁晓夫先生，在你的粪便里没有任何寄生虫。” 224）在会议上，农庄主席在历数苏维埃政权给了普通人多少实惠：“你们看玛丽亚·彼得洛夫娜，她原来是一个普通的农民，现在却管理一个俱乐部；你们看别拉捷娅·费道洛夫娜，原来也是一个普通的农民，现在管理一个图书馆；你看斯捷潘·米特拉发内奇，原来是一个十足的傻子，现在却是党组织的书记。” 225）问：在苏联有穷人吗？答：有啊。他们自己没有任何东西。住宅是国家的，别墅是国家的，汽车也是国家的。 226）通过卫星发射到太空的狗这一事实科学地证明了，任何母狗都能升到不可思议的高度。 （注：母狗在俄语是骂人话：狗东西） 227）恰巴耶夫报考军事学院。“瓦西里·伊万诺维奇，所有科目都通过了？”“不，不是所有的，血液通过了，尿也通过了，可是数学不行。” 228）问：什么是正派人？答：就是为了小便宜不做过分卑鄙的勾当的人。 229）农庄主席叫来了挤奶员：“今天接到电话，说明天新闻中心要来人采访你。”“采访什么？”“具体情况不清楚，但在任何情况下你都要把脸洗洗。”（注：脸上都是偷喝的牛奶） 230）幼儿园的阿姨对孩子们说：“在苏联，每个人都吃得饱饱的，还能有漂亮的衣服；在苏联，人们生活在漂亮的住宅里；在苏联，所有的孩子都有许多玩具…… ”“我要！我要！我要去苏联！” 231）两个肠道寄生虫爬了出来：“妈妈，那个大的，发光的东西是什么？”“儿子，这是太阳。”“妈妈，那波浪翻卷，闪着光的东西是什么？”“儿子，是大海。”“那绿色，散发着香味的地方是什么？”“是森林，儿子。”“有那么多好地方，我们为什么生活在屁股里？”“孩子，那是我们的祖国啊！” 232）在被遣送回亚美尼亚前，亚美尼亚人对留在西方的同伴商定，为了提防当局的书信检察，要是在苏联情况不好，我就用绿色的墨水给你写信。后来，很快就来信了，但是是用通常的墨水写的，上面说：一切都非常好，我有了自己的住宅，找到了很好的工作，什么都有，如果说有什么不足的话，那也微不足道，比如说，我们这里很难弄到绿墨水。 233）在被遣送回亚美尼亚前，一家人和留在西方的朋友商定，为了提防当局的书信检察，要是一切都好的话，他就会给他们寄来照片，上面的人都是站着的，要是不好的话，就都坐着。不久，这家人真的来照片了，上面的人都是躺着的。 234）“你为什么要去以色列？”“我太烦了，什么事都有假日，香肠有假日，手纸也有假日。”（注：假日即无货不卖） 235）勃列日涅夫上班时，他的秘书对他说：“列昂尼德·伊里奇，您的皮鞋一只是棕色的，一只是红色的。”勃列日涅夫：“这有什么好奇怪的，我们家里还有一双这样的。” 236）一个真正的共产党员死了。由于他是无神论者却又十分诚实，他被判每隔一年就在地狱和天堂间轮转。第一年他呆在地狱，一年后撒旦对上帝说：“你快把他带走吧。我得恢复秩序。他快把地狱里的小鬼们都发展成少先队啦。”又一年过去了，撒旦找到上帝说：“上帝啊，又轮到他到我那去了。”上帝回答道：“首先，不要叫我上帝，你应该称呼我同志。其次，世界上没有上帝。最后，别耽搁我的工夫，我正赶着去参加党代会。” 237）斯大林死后，在天堂受到上帝的欢迎。赫鲁晓夫去见上帝时，上帝却在位子上一动不动，赫鲁晓夫找了把椅子坐在上帝对面，问：“你为什么不起来迎接我？”上帝说：“我一离开位子，你就要抢去了。” 238）肃反高潮阶段某晚斯大林和几位政治局委员在后花园休息，为哪颗是天狼星争论起来。有人建议给天文台打电话问问清楚，不料经过大清洗，天文台只剩下了内务部派去的值班军官。于是那军官赶忙去一位被软禁的老专家的家中咨询。老专家半夜见到内务部的车子出现，惊恐万状，当场自杀…… 239）一个美国代表团要访问一个苏联的工厂，当局就预先教工人要怎样回答代表团的提问。代表团来后问一个老工人你每月的工资是多少，老工人回答有3000卢布；代表团又问他有多少存款，他回答有10万卢布；代表团问：你存了这么多钱准备干什么呢？老工人回答说：“我准备买一双靴子。” 240）1937年苏联当局征求诗人普希金的逝世百年纪念铜像设计，佳作有以下三件：站在高加索山上眺望远方的普希金；决斗时被子弹击中即将倒下的普希金；艺术女神替普希金戴上月桂冠。但是，优胜作品是——正在阅读普希金作品的斯大林同志。 241）勃列日涅夫不懂足球。有人送给他一个足球，他说：“谢谢您的勋章。但它看起来很像赫鲁晓夫。” 242）一个童年好友来列昂尼德·勃列日涅夫同志家做客。见到列昂尼德同志愁眉苦脸，就问他为什么。列昂尼德同志说：唉，治理国家怎么就这么难，现在有三个困扰我的难题没有解决办法呀。他的童年好友问：哪三个问题呀？列昂尼德同志：就是住房问题，酗酒问题和信仰问题。建了那么多新住宅楼，可还是不够用，总有人没房子住。酒价已经上调了无数次，可酗酒者却不见少。十月革命都这么多年了，可还是有人不信共产主义而顽固地信上帝，你说可怎么办！朋友哈哈大笑：这有什么难的，你去索契疗养一个月，把这些问题交给我解决吧！列昂尼德同志将信将疑地照着朋友的话做了，自己去度假了。一个月后列昂尼德同志回来，为了看看朋友到底做到了没有，还没回克里姆林宫，就先到街上了解情况。在饭店里发现这样的招贴：“本人有两居室公寓一套欲免费赠送”，可是好象根本没人在意，列昂尼德同志开始高兴了：这家伙还真有两下子。于是他又去商店，发现酒柜台的售货员在睡觉，成堆的酒在柜台里都挂了蜘蛛网也没人买。列昂尼德同志兴奋异常：厉害啊！这也办到了！最后在回克里姆林宫的路上，经过一个教堂。列昂尼德同志发现，一个老太太打开教堂的门，朝里瞅了一眼，吐了口唾沫就走了。列昂尼德同志心想：我这个老朋友简直太不简单了！一定要重用才好。回到克里姆林宫，列昂尼德同志兴高采烈地握着老朋友的手问他是怎么做到的，朋友告诉列昂尼德同志：“这很简单啊！住房问题是这么解决的：我取消了出国的限制，谁想出国马上就可以拿到护照，结果80％的人都跑到国外去了，剩下了一大堆空房子。关于酒么，我和你做得正相反，我把酒的价格降到1戈比，酒鬼们都疯狂买酒喝酒，结果都醉死了就没人买了。至于信仰么，那更简单了，我把教堂里的神像都送到博物馆了，把你的画像挂在了教堂。” 243）有一天尼基塔同志给埃及安瓦尔（萨达特）先生打电话，等到安瓦尔先生的秘书接了之后，赫鲁晓夫说：“请找一下安瓦尔先生的遗孀。”秘书莫名其妙于是就把电话给了萨达特夫人，夫人接电话之后，尼基塔同志说：“尊敬的夫人，我对安瓦尔先生的不幸去世深感悲痛。”夫人说：“我不知道您在说什么，我丈夫并没有死呀！”此时，电话那头就听到尼基塔同志对谢列平怒吼：“行动计划怎么推迟了！” 244）苏联反犹主义者：“外国报纸全都是犹太人办的！”苏联犹太人：“没错！所以外国报纸寄到这里时都给施了割礼。”（注：指报纸内容被检查当局删减过。） 245）列车员叫醒一个靠着窗口睡着了的旅客：“同志，你的票？”“票？什么票？我没有票！”“没票？那你打算去哪里？”“我什么地方也不想去！”“那你为什么上这列火车？”“上车前，克格勃的同志们刚在大庭广众之下逮捕了一名间谍，大家都在看热闹，我也在看，后来其中一个领头的同志对着我叫到：‘没什么好看的，快上车坐好！’于是我只好走进车厢…… 246）斯大林钓鱼，可一直未见一条鱼上钩。他见别人频频得手，脸面上有些挂不住。贝利亚同志为他开脱道：“这里的鱼都是托洛茨基养的。”斯大林不知何意，问：“何以见得？”苏斯洛夫答道：“如果不是托洛茨基的鱼，为什么还怕您接见呢？” 247）一个盲人在路上遇到了贝利亚同志。“您好，贝利亚同志！”盲人抢先打招呼。“怎么，您看得见我？”贝利亚很纳闷。“不，贝利亚同志，那是因为给我引路的狗直往后退的缘故。” 248）一位克格勃新人到审讯室实习，审讯一件谋杀案。他指着凶器问嫌疑人：“你见过这把刀吗？”实习生反复向嫌疑人交待了政策，可嫌疑人仍然矢口否认。审讯结束后，实习生回忆这次审讯，觉得自己态度不够严厉，缺乏威慑力量。于是，第二天审讯时，他紧皱双眉，圆睁双目，拍着桌子厉声问道：“说！见过这把刀吗？”“见过。”嫌疑人低声回答。实习生认为自己的威慑力发挥了作用，他又拍了一下桌子，问道：“说！什么时间？什么地点？”“昨天，这里。”嫌疑人哆哆嗦嗦地答道。 249）在苏联，一个人在职工大会上演讲。他卖力地讲苏联人民多么的富有……这时拉宾诺维奇举起了手说：“我们的肉都到哪去了？”第二天，那个人又来演讲。海默维奇举手问，“我不想知道肉到哪里去了，我只想知道拉宾诺维奇到哪里去了？” 250）苏联外交格拉尔德·福特，吉斯卡尔·德·爱斯坦丁，哈罗德·威尔逊和列昂尼德·勃列日涅夫去打猎。他们决定打破传统——他们将前往印度猎大象。那么，他们这样做了，非常的第一天，夜幕降临，他们抓到了一头大象。现在，他们用它做什么呢？他们决定：把大象绑在树上并轮流护卫它。首先是福特总统。他守了两个小时，然后交给吉斯卡尔，接着睡觉。吉斯卡尔也守了两个小时，然后交给威尔逊，接着睡觉。威尔逊站了两个小时，然后勃列日涅夫，接着睡觉。但是勃列日涅夫睡着了。在早上，他们醒来时，大象没了。“那里的大象呢？”他们问勃列日涅夫。“什么大象？”“你是什么意思‘什么大象呢’？其他的人愤慨地说。我们不是来印度猎大象吗？”“是的。”“我们不是抓住了一头大象吗？”“是的。”“我们把它绑在了树上吧？”“是的。”“我们同意采取轮流守卫它吧？”“是的。”“当时福特站的岗，对吧？”“是的。”“他把大象给吉斯卡尔了，对吧？”“是的。”“然后吉斯卡尔站的岗，对吧？”“是的。”“他把大象给威尔逊了，对吧？”“是的。”“然后威尔逊站的岗，对吧？”“是的。”“他把大象给你了，对吧？”“是的。”“那么，大象在哪？”“什么大象？”（注：苏联外交就是装傻） 251~300251）拉宾诺维奇出差，要到三个城市去，它们是：华沙，布拉格，还有巴黎。到了华沙，他发给单位一封电报，写着：“自由的华沙万岁！拉宾诺维奇。”到了布拉格，他发给单位一封电报，写着：“自由的布拉格万岁！拉宾诺维奇。”到了巴黎，他又发给单位一封电报，写着：“巴黎万岁！自由的拉宾诺维奇。” 252）赫鲁晓夫访问一所学校。他问一名学生：“你的父亲是谁？”他回答说：“是共产主义！”赫鲁晓夫很满意，他又问：“你的母亲是谁？”他回答说：“是苏联！”赫鲁晓夫又问：“你长大了想当什么？”学生说：“孤儿。” 253）列宁死了。电台发布了讣告。电台广播：“尽管我们伟大的领袖列宁同志去世了，但是列宁主义却永远活着！”老百姓听了都嘀咕说：让列宁活着，让列宁主义去死吧。 254）赫鲁晓夫访问某集体农庄，谈到了乳品产量的问题。赫鲁晓夫问道：“能不能上交更多的乳品，并且每年都确保增产，比如，百分之五？”集体农庄主席回答：“可以！赫鲁晓夫同志！”赫鲁晓夫很是高兴，继续问道：“百分之十呢？”“可以！赫鲁晓夫同志！”“百分之二十？”“可以！”“百分之五十？”“可以!”“百分之七十？”“不可以！”“为什么？”“那样就只有水啦！” 255）克格勃工作人员来到赫鲁晓夫的别墅，向赫鲁晓夫汇报市面上流传的讽刺他的笑话。在去别墅的路上工作人员对赫鲁晓夫精心照料的花园很是欣赏，于是开头就说：“尼基塔·谢尔盖耶维奇，您生活的很好！”“嗯，”赫鲁晓夫答道，“很快所有的苏联人都将这样生活。”“请问，”克格勃工作人员惊讶地问道，“那么我们中谁来讲笑话呢？是您还是我？” 256）赫鲁晓夫，苏斯洛夫，米高扬三人乘坐飞机在莫斯科上空游览视察。赫鲁晓夫看到有许多人正在排队争买面包，便说：“这时候如果我从飞机上投下大批面包和奶油，人们一定会拥护我。”苏斯洛夫看到有不少人在争购美国书报刊物，然后说：“这时候如果我从飞机上投下大量美国书报刊物，人们一定也会拥护我。”米高扬看到有许多人在排队争买猪肉时，就说：“我要是这时能从飞机上投下‘米高扬肉类加工厂’的大量肉食品和香肠的话，人们一定更会拥护我。”然后三个人相窥而笑。这时听到他们议论的飞行员忍不住“嗤”的一下发出声来。赫鲁晓夫便问道：“飞行员同志，你在笑什么？”飞行员说：“我是在想……”“你想什么？”赫鲁晓夫急切地问。飞行员说：“我是想……我不敢讲。”赫鲁晓夫，苏斯洛夫，米高扬三人很想知道飞行员的想法，便异口同声地说：“不碍事，你怎么想就怎么讲！你大胆讲，我们保证你这次讲什么都不问罪！”这时驾驶员才慷慨说道：“我是在想，如果这时我把你们三个人一起从飞机上扔下去，人民一定会拥护的是我！” 257）原来一直扮演斯大林的功勋演员，提着一个大皮箱去找赫鲁晓夫，说：“你把斯大林批臭了，我只好失业了。”演员走后，把皮包留在赫鲁晓夫办公室里．赫鲁晓夫好奇地打开一看，原来是扮演斯大林穿的大元帅服。他想，当年斯大林身着大元帅服好不威风啊，而且在人民中享有很高的威望，赫鲁晓夫就试着穿上元帅服，对着穿衣镜正上下打量。这时，米高扬轻轻推门进了赫鲁晓夫办公室，猛地一看，连忙跪倒在地求饶道：“斯大林同志，一切都不能怪我，全是赫鲁晓夫那家伙搞的鬼！”赫鲁晓夫一转身，打了米高扬两记耳光，骂道：“睁大你的狗眼仔细看看我是谁？！” 258）一个美国人和一个苏联人互相吹牛，夸耀自己的国家。美国人说道：“我的国家实在自由。你可以径直走进白宫，对总统说：‘总统先生，我不同意你的现行对内政策！’”苏联人便答道：“嘿，这有什么！我的国家也很自由！你可以径直走进克里姆林宫，对总书记说：‘总书记同志，我不同意美国总统的现行对内政策！’” 259）在调查表上有这样一个问题：在执行总路线时你动摇过吗？拉宾诺维奇回答道：“我和总路线一起动摇。” 260）“同志，你对这个问题有什么意见吗？”党支书问道。“对，我是有意见，但我不同意我的意见！” 261）一个美国人和一个苏联人谈话.美国人:“我敢在白宫外面大喊,里根下台,你敢吗？”苏联人:“有什么不敢的？ ”说完，苏联人走到克里姆林宫外大喊：“里根下台！” 262）拉宾诺维奇到资本主义国家出差，在那里，他给单位拍了一个电报：“我选择了自由。”这事发生后，单位马上召集了党代会谴责拉宾诺维奇，并要做出组织结论。在会议中间，拉宾诺维奇突然走进了会场！全场哑然。拉宾诺维奇说道：“我非常感兴趣，你们是怎样理解自由的。” 263）美国百万富翁买下苏联国家百货商场，并宣布要免费分发商品。很快百货商店和通向这里的道路就开始堵塞，并有许多由于拥挤而死伤的人。人们问百万富翁：“你为什么要这样做？ ”“我非常感兴趣，当你们实行按需分配时会是什么样子。” 264）问：为什么共产党员不能接受圣经？答：根据圣经，先有混乱，然后根据上帝的计划引入秩序。共产主义的经验告诉我们，先有秩序，然后混乱就会到来。 265）如果你是外交官，你可以一直在国外；如果你是科学家，你可以每年出一次国；（学界年会）如果你是运动员，你可以四年出一次国； （奥运会）如果你是军人，你要12年才能出一次国。（44年卫国战争反攻，56年波匈事件，68年布拉格之春，79年阿富汗） 266）问：什么时候共产主义能到来？答：这件事将会在中央委员会全会的密信中宣布。 267）问：怎么才能知道共产主义已经到来？答：将在广播和报纸上宣布。如果那时还剩电视的话，还会通过电视宣布。 268）问：听说在 1980年在苏联会建成共产主义，这是真的吗？答：不，现在换成举办奥林匹克运动会。 269）考古学家在挖掘一个石器时代的山洞，在入口处有一标语：万岁，奴隶制度，全人类的光明未来。 270）一个老布尔什维克对另一个说：“咱们活不到共产主义了，而孩子们……唉，他们真可怜。” 271）请问，这就是共产主义，还是会更差劲。 272）在共产主义的全盛时代，在食品店的门口贴着一个通知：今天没有需要食油的。（注：按【需】分配……） 273）问：听说在共产主义社会食品可通过电话订购，这是真的吗？答：但是发放的时候要通过电视机。 274）在苏兹达尔的考古发掘中发现了人们从来不知道的圣经的篇章：世界末日可以在单独的国家到来。 275）一个乌克兰人被叫到克格勃。问：请你解释一下，你为什么经常有从以色列来的邮件？答：在战争时期，我曾藏匿过一个犹太人。问：你做为一个苏联的乌克兰人，怎么能收这些犹太佬的邮包！你也不为自己的将来着想。答：是，我想过，以后我还要藏中国人。 276）著名的俄罗斯歌唱家维尔京斯基，还是在沙皇时代离开俄罗斯的，这次，他又返回了俄罗斯，他带着两个手提箱从车箱里走出来，他放下皮箱，亲吻着大地，看着周围的人：“俄罗斯啊，我都不认识你了！”后来，他一看，皮箱不见了。“俄罗斯哪，我认出你来了！” 277）问：无价的东西可以买吗？答：不可以，但是可以偷。 288）问：在苏联有专门的小偷吗？答：没有，人们都是自己偷。 289）问：什么国家最富？答：苏联。它已经被偷了五十多年了，但还没有被偷光。 290）问：共产主义社会里有偷窍行为吗？答：没有，我们只是在社会主义社会里偷。 291）问：为什么在有苏联侨民的西方商店里会经常发生偷窃行为？答；这是因为他们的意识里有共产主义的残余。 292）捷克人先是建造一个东西，剩下的偷光；而苏联人先是偷得差不多了，余下的用来建造。 293）苏联知识分子有五个规则：1、什么都别去思考；2、如果你一定要思考，不要说出来；3、如果你又要思考又要说，那就别写出来；4、如果你又思考又说还写，那么别签名；5、如果以上规则你都不遵守，那你就别感到吃惊。 294）苏联一个桥梁专家访问罗马尼亚时被邀到自己罗马尼亚的同事家做客。客人夸奖主人的别墅非常豪华。主人把客人带到窗前：“你见到了那座桥了吗？”苏联桥梁专家：“看见了。”罗马尼亚工程师：“这就是原因所在！为了建造这座桥我节省了一些钱。”过了一年，罗马尼亚工程师回访，他夸奖主人的别墅非常豪华。主人把客人带到窗前：“你见到有桥了吗？”罗马尼亚工程师：“没见到。”苏联桥梁专家：“这你就能明白是怎么一回事了。” 295）一个妇女在一个几家人合住的住宅的公用浴室里洗澡，而邻居站在走廊的一个小凳上通过门上的玻璃往里看。这个妇女发现后说道：“看什么！没见过啊！”邻居：“我得看看，你是在用谁的肥皂！” 296）在合用住宅里住着一个不爱说话的中国人。邻居们用各种方法捉弄他：把灰尘扫到他的门里，在走廊的晾衣架上把他的扣子揪下来，把死老鼠往他的锅里放。最后，他们玩腻了这种捉弄人的游戏，向他承认了所做做为，并答应不再做这些事。这个中国人说：“非常好，我也不再往你们的茶里小便了。” 297）问：在党的十二大上，关于住房问题有什么决议吗？答：增加列宁同志的住房面积。 298）问：能光屁股坐在刺猬身上吗？答：可以，但只是在三种情况下：刺猬的刺被剃掉、是别人的屁股或者是党命令那样做。 299）上帝赐给人三种品质：忠诚、聪明、党性，但是任何一个人不会两种。因为人如果是聪明和真诚的，他就没有党性；如果他是忠诚和有党性的，他就不是聪明的；如果一个人聪明和有党性，那他就不是真诚的。 300）问：可以用收取的贿赂交党费吗？答：如果你是一个真正的共产党员，那就可以。 301~350301）拉宾诺维奇在战斗开始前声明：如果我死了，就追认我有党员吧！如果没死，就不用了。 302）问：犹太人要入党要有什么条件？答：两个阿拉伯人的推荐。 303）一个外国人在拥挤的公共汽车上问：“在车上和我们在一起的都是什么人？”答：“他们是国家的主人。 ”“而这是什么人开到前面去了？”他指着超过他们的“伏尔加”问道。答：“这是人民的仆人。 ” 304）问：听说苏联进军捷克斯洛伐克后，就会实现共产主义？是真的吗？答：是的，电气化在那里已经实现很多年了。 305）卡尔·马克思想在苏联发表广播演说。勃列日涅夫对他说：“虽然您是人道主义的奠基人，但是我一个人不敢决定那么重大的问题。我们是集体领导。”马克思说：“我只想说一句话！”最后，勃列日涅夫只允许说一句话，并且要他自己负责。马克思凑近话筒，大声说道：“全世界的无产者，请原谅我！” 306）问：为什么列宁穿皮鞋，斯大林穿靴子？答：列宁时代俄罗斯只脏到脚脖子。 307）在斯大林格勒更名为伏尔加格勒后，从另一个世界来了一封电报：“同意。约瑟夫·伏尔加。” 308）问：为什么安德罗波夫，而后是契尔年科在党代会上被一致推选？答：这是因为安德罗波夫的肾检验结果最差，契尔年科的心电图最差。 309）一个公民来参加契尔年科的葬礼。有人向他要票，他答道：到这里来我用的是联票。 310）问：什么事赫鲁哓夫打算做而来不及做？答：嘉奖尼古拉二世，是他在俄罗斯创造了引发革命的条件。 311）问：大家都知道，在赫鲁哓夫下台后的头一个十月革命节，人们把阿弗洛尔号巡洋舰沿运河运到莫斯科，这是为了什么？答：向临时政府射击。 312）在列宁格勒正在拍摄关于十月革命的电影。布尔什维克正在进攻，军人在射击。看热闹的人群中有人喊道：“亲爱的，坚持到最后！” 313）一个年老的女演员想早一点获得国家演员的称号，人们就建议她入党。在入党仪式上人们问她怎么看共产主义。女演员说：所有东西都是充足的，不论是食品还是商品，还允许出国，总之，像在沙皇时代一样。 314）在五一节的游行上，拉宾诺维奇举着这样一个牌子走过会场：感谢你，斯大林同志，是你给了我幸福的童年。党代表找到他：“你在侮辱我们的常识吗？谁都知道当你在童年的时候我们的斯大林同志还没出生呢！”拉宾诺维奇答道：“这就是我感谢他的原因。” 315）一艘航行在大海上的轮船快要沉了，船长叫乘客赶紧跳海，但他喊了半天没有一个人跳，一个社会学家说我来喊，他去喊过之后所有的人都跳下海去了。船长觉得奇怪，问他是怎么喊的，社会学家回答说：我对法国人说这样跳下去很浪漫，我对西班牙人说这样跳下去很潇洒，我对英国人说这样跳下去是一种体育运动，我对美国人说这样跳下去有利可图，我对苏联人说这样跳下去是革命行动。 316）苏共党员2万的时候 十月革命成功了；200万的时候 二战胜利了；2000万的时候 苏联解体了。 317）苏斯洛夫同志和谢列平同志吵得面红耳赤，没有注意赫鲁晓夫同志就在旁边。苏斯洛夫同志说：你是个大白痴！谢列平同志说：我这辈子从没见过像你这么蠢的猪！这时候赫鲁晓夫同志插口劝阻：两位同志请注意。你们忘了我在这里。 318）米哈伊尔同志访美，罗纳德先生邀其享用米国最新科技成果：全自动超舒适马桶。用毕，米哈伊尔同志从心底赞叹，暗下决心：我国也要研制。回国后，一个攻关部门成立了，进展顺利。可是，罗纳德先生突然访苏，米哈伊尔同志措手不及，召开紧急会议，给攻关部门立下军令状：三天后必需制出。三天后，报曰：可也。米哈伊尔同志遂与罗纳德先生会谈，久久不见罗纳德先生有便意，左右加巴豆于咖啡被里根饮，终于，罗纳德先生如厕。罗纳德先生端座马桶之上，事毕，感到的确舒适如意，心想，苏联的确利害，这么短时间就研制出这幺舒适的马桶。不行，我得好好研究一下，为我国的发展提供第一手资料。于是，罗纳德先生又一次掀开马桶盖，扭了一下按钮，只见，马桶下伸出一只手，将罗纳德先生的脸仔仔细细地抹了一遍。 319）尼基塔同志来华盛顿拜访约翰先生，约翰先生在白宫殷勤款待，席间，厨房上了一道烤香肠，尼基塔同志吃了以后对其美味赞不绝口，约翰先生对尼基塔同志夸口说：“在我们美利坚农场，生产美味的香肠已经达到了完全自动化水平，你只要赶一头猪到香肠制造机的入口里去，过不多久机器的那一头就会自动出来一串一串的香肠……”尼基塔同志边嚼着香肠边连连点头，约翰先生十分得意。这时，坐在一旁的杰奎琳由于嫌香肠油脂多，吃了一点就吩咐把她的那份撤了。尼基塔同志问约翰先生：“撤下去的香肠你们怎么办？”约翰先生答道：“当垃圾倒掉呗！”尼基塔同志摇了摇头，说：“在我们那里，吃剩的香肠只要往我们的香肠制造机出口扔进去，机器的那一头过不了多久就会跑出一头猪来……” 320）在一位老专家的葬礼上，他生前的两位同事低声交谈着。“伊万教授身体好好的怎么会突然就……”“听说是自杀。”“为什么？”“那是因为一天晚上，斯大林同志好像要找他研究什么问题来着。”“那也不至于自杀啊”“关键是斯大林同志是叫贝利亚同志派车去接的。”“那更不至于了！”“问题是一开始贝利亚同志派了一辆克里姆林宫的专车去接的，没想到开到半路上车抛锚了，再派又来不及，于是贝利亚同志叫他的部下就近从内务部派了一辆专车去了……” 321）法官：“你竟敢在大白天闯入人家行窃！”被告：“您前次审判我时，也是这么气愤地说：‘你竟敢在深更半夜潜入民宅行窃！’请问法官，我该什么时候工作合适呢？” 322）尼基塔同志看民主德国因盛产啤酒而每年赚进大笔外汇，决定仿效，开始派人研究制造啤酒的技术。第一批啤酒制造出来后，尼基塔同志送了一些样品给民主德国鉴定品质。一个月后，民主德国的乌布利希回函给尼基塔：“恭喜，尼基塔同志，贵国的马很健康！” 323）一位克格勃官员面授打字员给另一克格勃官员写封信。“信的开头怎样写？”打字员问，“是尊敬的先生吗？”“尊敬的？可他是一个十足的滑头和屠夫，不能这样称呼。要么就称亲爱的同行吧！” 324）在一列火车上，同一车厢里坐着列昂尼德同志，菲德尔（·卡斯特罗）先生，理查德先生和他的美国律师。途中，列昂尼德同志取出一瓶伏特加酒，逐个给大家斟酒，然后将剩下的半瓶往窗外一甩。“你这样不太浪费了吗？”理查德先生惊奇地问。“苏联有的是伏特加，”列昂尼德同志非常骄傲地说，“我们根本喝不完。”过了一会，菲德尔先生拿出几根哈瓦那雪茄分给同伴，他自己也点燃了一根，可没吸几口就把它扔出了窗外。理查德先生又奇怪地问：“我想古巴的经济并不怎么景气，为何这么好的雪茄就给扔了呢？”菲德尔先生满不在乎地说：“在古巴，我们有的是雪茄，怎么也抽不完。”理查德先生沉默了一会儿，突然站起来，抱起身边的律师，硬把他塞出了窗外…… 325）一次军事演习正在进行，一位指挥官的吉普车陷进了泥里。他看见附近几个士兵正懒洋洋地坐在地上。便叫他们来帮忙。“很抱歉，指挥官同志，我们已经阵亡了，什么也不能干。”指挥官转向他们的司机：“司机同志！赶快从这些死尸里拖两具出来填到轮子底下，好让我们快点上路。”士兵们马上从地上跳了起来。 326）“我那在部队的儿子由于干活太卖力气，反被关了8天禁闭。”“那是怎么回事呢？”“那天，头儿要他去挖战壕，他便拼命干起来，直到把那个坑挖得老深。他希望能得到头儿的赞赏，谁知头儿看后斥责他贪生怕死。” 327）作家应征入伍，列队开始编班。班长问：“你念过书吗？”作家立刻骄傲而自负地说：“念过。我念过中学，而且在大学取得3个学位，还有写作……”班长望他一眼，点点头，手中高举一块橡皮印章在他名下盖了：“识字”。 328）斯塔西审问一个经常去做礼拜的教徒：“你是否承认，你经常去教堂？”“是的。”“你是否还承认，你亲吻了钉在十字架上的耶稣的脚？”“是的。”“你也会亲吻我们昂内克同志的脚吗？”“当然，只要他也钉死在那里!” 329）昂内克死后敲开彼得的大门，后者看着他问到：“你是不是走错了？到地狱去！”半年后，两个小鬼敲开彼得的门。彼得：“你们不属于这里！”他们回答说：“不，我们是第一批难民！” 330）一架东德国内航班的飞机被劫持到科隆－波恩机场。 飞机在跑道上被西德GSG9特种反恐部队监控起来。东德中央委员会开了两个小时会议，研究该如何应对。最后得出了一个决定，问一下劫持者，到底有什么要求。劫持者是一个父亲，育有两个孩子，他提了三个要求：·他想要预订的卫星牌汽车能够最终交货，为此他已经等了14年；·他想给他的家庭要一个三居室的房子；·他想要今年去波罗的海度假。谈判人员向中央委员会汇报了上述愿望。委员们又了几个小时的会议，讨论是否应该屈服他的要求。米尔克（注：斯塔西头目）警告说，鉴于有人会效仿，最好不要让步。然后有人建议，最好先弄清楚，如果不满足劫匪的要求的话，他会用什么来威胁他们。谈判人员又被送回科隆－波恩机场。劫匪响亮地回答说：“那么我每个小时就释放两名人质……” 331）如果撒哈拉变成社会主义会发生什么？第一个十年没有什么变化，但是此后沙子会逐渐短缺。 332）埃里克·昂内克在卡尔·马克思市视察一个幼儿园。孩子事先情绪高地做了准备。现在埃里克问小汉斯：“好，我的小家伙，谁是你的爸爸？”“你，埃里克叔叔！”埃里克很高兴，又接着问：“现在你告诉我，那么谁是你的妈妈呢？”“德意志民主共和国，埃里克叔叔！”埃里克听了又很开心，于是继续问：“那你想成为什么样的人呢，我的小家伙？”“我想变成孤儿，埃里克叔叔！” 333）昂内克早晨站在阳台上：“早上好，亲爱的太阳！”太阳回答说：“早上好，昂内克同志!”昂内克中午站在阳台上：“中午好，亲爱的太阳！”太阳回答说：“中午好，昂内克同志！”昂内克晚上站在阳台上：“晚上好，亲爱的太阳!”太阳回答说：“去死吧，我现在在西德！” 334）东德的爱森纳赫（依发牌瓦尔特堡汽车厂所在地）人听说日本人这样测试汽车的密封性：他们把一只猫关进车里，三天之后，如果这猫窒息而死，那么零部件的密封性能判定合格。凡事爱争第一的爱森纳赫人决定效仿，用同样的方法来测试瓦尔特堡汽车。三天之后，如果这猫还呆在汽车里没有跑掉的话，那么零部件就被判定密封性合格。 335）一个法国人、一个美国人和一个德国人坐火车从波恩到东柏林。突然他们发现有有一个魔鬼追赶列车。他们都吓坏了。法国人抓起他所有的法郎，扔出窗外。他说：“也许这能让魔鬼知足的。”魔鬼继续紧追不舍。美国抓起他所有的美元扔出去，魔鬼依然追个不停。东德人把头伸出窗外，在风中喊了些什么。魔鬼突然停止下来，开始向相反方向逃跑。“你都说了些什么呀？”他的同伴问。 “我告诉他，如果他再继续跟着跑的话，马上就要进入东德了。” 336）一天晚上，埃里希·昂内克和情人在豪华寝室里说着枕边悄悄话。他心情舒畅，慷慨地许诺她一个礼物，要什么都行。她想了一会，回答说：“哦，埃里希，如果让你一定要为我做一件事的话，我希望是：开放柏林墙，一天就够了。”昂内克说：“当然没问题，亲爱的。”不过他对她这样的请求有些不解，就问，“为什么要我做这样一件事呢？”情人回答说：“我只想和你单独享受二人世界。” 337）昂内克遇到毛泽东先生便问他：“在中国，您有多少个政敌？“毛回答说：“我估计有1700万。”昂内克说：“哦，和我的情况几乎完全一样。”（注：东德居民人数是1700万） 338）问：弗拉基米尔·马雅可夫斯基真的是自杀的吗？答：是的，确实是的，甚至他的临终遗言还保存下来了呢：不要开枪，同志们！ 339）埃里希·昂内克随外交使团在奥地利。东德和奥地利的政府各个部长被一一介绍。最后，当一个人被介绍是奥地利的海军部长的时候，昂内克忍不住哈哈大笑：“但是你们连海岸线都没有！” 奥地利人被激怒了，反驳说：“介绍德意志民主共和国贸易部长的时候，我们可是表现得很有礼貌！” 340）问：美国的摩天楼真是全世界最高的吗？答：是的。但是苏联制囗造的晶体管是全世界最大的。 341）问：将军的儿子能成为元帅吗？答：不可能。元帅都有儿子。 342）问：为什么我国不急着登月？答：如果宇航员拒绝回来怎么办？ 343）有人喜欢说笑话；有人喜欢收集笑话去说笑话；有人喜欢收集说笑话的人。 344）老师问：“弗里茨，为什么你总是说成‘我们的苏维埃兄弟’？应该说成‘苏维埃朋友’才对。”弗里茨回应道：“好吧，但是朋友的话，你是可以选择的。” 345）问：苏联人民真的不需要立体音响设备吗？答：原则上，是的。人们从各个方向听到的东西几乎都是一模一样的。 346）问：我们劳动营的条件真的是很棒吗？答：原则上，是的。五年前，我们的一个听众对此抱有怀疑，所以他被派去实地调查。他看来真的很喜欢那里，到现在也没有回来。 347）问：共产主义的地狱，资本主义的地狱，哪个好些？答：共产主义的地狱。大部分的炉子都不能正常运转，因为那里严重缺乏燃油。 348）两个东德警察站在柏林墙附近聊天。一个问：“你觉得我们的政权如何？”另一个回答说：“和你的看法一样。”“这样的话，我就有责任逮捕你！” 349）撒切尔、科尔、昂内克和契尔年科在高峰会议的间隙坐在一个酒吧里谈话。起先，契尔年科站起来，撕破自己的衬衣，骄傲地指着自己毛绒绒的胸膛说：“这就是俄罗斯的针叶林带！”撒切尔夫人不甘示弱，也撕破自己的衣服说：“看这里，先生们，这是两个优质的英镑! ”科尔做出一个不屑一顾的手势和一副意味深长的表情，他脱下裤子，露出屁股说：“这里，你们看到的是分裂的德国。”其他的人都惊呆了，迄今无人知道德国是如此硕大。现在，昂内克倍感压力，他站起来，扣紧了自己的裤裆，巧妙地回击科尔说：“这里是隔栏，我向你们发誓，这玩意儿不会再变高了。” 350）一名观光客在列宁格勒旅行时，途中因为滑了跤而跌入正在施工的水沟中，满身肮脏的美国人气愤地向导游说：“在美国，危险场所都会竖起红旗，才可以避免危险啊！”“我国也是一样啊！”导游说：“难道你在入境时没看见竖起着大红旗吗？” 351~400351）列宁格勒涅瓦河的桥上聚集了许多群众，当民警前来察看时，看见一名犹太老人很认真地朗读着希伯来文的课文。”喂！老先生，你在这儿做什么？”警察询问道。“我只是在这里念希伯来文而已。”“你念这个东西做什么呢？”“你看也知道我都这么老了，就不久于人世了。因为我想到死后会遇见上帝，所以得先学会上帝的语言啊！”警察听了讽刺地笑着说：“你怎么知道你会上天堂？”老人点头答道：“我是不知道自己是不是上天堂啦，但若不是上天堂那就更不用担心了，因为另一边一定是讲俄文的！” 352）斯大林找来拉狄克：“我知道你在传播关于我的笑话。这很无礼。”“为什么？”“因为我是全体人民的伟大领袖、导师和朋友。”“天地良心，我没和任何人讲过这个笑话。” 353）-问：克里姆林宫如何处理耗子呢？-答：很简单，我们竖一块“集体农庄”的标志牌，然后一半老鼠会挨饿，另一半会跑路。 354）-勃列日涅夫同志，听说您收集政治笑话，是真的么？-是的。-那么您现在收集了多少了呢？-三座半劳改营。 355）“他被判了3年，幸运的是，坐牢五年后他被提前释放了。” 356）问：美国和苏联宪法有什么区别？不是都保证言论自由吗？答：当然，不过美国宪法也保证言论后的自由。 367）问：苏联是世界上进步最快的国家吗？答：当然！生活在昨天就已经比明天好了！ 368）在内战期间，由挨饿农民组成的代表团前往斯莫尔尼宫递交请愿：“我们都开始像马一样吃青草了。”一个代表团成员说。“很快我们就会像马一样叫了！”“得了吧，别担心！”列宁肯定地说，“我们在这儿喝着加蜂蜜的茶，也没像蜜蜂一样嗡嗡叫，不是么？” 369）一个老师领着她的学生经过公园，路上看到了一只小白兔。他的学生都是城里人，没见过白兔。“你们知道这是什么么？”老师问。没人知道。“孩子们，”老师试图引导学生的思路，“他是我们常读的许多故事、歌曲和诗歌中的角色。”一个学生赶忙向小兔敬礼，恭敬地说：“原来您长这样，列宁爷爷！” 370）斯大林去看一场苏联喜剧电影的首映式。在影片播放时他一直快活地大笑，不过在电影结束之时他突然问道：“好吧，我喜欢这电影。可为什么那个丑角的小胡子和我的一样？”所有人都噤若寒蝉，只有一人怯怯地提议道：“斯大林同志，要不要让演员把胡子剃了？”斯大林答道：“好主意，枪毙前先把胡子剃了。” 371）斯大林在党代会上作报告。突然有人打了个喷嚏。“谁打喷嚏了？”寂静。“第一排起立！把他们毙了！”第一排的人都被毙了。斯大林又问：“谁打喷嚏了？”还是没人回答。“第二排起立！把他们毙了！”第二排也都被枪毙了。“谁打喷嚏了？”最后，大厅里响起了一个哽咽的声音：“是我，是我！”斯大林说：“小心身体，同志，别感冒！” 372）一个老妇人等了两个小时才挤上汽车。当她终于上车之后，她擦了擦她的额头，说：“终于上来了，感谢上帝！”司机说：“大娘，你不能这么说。你必须说‘感谢斯大林同志’。”“抱歉，同志。”老夫人答道，“我就是个落后的老女人。我会从现在开始按你说的说的。”过了一会儿，她又问道：“抱歉，同志，我很老很笨。如果不让说上帝，斯大林死了，那我该怎么说？”“好吧，到那时候你就可以说‘感谢上帝’了！” 373）演讲后，勃列日涅夫向秘书抱怨：“我让你准备15分钟的讲稿，你的稿子却让我讲了45分钟！”秘书：“我给了您三份讲稿……” 374）勃列日涅夫在路上看到一个人扛着西瓜回家。他停下车，招呼那人，要那人把西瓜卖给他。“好吧，勃列日涅夫同志。”那人说，“您选一个吧。”“可只有一个西瓜啊。”“我们选您的时候就是这样。” 375）1978年勃列日涅夫建议乌尔霍·吉科宁总统（芬兰总统）取消苏芬两国的边境线。吉科宁最初很感兴趣，不过后来拒绝了，因为他认为自己太老，管理那么大个国家有些难度。 376）塔斯社通讯：今天，由于健康状况恶化且没有恢复意识，康斯坦丁·乌斯季诺维奇·契尔年科同志接任总书记职务。塔斯社通讯：今天，由于健康状况恶化且没有恢复意识，列昂尼德·伊里奇·勃列日涅夫同志恢复担任总书记职务。 377）另一则塔斯社通讯：同志们，你们该开心了，因为苏联共产党和全苏联今天【又一次】遭受了严重的损失。 378）监狱里两个囚犯正交流经验。“你是因为政治犯罪被捕的么？”“当然。我是个管子工，被党委员会叫去修下水管。我看了看，说，‘整个体系都该换换了’，于是我就被判了7年。” 379）新来的苏联移民正在回答记者的问题：“在苏联生活如何？”“没的抱怨。”“在那儿你的工作如何？”“没的抱怨。”“孩子上学如何？”“没的抱怨。”“所以说，你在苏联快乐么？”“没的抱怨。”“好吧。”记者继续道，“那你为什么要移民来以色列？”“因为在这儿我可以抱怨！” 380）一个男的在报亭买了一份真理报。摊主好奇地问道：“同志，每天早上你都在我这儿买真理报，可连翻都不翻开就扔掉，为什么？”男人答道：“我只对头版感兴趣。我在等一份讣告。”摊主奇怪了：“可是头版上没有讣告部分啊？”男人答道：“我向您保证，我想看的讣告会上头版的。” 381）-我的妻子已经在厨艺学校学了三年了。-哇，那她的厨艺一定很好咯？-没有，她们刚学习到苏共第二十次代表大会。 382）-爸，您能给我套车钥匙么？-好，别丢了，儿子，七年之后我们就会领到车！ 383）-我想预定一辆小汽车。需要多久？-从今天开始正好十年。-上午还是下午？-有区别么？-那天上午我们还请了管子工。 384）问：资本主义和社会主义贸易的区别是什么？答：资本主义下什么都有卖，社会主义下什么都要买。 385）“这是亚美尼亚广播电台，有听众来信问为什么我们停播了很久。事实上，我们不得不对我们的员工进行调整。我们之前那个播音员在阅读“社会主义一无是处——相较于共产主义而言”的时候，在破折号那里停顿了太长时间。” 386）“这是亚美尼亚广播电台，有听众问如果苏联开放了西方边境该如何。我们建议，赶快朝西伯利亚跑，否则会被人群踩死的。” 387）“这是亚美尼亚广播电台，有听众问‘如果突然感到渴望工作怎么办’。我们建议，在沙发上躺一会儿，会过去的。” 388）“这是亚美尼亚广播电台，有听众问解释‘共产主义’最简单的途径是什么。我们的回答是：用拳头。” 389）“这是亚美尼亚广播电台，有听众问社会主义国家的工作时间是什么。这是回答：当然是八时工作日：早八点到晚八点。” 390）问：哪里的茶好？中国的还是苏联的？答：不要混淆强权之间的斗争。喝咖啡。 391）问：尼克松来莫斯科时，他和赫鲁晓夫绕克里姆林宫赛并跑了第一，我们该怎么报道？答：“在国际长跑比赛中，我们的第一书记同志获得了光荣的第二名，尼克松先生则为倒数第二。” 392）问：第三次世界大战会爆发吗？答：不会，不过为和平而进行的斗争到很可能会让全世界寸草不生。 393）问：如果社会主义在格陵兰建成会怎样？答：首先，雪只有在有配给票时才会下，其次它只会被分配给克格勃军官和他们的家属。 394）问：共产主义是什么？答：商店里应有尽有。换句话说，就像尼古拉二世时代那样。 395）问：什么单词以R开头且没有结尾？答：改革（Reorganization）。 396）问：有没有可能在一国建成社会主义？答：可能，不过最好去别的国家生活。 397）问：有没有可能解决没有解决方法的问题？答：我们不回答有关农业的问题。 398）问：什么被允许，什么被禁止？答：在英国被允许的被允许，被禁止的被禁止；在美国不被禁止的都被允许；在德国不被允许的都被禁止；在法国什么都被允许，包括被禁止的；在苏联什么都被禁止，包括被允许的。 399）问：什么是最短的笑话？答：共产主义。 400）问：什么是最长的笑话？答：赫鲁晓夫在党代会上的讲话。 401~450401）问：为什么索尔仁尼琴、布科夫斯基、博洛茨基等不同政见者都被流放到外国去了？答：你不知道一类品用于出口么？ 402）问：其他星球上的生活如何？答：也是民不聊生。 403）问：我们的敌人是用什么方法来对抗社会主义政权的呢？答：这个问题我们将在“合理化建议”栏目中讨论。 404） 问：有什么问题你不能回答？答：没有。我们根据马克思的辩证法来完成工作。任何问题我们都能给出答案。 405）一只兔子在街上狂奔。“你跑得这么快，慌什么？”熊问。“你不知道么？他们现在在逮捕所有的骆驼，还要阉割他们。”“可你是兔子不是骆驼啊。”“对，不过假设他们逮到你，在他们阉掉你之后你就能证明你不是骆驼了！” 406）一个犹太人申请移民去以色列。据他说，他的哥哥在以色列病得很重，需要帮助。办公室的官员问他：“那为什么不让你的哥哥来这里，而要你亲自过去？”“我的哥哥是得了病，但还没有得精神病。” 407）为了解决黄油短缺问题，政治局要求苏联科学家研究技术，把粪便做成黄油，并在十月革命周年纪念期间完成。在六个月的工作之后，政治局要求进展报告。科学家报告称他们实现了50%的成功。政治局要求解释，答复如下：“人们已经可以把它涂在面包上，但尚不会去吃。” 408）2010年。莫斯科。男孩问：“爷爷，队列是什么？”“你要知道，在20年前，商店里没有足够的肉，因此人们不得不在商店门前排长长的队伍等着买肉。这就叫队列。懂了么？”“是的，爷爷。不过肉是什么？” 409）在奥运会上，苏联掷链球（注：在英文中链球实为“锤子”，Hammer）选手打破了世界纪录。记者采访他问：“你是怎么把锤子抛的那么远的？”“如果再搭上个镰刀，我能扔出两倍远。” 410）苏联社会七大谜题：1、总是没人工作，计划却总是完成；2、计划总是完成，可（商店）柜台总是空的；3、柜台总是空的，可却没人挨饿；4、没人挨饿，可所有人都不高兴；5、所有人都不高兴，可是没人抱怨；6、没人抱怨，可是天天有人上街游行；7、天天有人上街游行，可政府却总是以99.9%的得票率当选。 411）一人走进党的区委会问道：“我想入党。该从哪里开始？”“看精神病医生。” 412）问：你相信随着时间的推移，政治笑话正被重新认识吗？答：当然。过去一个笑话判15年，现在只判3年。 413）一个人把自己的车停在了莫斯科红场上。警察赶快跑来，向他怒吼：“你疯了么？这是政府所在地！”“没问题。”那人答道，“我的锁很结实。” 414）一个妇女走进食品商店。“你们卖肉吗？”“没有。”“牛奶呢？”“我们这儿只处理肉，对面那家才是没有牛奶的。” 415）一个卫兵问政治犯：“刑期多久？”“十年。”“犯了什么罪？”“没犯罪。”“你撒谎！没犯罪他们只给判5年！” 416）一个日本工人被派到俄罗斯维修日本产的机械。日本人每天工作8小时，不和别人说话。一个月后他的工作期满。在他返回日本之前，日本人眼含泪水地对大家说：“我道歉，我的好工人同志们。我知道工人们应该团结起来，但我有合同在身，我不得不工作，我为没有参与你们的长期罢工而向你们正式道歉！” 417）苏联人、法国人和美国人争论什么是最勇敢的人。美国人说：“举例来讲，我们有十辆汽车，其中一辆没有刹车。我们抽签，每人搭一辆开山路。最后我们中的一个人住院，另外九个去看他。”“这不算什么。”法国人说，“我们选10个女孩，其中有1个有艾滋病。我们抽签，一人找一个女孩。最后一个人住院，另外九个去看他。”苏联人说：“我们聚在公寓里，即便知道我们中有一个告密者。我们讲了一晚上政治笑话，然后九个人进了监狱，另外一个去看他们。” 418）一个外国代表团突击访问了一个集体农庄。没时间准备。代表团走后，集体农庄主席拉过区党委书记说：“你们没提前告诉我，所以他们都看见了。牛栏的废墟，那些灰尘，我们的贫穷。”“别担心。”党书记说道。“不过他们现在就能传的满世界都知道啊。”“那就让他们沉浸在一贯的造谣中伤里吧。”党书记答道。 419）在格鲁吉亚共和国的学校中，老师正在让学生说说自己的父亲。“图拉什维里，说说你的父亲。”“我爸爸种橘子。他把它们带到莫斯科销售，赚了不少钱。”“你了，布里泽。”“我爸爸种月桂叶。他把它们带到莫斯科销售，赚了不少钱。”“你了，克里维泽。”“我爸爸在反贪污和投机倒把分局工作。每次布里泽和图拉什维里的爸爸去莫斯科的时候都回去看看我爸爸。因此他赚了不少钱。”“你了，查维查瓦泽。”“我爸爸是生物工程师。”全班大笑。“孩子们。”老师严肃地说，“不要把快乐建立在别人的悲伤之上。” 420）全世界进行对关于大象的最佳书籍的评奖大赛。法国人递交了一册精装的《大象家庭内的三角恋研究》英国人提交了一套《大象与世界贸易》德国人提交了24卷本的一套《大象学综介》美国发放了一百万份传单，上面写着：“赢大象，不需购买。”苏联提交了三卷书，题目如下：《第1卷：大象在伟大的十月社会主义革命中的作用》《第2卷：大象在世界上最进步的苏联社会的光芒中的快乐生活》《第3卷：苏联——大象的祖国》 421）在入党审批过程中有一个问题是：“你怎么看待苏联政府？”一人回答：“就像看待我妻子一样。”“怎么解释？”“第一，我爱她；第二，我怕她；第三，我想换一个。” 422）在莫斯科红场，人们正排队参观列宁墓卫兵换岗。一个小孩问：“爸爸，为什么他们总是要看守这陵墓？”“他们不是一直说吗？”父亲答道，“列宁是永生的。如果他看不下去了决定出来怎么办？” 423）斯大林招来著名作家肖洛霍夫。“我已经读了你的小说《新垦地》。写得非常好，我喜欢。我想，你为啥不写一篇文章，就叫《敌人不投降，就叫他灭亡》？”“我害怕我写不好，斯大林同志。最近我的健康状况不好。”“我们会帮你的。我们会把你送到格鲁吉亚去，那里有酒有葡萄。”“好吧，斯大林同志。那请让我和家人道个别。”“为什么？”“我怕我的文章不成功。” 424）问：能够用香蕉当指南针吗？答：可以。把香蕉放在柏林墙上，香蕉被从哪边抽走哪边就是东边。 425）“奶奶，列宁好吗？”“当然，孙子，他很好。”“斯大林呢？他坏吗？”“坏，当然坏。”“赫鲁晓夫呢？他怎么样？”“等他死了，我们就知道了。” 426）党代会。斯大林发言：“今天我们有两个问题要讨论。第一，我们需要枪毙所有的政治局委员。第二，我们需要把列宁墓涂成亮绿色。”观众席中传来了一个怯怯的声音：“为什么涂成亮绿色？”“很好，我就知道大家对问题一没有不同意见。” 427）斯大林想要测试一下党员的忠诚性。他召来一个俄罗斯人，一个乌克兰人和一个犹太人，要求他们从十层楼窗台上跳下去。俄罗斯人往窗外看了一眼，哀求道：“斯大林同志，求求您，我有家人、孩子……”“逮捕他！”斯大林下令。乌克兰人往窗外看了一眼，跪了下来：“斯大林同志，行行好！我得独自支撑整个家庭！”“逮捕他！”斯大林下令。拉宾诺维奇脱掉夹克、裤子，摘下手表，都交给斯大林：“求求您，把这些交给我妻子。”然后转身跳出窗外。当然了，斯大林只是开玩笑，拉宾诺维奇被下面的网子接住，并没摔成碎片。他被带回斯大林的办公室，斯大林感动地说：“我的好朋友，拉宾诺维奇同志，您已经证明了您是一位忠诚的共产党员，您会因此获得勋章和更好的工作。我只是有一点不解：您的勇气是哪里来的？这对我们是万分珍贵的。”拉宾诺维奇答道：“说实话吧，斯大林同志，死了都比现在的生活要好。” 428）尼克松先生访问莫斯科，赫鲁晓夫带着他参观首都，尤其是各个新建住宅区。“那些是什么？”尼克松突然问道。“你什么意思啊？”赫鲁晓夫傲慢地反问，“电视机。”“好啊！”尼克松赞叹道，“你们不只已经赶上了我们，在一些地方甚至已经超过了我们。”“哪里？”赫鲁晓夫欣喜若狂。“比如说吧，我们从不在猪圈里安装电视机。” 429）为了测试玉米的营养，赫鲁晓夫招来一个俄罗斯人，一个乌克兰人和一个犹太人，让他们只吃玉米三个月。最后俄罗斯人掉了20公斤体重，乌克兰人掉了10公斤，犹太人则长了5公斤。赫鲁晓夫很高兴：“拉宾诺维奇同志，告诉我们你是怎么做到的？”“很简单，赫鲁晓夫同志，我用母鸡过滤了一下玉米。” 430）斯大林就要死了，他把赫鲁晓夫招来：“尼基塔·谢尔盖耶维奇，我知道你会继承我并超越我，”斯大林说，“我给你准备了两封信。如果你遇到了危机，就拆开第一封；如果再遇到，就拆开第二封。”赫鲁晓夫拿走了两封信。1956年，他遇到了匈牙利和苏伊士危机。于是赫鲁晓夫拆开了第一封信，上面写着：“都怪在我头上！”于是苏共二十大召开，斯大林主义终结了。1964年，赫鲁晓夫又碰上了勃列日涅夫和柯西金的政变，于是他拆开第二个，只见上面写着：“准备两封信。” 431）科学家联名要求赫鲁晓夫去领导一个癌症治疗所。赫鲁晓夫推脱道：“谢谢同志们的支持，但我对癌症一窍不通啊。”科学家们纷纷说道：“赫鲁晓夫同志，您只要应用一下您在农业问题上的经验就好了！您一负责，粮食就全不见了！” 432）-为什么在斯大林的遗体被移出列宁墓后，陵墓的看守反而加倍了？-因为他们发现赫鲁晓夫曾经抱着铺盖卷在附近晃悠。 433）“列昂尼德·伊里奇！”“哎呀，在同志之间不用这么正式嘛，叫我伊里奇。”（“两个伊里奇”） 434）电话铃响了，勃列日涅夫拿起听筒：“您好，这是亲爱的列昂尼德·伊里奇……”（苏联官方常称勃列日涅夫为“亲爱的列昂尼德·伊里奇”） 435）塔斯社通讯：“……昨天在莫斯科发生了一起针对勃列日涅夫同志的失败暗杀事件。子弹穿透汽车的防弹玻璃，击中勃列日涅夫同志胸前的勋章，随后反弹并打死了司机。” 436）科学家发明了一种电脑，能够计算出与共产主义的距离。在勃列日涅夫的监督下，科学家输入了所有的信息，计算机开始计算。一天、两天，三天……最终计算机得出了结果并打在了卡带上：18千米。科学家十分震惊。肯定是算错了！他们重来了一次，还是这个数字！学院的锅炉工突然懂了什么：“同志们，朋友们，数据没有错！勃列日涅夫同志告诉过我们，每一个五年计划都能让我们向共产主义迈进一步！” 437）勃列日涅夫在电视上对公众讲话：“近日在莫斯科有恶毒的流言说我的警卫开的车里不是我而是个假人。我必须得说这是相当肮脏的谎言！他们在给我开车，而不是假人！” 438）勃列日涅夫在一位重要政治人物的葬礼上讲话：“同志们，我能理解你们的表情为什么这么难看。我能理解你们的着装为什么这么没品位。不过我不能理解的是你们的教养怎么这么糟糕！音乐响了这么久，就我一个人知道要邀请女士跳舞！” 439）勃列日涅夫在向工人们讲话：“很快我们就能生活得更好！”台下传来一个声音：“我们怎么办？” 440）勃列日涅夫坐车在莫斯科街头闲逛，突然看到一座纪念碑。“这座纪念碑是谁的？”“契诃夫的，列昂尼德·伊里奇。”“哦，很好。我读过他的《姆姆》。”“抱歉，列昂尼德·伊里奇，《姆姆》不是契诃夫写的，而是屠格涅夫。”“哦，真的么？那这可真蠢。”勃列日涅夫评论道，“《姆姆》是屠格涅夫写的，可契诃夫却得到了纪念碑！” 441）勃列日涅夫给尼克松打电话，说他昨天晚上做了个梦：一面红旗飘扬在白宫上空。第二天尼克松给勃列日涅夫讲他的梦：“列昂尼德，我梦到一面红旗飘扬在克里姆林宫上空！”“不过现在就是这样啊？”“不见得……我梦里那面红旗上貌似写着中文……” 442）勃列日涅夫的噩梦：捷克人坐在红场上吃犹太薄饼——用筷子。 443）-沙俄和苏维埃政权的主要区别是什么？-沙俄政权由老头子传给儿子，现在是从老头子传给老头子。 444）有人给克里姆林宫打电话：-你们现在在找苏共的新总书记吗？-不！你是谁？傻瓜吗？-对，病入膏肓的老傻瓜！ 445）-世界上最豪华的老人院是什么？-克里姆林宫。 446）两个人在莫斯科街上走。一个人突然问：“现在是完全的共产主义了吗？我们终于通过社会主义到达共产主义了吗？”另一人答道：“天哪，没有。事情还没那么糟糕。” 447）戈尔巴乔夫在别墅与赖莎一起度假。早上，戈尔巴乔夫穿着条内裤走到阳台上呼吸新鲜空气。“亲爱的，回来穿上睡衣。”赖莎喊道。“赖莎，你是怎么隔着两间屋子看到我的？”“不，我在听自由欧洲电台。” 448）一天晚间。完成了一天的工作，雅科夫·米哈伊洛维奇·斯维尔德洛夫来弗拉基米尔·列宁的书房小坐。“弗拉基米尔·伊里奇，我们要么开一瓶？”斯维尔德洛夫问。“不干。我绝不再这样了！”列宁断然拒绝，“绝不！”“得了吧，弗拉基米尔·伊里奇！就我们两个！……上次我们开了两瓶，什么也没发生啊？”“还什么都没发生呢！你和捷尔仁斯基回去睡觉去了，可我却爬到辆装甲车顶上，扯了一顿屁话……” 449）苏联的家具厂生产一种新型号的床：“共产主义型号”。床能轻松塞下三个人，而床沿上则刻着标语：“列宁总与你同在！” 450）一艘苏联货船被食人族海盗劫持，海盗准备把所有的海员吃掉。船长问道：“亲爱的食人族同志，你们有过集体化吗？”“没有！”“你们有过个人崇拜吗？”“没有！”“你们有过十月节吗？”“没有！”“好吧，那我就真的不能理解你们为什么这么残忍了……” 451~500451）一个熟人在莫斯科街头遇见了拉宾诺维奇。他很奇怪地问：“拉宾诺维奇，你为什么没移民以色列？”“为什么？在这儿我也能感受到悲惨！” 452）一个美国男孩和一个苏联男孩对话：-我们有巧克力。-我们有斯大林。-我们也可以有斯大林。-可那样的话你们就不会有巧克力了…… 453）问：想象斯大林、政治局委员和他们的全体跟班都在涅瓦河的一艘蒸汽船上。突然船进水，迅速沉没，谁会得救？答：全体苏联人民。 454）“打倒犹太人和骑自行车的！”“骑自行车的怎么着你了……” 455）问：可以批判希特勒吗？答：可以，就像你批判斯大林的方法一样。你把把自己锁在屋里，蒙上两层，最好三层被子，在脸上蒙上一个，最好两个枕头，然后就可以畅所欲言了。记住，时间要严格限定在5分钟以内。 456）问：为什么柜台上的黄油都不见了？答：全在苏维埃制度光芒的照耀下融化了。 457）问：什么是社会主义制度下的各民族团结？答：就是亚美尼亚人、俄罗斯人、乌克兰人等苏联一切民族如兄弟一般团结起来，共同胖揍阿塞拜疆人。 458）问：最高苏维埃是什么？答：最高苏维埃是苏联的最高权力机构。它由两个人群组成：什么都不能干的人和什么都能干的人。 459）问：猪可以是秃顶吗？答：我们不回答政治问题。 460）问：什么是乐观主义者和悲观主义者？答：乐观主义者学英文；悲观主义者学中文。 461）问：是说在苏联没有立体声系统吗？答：的确，你听到的全都来自一个方面。 462）埃里希·昂内克想人民是如何看待他的，所以他化妆微服私访。他在大街上问一个人：“打搅一下，请问您觉得昂内克怎么样？”这个人把他引到一个辅路上，确认四下无人能听见他说话，他贴着埃里希的耳朵小声说：“我支持昂内克！” 463）学校里，老师提问：“社会主义最重要的东西是什么？”学生们陷入思考，小弗里茨回答说：“社会主义最重要的东西是人！”老师说：“这个回答不错，弗里茨，我打算给B等成绩。”弗里茨并不满意，他果断地做出反应：“如果我告诉您这个人的名字，您可以给我一个A吗？ 464）为什么西德的生活水平比我们高？因为共产主义者得不到那边的工作许可。 465）问：为什么市面上没有面粉卖？答：因为他们开始往面包加面粉了。 466）问：原子弹会摧毁我们美丽的家园埃里温吗？这里的建筑多么壮观，花园多么优美！答：原则上，是的。不过莫斯科是一个漂亮得多的城市！ 467）问：什么是混乱？答：我们对国民经济不做评论。 468）东德的士兵正在接受训练。在完成与数不清敌人的无数次交锋之后，每一个人都变得敌友不分了。指挥官正在测试他的士兵。指挥官：“舒尔茨！”士兵舒尔茨：“是，长官！”指挥官：“如果你遇到一个美国士兵和一个俄国士兵，你会杀死哪个？”士兵舒尔茨：“俄国人！”指挥官：“不对，你个白痴！如果我是你的话，我会杀死美国人！”士兵舒尔茨：“您看，长官先生，您还是把俄国人留给我来解决了吧？” 469）两个囚徒在监狱里相遇。一个人问：“什么原因进来的？”“我是一个自行车零售商，呼吁过让埃里克·昂内克下台。你以前是干什么的？”“我用望远镜观察了埃里克·昂内克。”“这没什么呀!”“是的，很好，不过我在望远镜下安装了一把步枪……” 470）冬天，一个男人看见两个男孩拿着一个雪橇，就问道：“你们干吗呢？”“我们在玩德苏友谊的游戏。”“怎么玩？”“非常简单，他把我推上山顶，然后我就滑下去。” 471）东德人对西德人说：“我们是一个民族！”西德人回应说：“我们也是。” 472）问：为什么东德经济已经低到膝盖以下了？答：因为她想先蹲下再跳起来超过资本主义经济。 473）社会主义阵营经济的四根支柱是什么？蒙古的电台、苏联农业的成就、波兰工人的勤劳、东德的统计年鉴。 474）谁是世界上最伟大的外科医生？当然是瓦尔特·乌布利希。他把欧洲的心脏改造成世界的屁股！ 475）昂内克和电车的区别是什么？电车有更多的追随者（拖车）。 476）医生在精神病院巡视。“这里有一个格外严重的病例，”医生指着一个病人叹息道，“他居然在昂内克废话的时候没有关掉收音机！” 477）问：为什么东德没有实行全国性的计划生育？答：因为生儿育女的生产资料掌握在私人手里。 478）问：什么是不信任？答：东德的边防人员在波兰边境来自苏联的石油管道凿一个洞，看看石油朝哪个方向流动。 479）问：您能描述以下东德的地理特征吗？答：一个充满各种瓶颈的平原。 480）最后的卫星牌汽车在交付的没有装发动机——因为反正在东德一切都是往下滑的…… 481）卫星牌汽车源自马克思主义！因为《资本论》说：它有使用价值，但是没有价值。 482）问：为什么社会主义把人民放在最中心的位置？答：因为这样从各个方向都能方便地剥削他们。 483）里根、勃列日涅夫和昂内克问亲爱的上帝，2000年的时候世界会怎样。上帝对里根说：2000年的时候美国会变成共产主义国家。里根扭过头去，失声痛哭。那么苏联呢？勃列日涅夫问。苏联嘛，上帝说，将不复存在。她将被伟大的中华帝国吞并。勃列日涅夫也扭过头去，失声痛哭。那么德意志民主共和国2000年的时候在哪里呢？昂内克问。上帝扭过头去，失声痛哭。 484）女教师问学生，他们想象中的德意志民主共和国可以描述成怎样一幅画。一个学生说：“我想象的东德是一棵树，在社会主义国家联盟里根深叶茂，向上成长，越来越茂盛。”第二个学生说：“我想象的东德是一辆拖着巨大犁耙的大型拖拉机，他耕耘过的每一个地方都繁荣昌盛。”小弗里茨说：“我想象的东德是一艘豪华的巨轮，乘风破浪，站在甲板上的人们……”女教师说：“很美的图画，小弗里茨。”“等等，我还没说完呢……站在甲板上的人们呕吐，呕吐，不停地呕吐。” 485）埃里克·昂内克驾驶者一艘苏联的宇宙飞船在太空飞行，一个未知物体歪歪斜斜地靠近，撞上飞船，燃烧起来。透过窗户，埃里克看见一个天使，对他说：“我有能力拯救你，不过你先要大喊：资本主义万岁！”埃里克当然不高兴地拒绝这个无理的要求，“那还不如让我去死！” “那好吧，如你所愿。”过了一会，宇宙飞船完全失控了，天使又重复了他的要求。埃里克下定决心忠于自己的理想，并让天使滚的远远的。又过了一会，飞船开始变得白热化，埃里克的额头开始冒汗，天使第三次从旁边经过。埃里克没有再犹豫了：“理想能够拯救我吗？好吧，我就妥协了吧。”于是他对着外面喊：“资本主义万岁！”一个人狠狠撞了他的肋骨一下：“嘿，同志，你一开党会就睡觉也就算了，至少你得保持安静吧!” 486）两个曾经的头头在一个牢房里碰面了。“你以前是什么地方的头头？”“我是马戏团的团长。”“为什么进了这里？”“最近的一个十月，我在马戏团挂了一个标语。”“写的什么？”“35岁的民主德国——35岁的全民马戏团！你呢？”“我是一家纺织厂的厂长，我也挂了一个标语。”“写的什么？”“两个同志里就有一个是纺织工（疯子）！”（译者注：纺织工和疯子、神经病、怪人共用一个单词。） 487）一家金属加工厂生产出一种金属丝，它是如此之纤细，以致于东德没有哪个名牌测量仪器能测出它的厚度。一截金属丝被打包邮寄到日本，让他们测量一下厚度。不幸的是，经办人忘记附上说明函告诉日本人拿这金属丝做什么。三个月后，包裹寄回来了。德国社会主义统一党的全体高层聚集在一起，由党魁打开了包裹：“抱歉我们不知道拿这段金属丝作何用途，我们还是在它的内外表面都切上了螺纹。” 488）小弗里茨坐在教室里，玩他的橡皮擦。突然它掉到地上去，于是小弗里茨蹲在地上找。这时女教师向学生提问：“如果你们站在埃里克·昂内克的墓前，你们会说什么？”学生甲：“他是一个伟大的人民领袖。”学生乙：“他深受他的人民热爱和尊敬。”女教师：“弗里茨，你想说什么呢？”刚好这时候小弗里茨看见了他的橡皮擦，喊道：“这头猪在这里，不要动！” 489）赫尔穆特·科尔下了地狱。魔鬼问他：“你这一生对你的人民撒过多少次谎？”科尔不好意思地说：“刚好10次……”于是他被刺了10针作为惩罚。戈尔巴乔夫也下了地狱。魔鬼也问他，对他的人民撒过多少次谎。“100次，”戈尔巴乔夫承认，于是他也被刺了100针作为惩罚。突然隔壁的房间发出巨大的哒哒哒震响！科尔好奇地问魔鬼发生了什么事。“噢，那是埃里克·昂内克，”魔鬼说，“这是我们第一次必须把一个人放在缝纫机下，刺击整整一个星期！” 490）问：社会主义与性高潮的区别是什么？答：在社会主义里人们呻吟的时间更长。 491）问：民主与社会主义民主的区别是什么？答：大概相当于椅子和电椅的区别。 492）问：为什么东德人不可能由猿猴进化而来？答：因为没有猿猴可以忍受40年不吃香蕉的日子。 493）一个老奶奶问昂内克，卡尔·马克思从本质上说是科学家还是工人呢？昂内克想了好久，决定遵从党的正确路线，于是回答道：他是一个工人。“我想也是，”老奶奶说，“当一个科学家想出新的发明理论时，总是先拿小白鼠做实验的。” 494）丈夫将妻子和情夫捉奸在床。他震惊的嚷道：“你们两个蠢货居然还呆在家里!供销社里来橙子啦！！！” 495）肉店里的对话：“请问您有牛肉吗？”“没有……”“猪肉呢？”“没有……”“香肠呢？”“也没有……”“见鬼的你们到底有什么？！”“到晚上六点半的营业时间。” 496）老布什、戈尔巴乔夫和艾贡·克伦茨(昂内克接班人)对摆在各自面前的难题束手无策，遂都决定，暂且抛下一切，将自己冷藏50年。50年后他们被解冻，分别找来各自国家过去50年的报纸。布什看了报纸的第一页遂倒地而亡，上面写着：通用汽车赢得社会主义生产竞赛冠军！戈尔巴乔夫看了第一页后也紧跟着布什的脚步而去，报纸头条：波兰–中国边境线上再启争端！艾贡·克伦茨没等读完第一页也抽搐而亡，上面的大字标题：热烈庆祝昂内克主席130岁生日！ 497）民主德国的监狱里，一个犯人向另一个解释他入狱的原因。“都是因为我太懒了。”“消极怠工？”“不是，我和一个同事讨论了政治问题，我以为明天早上到斯塔西去告发他还来得及，谁想他比我先行一步。” 498）一个美国人、一个苏联人和一个东德人坐在火车上。美国人从兜里取出口香糖，在嘴里嚼了不到三下就吐出车窗外。面对别人惊奇的目光，他解释道: “噢，这个我们那儿有的是！”苏联人随后打开一瓶伏特加，喝了一口后扔出窗外：“这个我们那儿也有的是。”紧接着，东德人将苏联人掷出了窗外。 499）一个民主德国的居民被掐掉了电话线，他跑去申诉并询问原因，有关部门告诉他：“因为您诬蔑了国家安全部。”“我怎么诬蔑的？”“我们有记录：您曾多次在电话中声称，安全部窃听了您的通话。” 500）昂内克私访民间，想知道他在民众中受爱戴的程度。他走到一户住在高楼里的人家摁了门铃，一个小姑娘来开门。“你是谁啊，叔叔？”“我嘛，我的孩子，我就是那个一直为你们的衣食住行操心，让你们过上好日子的那个人……”“妈妈，妈妈，你快来，慕尼黑的彼特叔叔来看我们啦。” 501~550501）昂内克在罗斯托克海港散步，看见三只即将启航的船他向第一只船上的海员问到:“海员同志，这是要去哪里呀？”“我们送肥料到莫桑比克去，然后运一船香蕉回来！”“很好，继续努力！”他走向第二只船:“同志，这是要去哪里呀？”“我们送自行车到卡斯特罗同志那儿去，然后运一船蔗糖回来！”“很好，继续努力！”他走向第三只船:“同志，这是要去哪里呀?”“我们送香蕉和蔗糖到列宁格勒去！”“怎么回来的呀？”“跟往常一样，坐火车回来的！” 502）“想让卫星牌汽车的速度超过每小时100公里吗？把它推下悬崖吧。” 503）问：一辆卫星牌汽车停在红灯前，灯变绿了，车却没动，是怎么回事？答：地上有口香糖。 504）问：当共产主义建成时，还会有犹太人和亚美尼亚人吗？答：别担心，犹太人和亚美尼亚人能找到方法脱身的。 505）问：肖洛霍夫现在在写什么？答：一篇犯罪小说，名叫《我如何获得了诺贝尔文学奖》 506）问：在共产主义建成的时候人们都能学会游泳吗？答：求您了……别拿共产主义和大洪水比…… 507）问：资本主义广告和共产主义宣传有何区别？答：不知道，但我们都躲不开。 508）问：为什么斯大林总在晚上工作？答：你怎么这么幼稚？连小孩子都知道什么人只在夜间工作。 509）问：是说柏林墙隔开了东方和西方吗？答：不是。事实是它把东方从西方隔开了。 510）问：是说每一个苏联士兵都想成为将军吗？答：不，我们的士兵们没那么傻。他们知道将军在和平时期都有可能失踪。 511）问：如果伏特加干扰了工作该怎么办？答：停止工作。 512）问：比年轻的悲观主义者更糟的是什么？答：年老的乐观主义者。 513）问：乐观主义者和悲观主义者有何区别？答：悲观主义者相信事情已经不能再坏，乐观主义者觉得事情总还可以再坏！ 514）问：共产主义国家的领袖和西方的失业者有何共同点？答：他们都不知道明天会如何。 515）问：什么叫交换意见？答：带着你的意见走进厂长的办公室，然后带着他的走出来。 516）问：苏联有反犹主义么？答：我们必须做出积极（肯定）的回答：没有！ 517）问：为什么商店货柜上的黄油都没了？答：在苏联制度的万丈光芒之后融化了。 518）问：犹太复国主义者和印象主义派有何区别？答：我们不知道，但无论你认为你是其中哪个，你都最好移民。 519）中苏边界发生了武装冲突，苏方三架轰炸机和中方三辆坦克参加了战斗。第二天，各国媒体发布了新闻。苏联塔斯社：我方三架农用飞机在中苏边界附近播种，遭到中方坦克无端袭击！中国新华社：我方三辆拖拉机在中苏边界耕作时，遭到苏联轰炸机无端攻击！罗马尼亚新闻社：昨天，在中苏边界发生了一场有关农业问题的激烈讨论！ 520）一个男人去看精神病医生。救救我，大夫！你怎么了？我打开电视，里面出现齐奥塞斯库，我打开收音机，里面出现齐奥塞斯库。现在我面前有一一罐豆子，我该不该打开它？（共产时期，学校机关的任何房间内都必须有齐奥塞斯库的画像） 521）在农业会议休息的间隙，两名集体农庄（或者说是农业合作社）的经理在聊天。“你听说了吗？甘地被枪杀了，萨达特被枪杀了，肯尼迪也被枪杀了？”“唉，我的朋友，我们无能为力啊，这就是我们集体农庄经理的命……” 522）请问电流有几种类型？嗯，有两种，直流电和交流电。但是交流电也分两种，连续的交流电和间断的交流电。而且，间断的交流电还能再分成两种，经常间断的交流电和偶尔间断的交流电。（罗马尼亚能源紧缺，在寒冷的冬天经常停电） 523）国家实行节能，违者处罚。测量家中温度的时候请把温度计放在被子下面，如果这样的话温度还能超过16度，你的被子将会被没收！ 524）如果你把手放在暖气片上，它会讲些什么？天呐，你的手真是太暖和了。 525）问：在罗马尼亚，比冷水还冷的是什么？答：热水。 526）问：我们所处的时代有哪两对最主要的矛盾？答：资本主义制度和社会主义制度之间的矛盾，社会主义制度和神经系统之间的矛盾。（罗马尼亚语中，资本主义、社会主义制度里的“制度”和神经系统的“系统”是一个词）。 527）问：你怎么从一群警察里选出一个白痴？答：随机选。 528）问：如何停止正在前进的阿尔巴尼亚坦克？答：打死正在推坦克的士兵。 529）问：阿尔巴尼亚为什么橡皮筋短缺？答：他们正计划发射一枚卫星。 530）一个人看见街角排起了长队，他问队尾的人：这在卖什么？那人答：我不知道，你问前面的人吧。于是他问队伍中间站着的人：这在卖什么？那人答：我不知道，你问队首那个人吧。于是他问队首那个人：这在卖什么？那人答：没卖什么，我刚才不舒服，倚着墙休息一下。“那你为什么还不走啊？”“我还从来没站在队首过呢，想多站会。” 531）克林顿、叶利钦、伊利埃斯库（罗马尼亚领导人）被邀请参观一架纯金制造的飞机，他们只能看，不能拿走任何东西。五分钟后，克林顿出来了，但是金属探测器响了起来，从克林顿身上搜出几个金的螺丝钉。又五分钟，叶利钦出来了，金属探测器再次响了起来，从叶利钦身上搜出一把金的螺丝钉。轮到伊利埃斯库上飞机了，又过了五分钟……五分钟……飞机起飞了。 532）老师问同学们：三百米长，十米宽，素食的，是什么东西？孩子们立刻答道：超市前排队买萨拉米香肠的人群！ 533）一名俄国克格勃特工、美国联邦调查局特工、一名罗马尼亚特工在一起聊天，比谁的国家保密工作做得好。美国特工说，我老婆也在中情局上班，她不知道我做什么，我也不知她做什么！俄国特工说，我的国家更厉害，我就跟我老婆在一个办公室里上班，我们相互谁也不知道谁做什么。罗马尼亚特工说，还是我的国家最厉害，我一个人在一间办公室里上班，连我自己都不知道我在做什么！ 534）上帝和圣彼得在巡视世界，上帝手拿丰饶之角，号角中流出各种财富，所到之处备受恩泽，在阿拉伯半岛流出油田，在非洲流出金矿。突然上帝转了一个急弯，丰饶之角掉了。“不好，真是糟糕，我把所有财富都掉在一个地方了。彼得，你快看看，那个地方是哪里？”彼得看了看地球仪说：我的主啊，那里是罗马尼亚。上帝于是生气的朝罗马尼亚喊道：诅咒你们，让你们什么都享受不到！！ 535）问：一个大大的、黑黑的、噪音大得惊人的、废气多的惊人的，能把胡萝卜切成五块的东西是什么？答：是罗马尼亚制造的用来把胡萝卜切成四块的机器。 536）一个罗马尼亚老头到药店买药。您好，您有这些蓝色的，能让我很舒服的药么？当然有了，大爷，这些是“伟哥”。哦，不错，多少钱？35000列伊（罗马尼亚货币，大约1美元），大爷。嗯……能坚持多久？大概四小时。啥？四小时，还要35000？是啊。好吧，姑娘，我是不会为了额外的15分钟而花35000的！ 537）撒旦到地狱视察，每个大锅里面都有一个国家的人在受罪，旁边的魔鬼监视着，一旦有人想跑，魔鬼就用三叉戟刺他们。撒旦发现，有一口锅没有魔鬼监视，他咆哮了，你们怎么能这么大意！旁边的小鬼立刻答道，大人，不用担心，这些是罗马尼亚人，只要有一个罗马尼亚人想跑，周围的罗马尼亚人自然就会把他拉回去。 538）美国大使前去拜会齐奥塞斯库，在等候时他跟两位罗马尼亚部长聊了几分钟。等他见到齐奥塞斯库时，他发现自己的金表不见了，他把这件事告诉了齐奥塞斯库。齐奥塞斯库说，放心吧，我来处理。齐奥塞斯库离开房间，两分钟后回来了，拿着大使的表。大使感谢道：真实谢谢您了，希望这没有影响您和他们的关系。齐奥塞斯库答道：没事儿，他们根本没发现。 539）在布加勒斯特，许多申请出国的人正在排队领取护照。其中一人回头看到他身后的人不是别人，而是齐奥塞斯库。齐奥塞斯库看到他吃惊的样子便说：“既然大家都要出国，那么我也走。”此人立即对齐奥塞斯库说：“如果你走的话，我们还有什么必要出国呢！” 540）问：为什么说社会主义是一家？答：因为齐奥塞斯库同志的所有亲属都是国家干部 541）当戴高乐的夫人伊冯娜走下舷梯，看到齐奥塞斯库身材之矮小时，情不自禁地说：“我的上帝啊”这时会说流利法语的齐奥塞斯库的夫人埃列娜转向她的丈夫，美滋滋地说：“听啊，他们管你叫上帝呢。” 542）为什么齐奥塞斯库要在五月一日举办群众集会？他要看看在冬天过后，还可以活下来多少人。” 543）一个波兰人得到一盏神灯，灯神照例可以满足他三个愿望。“我想让中国人入侵波兰。”这是第一个愿望。灯神觉得有些奇怪，不过还是满足他了，中国人来了，把波兰劫掠毁坏一番，然后回家。你的第二个愿望可以积极一些，灯神适时地提出了一些建议。不，波兰人答道，我希望中国人再侵略波兰一次，然后回家。没有办法，于是中国大军再次打进波兰。灯神忍不住了，“如果你愿意，我可以让波兰恢复原样，或者成为更好的国家！”波兰人拒绝了，再次要求中国人进攻波兰，然后回家。灯神不解的问，为什么？“那样的话中国人就可以扫荡俄国六次了。”波兰人答道。 544）总理访问一家工厂，他问经理：“你的工厂完成生产指标了吗？”“完成了。”“那你用奖金干嘛了？”“我买了一艘游艇，其余的钱存在银行里。”“很好。”总理于是问总工程师：“你完成了个人生产指标嘛？”“完成了。”“你用奖金干嘛了？”“我买了一辆摩托车，其余的钱存在银行里。”总理于是问一名工人：“你也完成生产指标了吧？”“没错。”“你拿奖金干嘛了？”“我买了一双鞋。”“其余的钱呢？”“你说其余的钱啊？我找我丈母娘借的。”工人答道。 545）在商品提价的前几天,一家服装店快要关门的时候。-怎么,衣服全卖出去了?-是的,经理先生,全卖出去了。-连在那儿挂了两年的那件衣服也卖出去了?-是的。-顾客说了些什么?-没说一句话,只是他的导盲犬汪汪叫了好几声。 546）一个警察偶然间得到一幅七巧板，他很感兴趣，每天都在玩。终于有一天他把七巧板还原了。他自豪地向同事们宣布：“我花了六个月就玩好了！上面写着‘三到五年’！”同事们投去钦佩的目光。一个来办事的人很惊讶，看了上面的字——“三到五岁”。 547）问：天使、魔鬼、笨警察、聪明警察在一座房子里。现在房子里丢了钱，是谁干的？答：笨警察，其他三者其实都不存在。 548）问：为什么有两个波兰工人推一辆独轮车？(按理一个人够了）答：因为第三个人请病假了。 549）问：为什么波兰反对许美国加入经互会？答：因为波兰无力支撑两个超级大国的经济 550）问：为什么波兰和美国在经济上和政治上相似？答：因为在波兰任何东西都可以用美元交易，而且你大喊“我反对美国政府”，也不会被逮捕。 551~600551）问：为什么美国朋友那边拿到波兰的药失效了？答：说明书上写的很清楚：“每天三餐后服用”。 552）问：华沙哪里看景色最好？答：华沙文化宫里最好，因为从那里你看不到华沙文化宫。（华沙文化宫是苏联援建的建筑，绰号“斯大林的注射器”） 553）问：资本主义和社会主义的区别在哪？答：资本主义岌岌可危，走到了悬崖边缘。社会主义比它更领先了一步。 554）问：在波兰换灯泡需要几个人？答：十万零一个，一个人拿住灯泡，十万个人负责转动房子。 555）孙子向爷爷抱怨：“爷爷你骗我，我去苏联了，根本没有金银财宝美女美食。完全是穷乡僻壤。”“你跟谁一起去的？”爷爷问。“国家安排的旅行。”孙子答。“那就对了，我当年跟毕苏斯基元帅一起去的。”爷爷答道。 556）问：作为一名军人，如果华约入侵波兰了，东德和苏联从两边打过来，你会先打死哪国的士兵？答：东德的。工作第一，娱乐第二。 557）问：斯大林死后苏联司法制度的最大进步是什么？答：禁止在宣判前枪决被告。 558)问：臭虫可能进行革命吗？答：原则上是可以的。毕竟它们身上流的是工人和农民的血嘛。 559）问：说苏联保持了潜艇最长潜航时间的记录是真的吗？答：对。我们有两艘潜艇自打1957年起就一直在海底。 560）问：我们苏联的农业可不可能取得值得夸奖的例外业绩？答：原则上是可以的。我们可以在播种之后去加拿大收获。 561）问：我们把我们最好的公牛送到古巴去配种，可它到了之后就在草坪上呆着，什么也不干，也不和母牛交配。答：很遗憾我们也无能为力。我想那头公牛可能是以为自己去当顾问了。 562）问：为什么要这么慢？答：为了避免恐慌。 563）问：如何能判断出一份死因诊断书是不是苏联大夫写的？答：要是看到签名在“死因”一栏底下就是了。 564）问：如何根绝秃顶？答：我们不回答挑拨性的问题。 565）塔斯社新闻：昨天伪装成农民的中国士兵在中苏边境上攻击了和平的苏联拖拉机，苏联拖拉机被迫反击，向中国士兵开炮，成功将其击退。拖拉机所属的集体农庄代表伊万诺夫少将与记者见面时表示，耕作用垂直起降拖拉机“涅瓦河”以后仍将用于击退此类攻击。 566）问：我要去西方国家开会，可是旅费不够。怎么办？答：在原则上这不是问题。别买返程票就行。 567）问：美国有科学家认为未来是不可见的，这是真的么？答：从原则上是不对的。未来的五年计划总能实现，但看不见的是过去。 568）问：在苏联哪个城市最重要？答：当然是埃里温了！问：要是美国人决定对苏联发动核攻击的话，埃里温就会被瞄准了啊。答：莫斯科还是重要得多嘛。 569）问：怀孕的八年级学生和卫星牌小汽车有什么共同点？答：都是全家的耻辱。 570）问：苏联入侵捷克斯洛伐克是为了什么？答：为了寻找邀请他们介入的捷克斯洛伐克人民。 571）问：听说苏军介入捷克斯洛伐克是应了捷克政府的请求？答：原则上是对的。只不过回应的是1938年的请求。 572）问：聪明的保加利亚人是怎么跟愚蠢的保加利亚人说话的？答：从加拿大打电话来。 573）问：可能在摩纳哥建成社会主义吗？答：不可能。大规模灾害在小国很难发生。 574）问：可能在罗马尼亚……答：（打断问话）对，能，能。 574）问：东德人，你们是想住在德国呢，还是苏联呢还是美国呢？答：当时是德国了。西德才是德国嘛。 575）问：世界上最大的国家是什么？答：古巴。古巴的知识分子，佛罗里达的农民，莫斯科的政府，乌克兰的谷物农场，安哥拉的墓地。 576）问：BBC向电台提问：贵国的平均工资是多少？答：……英国的气候最差了。 577）问：苏联生产的汽车有可能在苏联的道路上跑到120千米每小时吗？答：可能，但只能有一次。 578）问：有可能避免切尔诺贝利的惨剧吗？答：可能的，只要瑞典人不把什么都说出来…… 579）问：什么是俄罗斯式的生意？答：偷一筐伏特加，卖掉，然后把钱买酒喝掉。 580）问：第一批人类是什么？答：我们都知道人是从猩猩演化而来的。所以我们必须承认第一批人类包括：猿人、犹太人、黑猩猩、格鲁吉亚人、大猩猩和俄罗斯人。 581）问：有没有可能只靠工资就平衡收支？答：不知道，我们没试过。 582）在列宁的葬礼上，一个演讲者说道：“他让我们摆脱了资本主义的锁链。”“没错，”拉宾诺维奇评论道，“我母亲就有个金的，叫他们给拿走了。” 583）全体员工的会议在一家妓院召开。妓院的党支书发表讲话。他说：“同志们，我们企业很不幸没达到党给我们设定的指标。特别是我们没能提供足够的优秀人才入党。这和你们年轻工作者特别有关。比如吧，彼得罗夫同志，你十八岁了，你为什么不申请入党当个榜样呢？”年轻人回答道：“哦，书记同志，你不知道我妈根本不同意我进这个妓院吗？” 584）在革命博物馆，一个人看着斯大林母亲的照片。她摇着头说：“谁想得到呢？她看起来是个正经女人。她就不能流产么？” 585）一个女人拎着一大包卫生纸在街上走。一个过路人问道：“女士，这是哪儿买的？”“买？你疯了？我现在能去哪儿买啊？这是五年前的，我刚从清洁工那儿讨回来。” 586）党支书正在向工人们讲话：“同志们，我们的目标是赶上然后超越美国这个最先进的资本主义国家，有问题吗？”“我有个建议。”一个工人说。“好啊同志！党需要政治积极性。你有什么建议？”“我建议我们赶上美国人，但别超过去。”“为什么？”“因为这样他们就会看到我们裤子后面的破洞……” 587）一个犹太人申请一份工作但被拒绝了。“这是反犹主义！”犹太人抗议道。“不是啊。”工作人员解释道，“我们为什么要在明知你总是要移民到以色列的情况下还雇你呢？”“不，我不打算移民。”“那我们就更不收了。”“为什么？”“因为我们不要傻子。” 588）部长会议正在讨论粮食问题，大家都一筹莫展。一个部长建议道：“要么我们跟美国打仗吧。让他们打败我们，然后他们养活我们。”“你疯了吗？”另一个部长立刻反对，“你知道我们的将军们都多厉害么？万一他们打败了美国人怎么办？那我们该怎么解决粮食问题？” 589）在列车上一个男人在看报。看着看着，他嘟囔了一句：“这生活猪狗不如。”立刻对面有个男人站起身来，亮出红皮证件（注：KGB的证件）让男人跟他走一趟。“凭什么？！”看报纸的男人抗议道，“我读的是美国的新闻，我是说他们的人民的生活猪狗不如。”“闭嘴吧。”克格勃军官说道，“谁都知道哪儿的生活猪狗不如。” 590）在列宁格勒，政府的新决议宣布根据这些措施终于能保证每个居民的食品供应丰富。列宁格勒电台的记者在大街上采访：“您觉得党的关于食品供应丰富的新政策怎么样？”女人答道：“嗯，我们活过了德国人的封锁，估计也能活过这个丰富。” 591）大清洗时期。某日深夜一家门外骤然响起敲门声，全家老小惊慌失措地跳了起来。门外传来一个声音，“是我，你的邻居，没什么大事儿，就是咱们的房子着火了。” 592）在和中国签订友好条约10周年之际，一些中国家具出现在莫斯科的商店里。买家可以选择三种套件：普通套件：一个装米的碗，一个草垫；加强套件：一个装米的碗，两个草垫，两双筷子；豪华套件：两个装米的碗，三个草垫，四双筷子，5个毛主席像章。 593）两个党员伊万诺夫和彼得罗夫去餐馆庆祝彼得罗夫的生日。他们喝了一瓶伏特加，然后伊万诺夫说：“我亲爱的朋友，你知道热爱着（注：这个热爱是友情上的）你，我为什么热爱你呢？不是因为你从办公室偷党的财产，不是因为你把丈母送进了精神病院，不是因为你每天打你的老婆，不是因为你强奸了了一个十三岁的盲女孩。不，不是因为这些。我热爱你是因为你是个好共产党员。” 594）共产党垮台之后，一个男人走进报亭要一份共产党的报纸。“我们已经不卖共产党的报纸了。”报亭老板说。过了一会儿，那人又走来要买共产党的报纸。“我们已经不卖共产党的报纸了。”过了一会儿，那人又走来要买共产党的报纸。“你听不懂吗？我们已经不卖共产党的报纸了！”老板很不高兴。“我懂，但我就是爱听这个！再说一遍吧！再说一遍吧！” 595）一个人走进商店发现柜台上空空如也。他愤怒地喊道：“这他妈什么烂政府？！什么都没有！”两个便衣立刻上来给了他两下。“你这喊什么呢？你在骂谁啊？！”便衣质问道。“当然是在骂沙皇。”“沙皇和这个有什么关系？！”“当然有关系。”男人辩解道，“他们统治了300年，可只存了70年的粮食……”（注：苏联的寿命是74年） 596）21世纪，两个像是中国人的人走在莫斯科的毛泽东大街（原名高尔基大街）上。他们的名字叫莫喜和何耶。“过得如何？”莫喜问道。“挺好。”何耶答道。“能说实话么？”“挺好啊。”“得，就像中国人对中国人说一样，你过得怎么样？”“我挺习惯的，真的，就有一件事儿很烦，就是老得眯着眼睛。”（注：眯眼是外国人对中国人印象的偏见，“莫喜”和“何耶”是两个典型的犹太人名字摩西和哈耶姆的“中文化”，而这种对话在什么情况下才会在莫斯科发生我想我也就不用说了） 597）在一个退休的克格勃将军向媒体披露了一些克格勃训练中的对苏联不利的细节之后，克格勃主席克留奇科夫找到戈尔巴乔夫：“我们必须撤销那叛徒所有的荣誉和头衔。他是个骗子，他不诚实，他说的都是谎话！”“你怎么证明呢？”戈尔巴乔夫问道。“这还用证明吗米哈伊尔·谢尔盖耶维奇？他是个克格勃啊！” 598）契尔年科要死了。他用电话拨出了一个秘密的号码，接电话的是勃列日涅夫。“我亲爱的列昂尼德·伊里奇。”契尔年科说道，“我就要找你去作伴了。告诉我，我该带点什么么？那儿有什么短缺么？”“不，我们这儿什么都有，就像共产主义已经实现了一样。”勃列日涅夫答道，“不过或许你可以带一副刀叉？”“什么？你们那儿刀叉不够？”“我们这儿刀叉不缺。可是，轮到希特勒下厨的时候他会让所有的共产党员都用镰刀锤子吃饭。” 599）在集体农庄里，一只母猪生了三只小猪。党支部讨论后认为报告只生了三只小猪可能会给区党委留下不好的印象。所以他们上报生了5只小珠。区党委向州党委报告那个集体农庄生了7只小猪。在州党委向农业部的报告中，他们宣称生产12只小猪的社会主义义务劳动成功完成。农业部向中央委员会的报告则称共产下20只小猪，提前完成任务。“好极了。”勃列日涅夫同志评价道，“三只小猪送给列宁格勒的工人，三只送给英雄城市莫斯科，五只拿去出口，五只送给在挨饿的非洲孩子。剩下的储存起来当战略储备，谁也不准动！” 600）两个骷髅相遇了，一个问另一个：“你是死在戈尔巴乔夫的新粮食政策颁布之前还是之后？”“我还活着。”另一个答道。 601~650601）区党委第一书记和他的人事部经理谈到：“听着，伊万诺夫同志，已经六个月在犹太教堂里找不到拉比了，可你看起来一点也不着急。意识形态工作在松弛啊，伊万诺夫同志。”“是的，第一书记同志，我一直在尽力寻找适合当拉比的人，可到现在我还是找不到。那些候选人，您知道，不是共产党员就是犹太人……” 602）在休斯敦，美国航空航天局的调查委员会在讨论航天飞机爆炸的原因：“我们从头到尾检查了一遍，可就是找不到左侧固体助推器爆炸的原因。”在莫斯科，克格勃外事局的调查委员会同样在讨论航天飞机爆炸的原因：“我们从头到尾检查了一遍，可就是找不到左侧而不是预先设定的右侧固体助推器爆炸的原因。” 603）士兵们问他们的指挥员：“少校同志，我们懂什么叫改革了。改革就是我们过去走两列现在走四列。可什么是公开化呢？”“公开化就是你们可以任意批评我，但你们因此什么（惩罚）也不会得到。”指挥员解释道。“什么也不会得到？”“对。大衣啊，裤子啊，鞋啊……” 604）一个孩子管父亲要一卢布说要捐献给非洲国家的挨饿的人。“他们不需要我们的钱。”父亲解释道，“他们的气候很好，土地肥沃，他们肯定应有尽有。”第二天孩子回来说：“爸爸，老师说这钱是要帮助非洲国家的共产党。”“哦，”父亲答道，“他们既然有共产党，那肯定会有挨饿的人了。” 605）爱沙尼亚向戈尔巴乔夫要求独立一个月，戈尔巴乔夫拒绝了；爱沙尼亚又要求独立一天，戈又拒绝了。爱沙尼亚于是又要求独立十分钟。戈尔巴乔夫的顾问建议同意他们的要求，因为独立十分钟也没什么害处，但对宣传工作非常有利。独立的十分钟过去了，在爱沙尼亚的苏联间谍汇报：“在前五分钟里爱沙尼亚向芬兰宣战，在后五分钟里爱沙尼亚投降并宣布已被芬兰占领。” 606）学校在对学生们进行调查。调查中的一个问题是：你将如何给苏联公民分类？克格勃军官的儿子写道：“苏联公民可分为三类：去过监狱的，正在监狱里的，未来会进监狱的。” 607）在提高伏特加价格之前，政府在工厂进行调查。“伏特加提高到20卢布一瓶的话你们还会买吗？”“会！”“伏特加提高到40卢布一瓶的话你们还会买吗？”“会！”“伏特加提高到150卢布一瓶的话你们还会买吗？”“不会！”工人答道，“我们的工资是140卢布，但如果能提高工资的话……我们会买……” 608）向最佳政治笑话大赛获奖者颁奖：一等奖，二十五年；二等奖，二十年；还有两个三等奖，每个十五年。 609）在教皇遭到枪击后西方媒体一致指责这是苏联克格勃的暗杀企图。为了终结这种流言，苏联政府组织了一个特别委员会进行了一次彻底的调查。委员会随后报告政府：“我们十分确信我们国家与此无关。”“怎么证明呢？”“我们已经认定是教皇先开枪的。” 610）在红场中间有个老太太已经踱步了好几个小时，脚边是两个手提箱。一个警察走了过去。“你在这儿干嘛？”老太太答道：“我只是在等着马蒂斯·鲁斯特飞回德国。” 611）俄罗斯移民在好莱坞开了家俄式餐馆叫“俄罗斯怀旧”。菜单：第一道菜-罗宋汤；第二道菜-油炸包；甜点-猛敲一下顾客的脖子并怒吼：“滚出去犹太猪！” 612）在莫斯科进行了一次审判，某人被判三年有期徒刑。罪名：在一次生日聚会上，当有人提到“以色列”这个词的时候他的表情仿佛很有兴趣。 613）一个老人申请移民到英国去但被拒绝了。“您又老又多病，可英国又天天下雨。最好再想想吧。”签证官员劝他。两个小时后签证官员出去发现那人还在等候室里坐着。“您这是又来了？”“不，我没走。您跟我说了下雨的问题，我打算再想想。”“那您决定了么？”“不，我还没想好要不要带伞去英国。” 614）为了解决地区的经济问题，敖德萨市党委决定开一家妓院。他们找来了一个因为善于张罗而出名的犹太人艾布拉莫维奇。艾布拉莫维奇拒绝打理妓院。“为什么？”党的书记问道。“因为我知道那意味着什么。听着，五张床留给市党委，三张床留给市苏维埃，给警察至少还得留三张；十个姑娘每年得去做三个月义务劳动，还有十个得去参加会议和政治集会；还有研讨会，这个那个的，你们是打算让我艾布拉莫维奇上床去完成生产定额吗？” 615）一个意共代表团来参观集体农场。“你们这儿的西红柿怎么样？”客人问道。“西红柿不怎么长。”“嗯。黄瓜呢？”“还不如西红柿。根本不长。”“嗯。那可能是你种的方式不对。”“哦，要是我们种了的话本该能长的。” 616）在苏联有两类人，黑的和红的。黑的人坐着黑色小汽车，吃着黑色鱼子酱，能免费得到所有只能在黑市上见到的玩意儿；红的人在日历上标红的日子里扛着红旗走过红场。 617）一个工人被派去参加党的代表大会。他回到家后坐在桌前。妻子问道：“要汤吗？”他举起右手。妻子又问：“要土豆泥炸肉排吗？”他又举起右手。妻子又问：“要伏特加吗？”他站起来热烈地鼓起掌来。 618）一个参加党代会的代表回到工厂。“伊万，怎么样？”“太棒了！我带回来件新西装。”“你们在那儿决定什么了？”“我们决定了重大问题。一切为了人的利益！一切都为了人们能过上好日子！”“那你们投票了吗？”“我们都一直投票给主要人物了。我亲眼看到那个人了！” 619）一个法国人、一个美国人和一个苏联人遇到海难被冲到一个有食人族的小岛上。食人族酋长说道：“说出个我们这儿没有的东西来，我就饶了你。要是你说不出，我们就吃了你。”“你们没有金发女郎。”法国人说。酋长笑了笑，带来了一个金发女孩。法国人于是被吃了。“你们没有计算机。”美国人说。酋长笑了笑，当场造了个笔记本电脑，美国人于是也被吃了。“你们有政治局吗？”苏联人问。酋长慌了神儿，半天才承认没有。“你们既然没有政治局，”苏联人奇怪地问道，“那你们是怎么学会吃人的？” 620）美国总统有一百个安全顾问，其中一个是克格勃特务，究竟是谁，正在调查；赞比亚总统有一百个情人，其中一个有艾滋病，究竟是谁，正在调查；苏联总统有一百个经济顾问，其中有一个懂经济学，究竟是谁，正在调查。 621）党的宣传员在演讲中说道：“帝国主义者正在全世界范围内干涉苏联内政！” 622）苏联式衰老：一个老人停在公寓门边上，手里拿着个空口袋想：“该怎么搞清楚我这究竟是正打算去食品商店还是刚从那儿回来呢？” 623）老师在问学生未来的志向。沃瓦说：“我要当一个警察。”“可是啊沃瓦，等你长大了的时候就不会需要警察了。到时候人们的觉悟会非常高，不会犯罪。”“那我就当救火队员。”“可是啊沃瓦，等你长大了的时候就不会有火灾了，因为人们都会非常小心谨慎……”“那我就当军官。”“可是啊沃瓦，等你长大了就不会有军队了，人们都开开心心没有战争，所有的国家都是共产主义。”“您什么意思？您不能逼我去工作吧？！” 624）一个老人和他的孙子在岸边看着眼前的河。“爷爷，这个地方是叫切尔诺贝利吗？是说这儿以前有个核电站吗？”“是的，我的孩子。”爷爷说着拍了拍孩子的头。“是说它有一天爆炸了么？”“是的，我的孩子。”爷爷说着拍了拍孩子的第二个头。 625）“爷爷快看，那儿有个球在滚啊。”“那不是球，那是切尔诺贝利的刺猬。” 626）“爷爷快看，看那个灯泡！那蓝光真漂亮！”“那不是灯泡。那是装了切尔诺贝利牛奶的瓶子。” 627）“爷爷，谢谢您的这条宠物蛇礼物。”“这不是蛇，孩子，这是切尔诺贝利的猫。” 628）有人按了门铃。拉宾诺维奇开了门。“拉宾诺维奇是在这儿生活吗？”“不是，他不在这儿生活。”一个小时之后，又是门铃响，拉宾诺维奇开了门。“我跟你说了拉宾诺维奇没在这儿生活。”“那你是谁？”“拉宾诺维奇。”“那你为什么说你不在这儿生活？！”“你管这也叫生活？！” 629）阿富汗。一个圣战者喊道：“嘿，俄国佬，投降吧！”沉默。“嘿，俄国佬，别抵抗了！”沉默。“嘿，俄国佬，快投降！”“这儿没俄国佬。你们纳乌兹别克人的降吗？” 630）问：改革的前景是什么？答：有两种可能的情况。现实的可能是火星人会降临地球帮我们打理一切，科幻的可能是我们能自己完成改革目标。 631）1990年。妻子问丈夫：“我在政治上很幼稚。你能不能给我解释一下，等我们最终实现了民主、公开化还有不论什么别的之后，我们苏联和美国还会有什么区别啊？”“你不懂吗？要是在美国戈尔巴乔夫得是民选总统。” 632）勃列日涅夫在莫斯科回见英迪拉·甘地。甘地夫人一下飞机，勃列日涅夫就开始讲话：“亲爱的撒切尔夫人……”左右连忙提醒：“勃列日涅夫同志，这是英迪拉·甘地，不是撒切尔……”勃列日涅夫皱皱眉头继续，“亲爱的撒切尔夫人……”“列昂尼德·伊里奇，这是英迪拉·甘地。”“闭嘴。”勃列日涅夫说道，“我当然知道这是英迪拉·甘地，可讲稿里明明是撒切尔……” 633）勃列日涅夫的每日安排：上午9点：复活上午10点：早餐上午11点：颁发勋章中午12点：给电池充电下午2点：正餐下午4点：接受勋章下午6点：签署重要文件下午8点：临床死亡次日上午九点：复活…… 634）在政治局会议上，勃列日涅夫说道：“同志们啊，这个不可容忍。有些政治局成员们的老年症又恶化了，开始玩起小孩子的游戏，跳木马。还有看啊，葛洛米柯同志抢走了我的锡兵（勃列日涅夫擦擦眼泪）还不肯还我……” 635）一次勃列日涅夫正在阅读一份克格勃关于移民申请越来越多的报告。勃列日涅夫转身跟柯西金说道，“要是我们把移民签证一直发下去，有一天这国家可得就剩下你我啦。”柯西金回应道：“别把我算进去。” 636）斯大林听到报告说亚美尼亚人和阿塞拜疆人的矛盾已经激化到接近开战了。“咱们得用布尔什维克的方式解决这个问题。”斯大林说，“我们给亚美尼亚和阿塞拜疆制定一个共同的首都吧。”亚美尼亚的首都是埃里温，阿塞拜疆的则是巴库。双方问斯大林哪个首都会成为两个国家的共同首都：“埃里温吗？”“不。”“巴库吗？”“不。我们不想在这个问题上偏向哪个民族。”“那是哪儿啊？”“马加丹。”（注：马加丹是西伯利亚科累马地区的中心，主要被用来作为科累马地区古拉格设施的人员集散地） 637）两个苏联元帅伏罗希洛夫和布琼尼在1937年见了面。“你听说了吗，谢苗？”伏罗希洛夫说，“保安部门把所有的人不管谁都给抓去了。以后会怎么样？他们为什么不把我们俩也抓去？”“不是所有人都被抓了。就抓聪明的。这跟咱俩就无关了。” 638）斯大林在半夜打电话：“莫洛托夫同志？告诉我，你还口吃吗？”“是是的，斯大林同志，不过假设为了社会主义建设的需需要，我我……”“不，莫洛托夫同志，没有需要。安心睡吧。”他又拨了个号码：“米高扬同志？听着，你在巴库当政委的时候，在巴库一共有多少个政委？”“二十七个，斯大林同志。”“在1920年被杀掉了多少个？”“二十六个，斯大林同志。”“好吧，安心睡吧，我们在巴库的第二十七个政委同志。”他又拨了个号码：“贝利亚同志？听着，你确定你把布哈林给枪毙了？”“非常确信，斯大林同志。怎么了？”“不，没事儿。安心睡吧，贝利亚同志。”斯大林放下听筒，自言自语道：“好的。我终于把他们都给稳住了。现在我也可以睡觉了。” 639）在敖德萨一间屋子的后院外传来了炮响。萨拉从窗户探出头去：“埃布拉姆，怎么了？是他们给商店送来肉了吗？”“不是，是因为勃列日涅夫到敖德萨了。”过了一会儿，礼炮声又响了。“埃布拉姆，听到了吗？他们给商店送来肉了！”“我说了，这是勃列日涅夫到了。”“怎么会，他们第一下打偏了吗？” 640）在勃列日涅夫访问英国时，首相撒切尔夫人问这客人：“您怎么看丘吉尔？”“丘吉尔是谁？”勃列日涅夫反问。回到大使馆，苏联大使评价道：“祝贺你，勃列日涅夫同志，你让撒切尔夫人老实了。她以后再也不敢问什么愚蠢的问题了。”“撒切尔是谁？”勃列日涅夫反问。 641）在莫斯科国际机场，一对即将移民到以色列的夫妇正等着飞机。广播突然响起：“注意，飞往特拉维夫的航班因为勃列日涅夫同志启程前往巴黎而被推迟。”一小时后，又响起了广播：“注意，飞往特拉维夫的航班因为柯西金同志启程前往伦敦而被推迟。”一小时后，又响起了广播：“注意，飞往特拉维夫的航班因为葛洛米柯同志启程前往纽约而被推迟。”妻子于是说道：“你听到了吗，埃布拉姆？他们都走了。没了他们，我们为什么要走啊？去特拉维夫干什么？” 642）政府宣布了纪念伟大的俄罗斯诗人普希金的雕塑获奖名单。三等奖为普希金正阅读着一本勃列日涅夫的著作，二等奖为勃列日涅夫阅读普希金著作，一等奖为勃列日涅夫正在阅读勃列日涅夫的著作。 643）里根、密特朗和勃列日涅夫见了面。大家都打开了香烟盒。里根的金烟盒上刻着：“致亲爱的罗恩，来自好莱坞的朋友们。”密特朗的烟盒上刻着：“致我亲爱的弗朗西斯，来自你忠诚的妻子。”勃列日涅夫于是打开了他的烟盒，上面写着：“致普希金，来自维亚杰姆斯基。” 644）一个美国人到苏联旅游，发现一个苏联工人很穷。游客于是告诉工人：“这么做就行。我就会到华盛顿的白宫门前吃干草，总统出来问我为什么做这么奇怪的事儿，我告诉总统我很穷买不起吃的，总统就帮了我，我现在什么都有了。”苏联工人于是到莫斯科的红场上吃干草。赫鲁晓夫走过来问出了什么问题。工人解释了他的状况，赫鲁晓夫答道：“你最好把干草留到冬天，工人同志。估计这个冬天会非常寒冷艰苦，你现在还可以吃青草嘛！” 645）赫鲁晓夫前来参观前卫派的美术展览。“这对该死的绿点和黄点是什么？”“这幅画，赫鲁晓夫同志，是表现我们英勇的农民在努力完成生产两亿吨谷物的计划。”“啊……哦……那这堆黑三角和红条条呢？”“这幅画描绘了工厂中我们英雄般的产业工人。”“那这个长耳朵的肥屁股呢？”“赫鲁晓夫同志，这不是画，是镜子。” 646）赫鲁晓夫一次决定自己准备讲稿。他准备好后拿给了他的秘书看。“这是个杰出的、精彩的演讲。”秘书答道。赫鲁晓夫又把这讲稿给文化部长看，后者评论道：“赫鲁晓夫同志，这是个杰出的作品，是对马克思列宁主义的最好诠释。”最后，赫鲁晓夫把他的讲稿拿给他女婿看。女婿和赫鲁晓夫不一样在于他上过学。女婿说：“你的讲稿没什么大问题，只不过‘草他妈的’的‘操’字不对，‘蠢马户’的‘马户’应该是一个字儿。”（注：原文是说你的fuckyou应该加空格，ass hole不该加……） 647）十月革命后，上帝派了圣卢克、圣乔治和摩西三个观察员到苏俄，他们三个都给上帝发电报。“我已经落入契卡手中了，圣卢克。”“我已经落入契卡手中了，圣乔治。”“一切都好，人民委员摩西。” 648）十月革命后，两个警察正在查一个过路人的证件。那个过路人只找到了一张尿检分析报告。第一个警察大声读到：“分析报告：蛋白，负；糖，负。”第二个警察说：“没有糖。说明他不是投机倒把分子。走吧，公民！” 649）人民委员会命令：由于燃料紧缺，所有温度计都应调高四度。 650）“党里有多少犹太人？”“没多少，大概60%。”“那剩下的是……？”“犹太妇女。” 651~701651）娜杰日达·克鲁普斯卡娅见到了勃列日涅夫。她被介绍给总书记，但她心想勃列日涅夫肯定不知道她是谁。“您好，列昂尼德·伊里奇，我是克鲁普斯卡娅，您应该知道我是谁，因为您知道我丈夫，您经常引用他的著作。”“哦，非常欢迎，娜杰日达·康斯坦丁耶夫娜。我当然知道你是谁，还有你的丈夫。说起来克鲁普斯基近来如何？” 652）勃列日涅夫访问中亚，受到了当地党政官员的欢迎。“和平降临于你！”（注：这是阿拉伯语）“和平降临于你！”按照工作人员之前告诉他的话，勃列日涅夫愉快地回应着。“和平降临于你！”他们又说道。“和平降临于你！”勃列日涅夫愉快地回应着。突然，人群中有个持不同政见者喊道：“古拉格集中营！”“古拉格集中营！”勃列日涅夫愉快地回应着。 653）一个农民问勃列日涅夫共产主义是什么。勃列日涅夫答道：“现在我们的电车是15分钟一趟，5年后是10分钟一趟，15年后每5分钟一趟，20年后我们的电车一直在走。” 654）勃列日涅夫听到有人在敲门。他迅速走到门前，从口袋中选出了一个纸条，读到：“谁在那里？” 655）1968年8月捷克领导人被允许离开莫斯科后，勃列日涅夫对柯西金说：“看呐，杜布切克的这只手表真精致啊！”“让我看看，”柯西金说道。 656）勃列日涅夫和他的孙子在散步。“爷爷，等我长大了，能当上总书记吗？”“你说什么啊，孩子，怎么能有两个总书记呢？” 657）勃列日涅夫在发表讲说：“昨天政治局决定改称我为皇帝，但我要负责的声明，他们会因此让我觉得很为难。因为我的名和父名分别是列昂尼德和伊里奇，今后不知是该叫我列昂尼德一世还是伊里奇二世。” 658）“你听说勃列日涅夫同志的新书——《复兴》——被翻译成意大利语了吗？它是被当成文艺复兴时期达芬奇的作品出版的。” 659）在1970年一个老布尔什维克的回忆录写道：“我记得1917年10月的一天，列宁和他的战友们在彼得格勒大街上边走边讨论该何时发动推翻临时政府的革命。就在这时，长着一对浓浓的眉毛的孩子出现在他们面前并说道：‘25日，叔叔，就25日好了。’‘过来，孩子，你叫什么名字？’列宁问道。‘巴列利纳。’（注：列昂尼德的小名）男孩答道。” 660）在1970年一个苏军老战士的回忆录写道：“在1945年4月的最后几天，朱可夫元帅指点斯大林，汇报说白俄罗斯第一方面军和乌克兰第一方面军将在未来的4天内攻下柏林，他请斯大林同意这个计划。斯大林答复道：‘朱可夫同志，我认同你这个计划，但请给我十五分钟去听一下第十八集团军政委勃列日涅夫上校的意见。’” 661）勃列日涅夫在又一次获得勋章后发表讲话：“有些人批评说我接受的勋章太多了，不能自觉地拒绝勋章。同志们！情况并不是这样。比如讲，我在不久之前就自觉地拒绝了布隆迪的国家最高荣誉奖章——挂在鼻子上的金环。” 662）白宫的一个灯泡烧坏了，尼克松按了一下按钮，一个工作人员走进来换了个灯泡。尼克松给了他五美元。克里姆林宫的一个灯泡坏了，勃列日涅夫的侍卫叫来一名工作人员换了一个灯泡。勃列日涅夫给了他一枚列宁奖章，也给了那名工作人员一枚列宁奖章。勃列日涅夫觉得不错，又给了自己一枚列宁奖章。 663）问：新的五年计划将被命名为什么？答：元帅计划。 664）勃列日涅夫：我应该当元帅。格列奇科：除非我死了。 665）“听听这个不错的笑话。一个女清洁工走进勃列日涅夫的卧室，发现他死了。”“然后呢。”“然后忘了。你觉得开头怎么样？” 666）勃列日涅夫死了，但他的身体会永垂不朽。 667）-听说了吗？勃列日涅夫去世了。-真的？他是亲自去世的吗？ 668）勃列日涅夫正牵着一只猴子散步。一人问道：“跟一头蠢牛走在一块儿不觉得很别扭吗？”勃列日涅夫：“它是猴子。”农民：“我没跟你说话。” 669）公元2000年。地铁车箱内的扬声器广播道：“这是到达列宁站的列宁线。下一站：列宁站。” 670）1970年。大学入学考试。一个老师试图让一个差生说出当前最突出的事件：“今年我们在举办什么活动？”（注：该年是列宁诞辰一百周年）“我不知道，课本里没有。”“那你没看报纸和杂志吗？你没听收音机或者看电视吗？”“我们镇子里没你们说的这些。”“那你来自哪个镇？”“阿夫托斯塔罗耶。”老师对他的助教说：“你看这个夏天我们逃到那儿去怎么样？” 671）两个学生决定去“列宁呆过的地方”旅游——去看看日内瓦、伦敦、布鲁塞尔、巴黎，这些都是列宁曾经移居过的地方。他们让他们的学校党委开介绍信。学校的回复如下：“非常理解你们的愿望，但目前还是建议你们去参观辛比尔斯克、苏申斯克和列宁山。”（注：都在苏联国内，分别是列宁的出生地、流放地和莫斯科大学所在地） 672）克格勃举办了一场关于列宁诞辰庆典活动的最佳笑话大奖赛：一等奖：与列宁的一次会晤。二等奖：政府出资的为其7年的住房。三等奖：在列宁呆过的地方生活五年。 673）新的纪念喷泉：列宁泉香水：伊里奇的味道药粉：列宁的骨灰奶罩：列宁山蛋：列宁的睾丸小孩的玩具：带按钮的陵墓，一按按钮斯大林的棺材就会飞出去公园的射击场：范尼·卡普兰机车时钟：水晶棺材状，在整点时刻，列宁弹起来，郑重地说道：“同志们，布尔什维克所期待的无产阶级革命布谷鸟自鸣钟。” 674）在革命博物馆李，导游向人们介绍瓦西里·伊万诺维奇·恰巴耶夫（即夏伯阳，苏俄内战英雄，被苏联广为宣传）的骨架。“那他旁边的小骨架是谁的？”“那是恰巴耶夫小时候的。” 675）问：波德戈尔内为什么被开除了？答：因为他在勃列日涅夫的生日宴会上赞扬他：“列昂尼德·伊里奇，你现在70岁，但看上去比60岁的苏联政权还要健康！” 676）问：1982年我们有什么梦想？答：苏联政权已经65岁了，也许应该退休了。 677）问：为什么最近看不到卖麝鼠帽的了？答：因为麝鼠数量呈算术级增长，而显贵数量却成几何级增长，所以现在抓不到麝鼠了。 678）在高加索的一次聚会上，主持人站起来祝酒说：“我提议为勃列日涅夫同志干杯。但是我要做些解释。我并不是因为他是苏共中央总书记而为他干杯，他担任这项职务有工资。我也不是因为他是最高苏维埃主席而为他干杯，他担任这个职务也有第二份工资，我甚至也不是为了他是国家第一元帅而为他干杯，他担任这项职务还有第三份工资。我是为他第一个认识到在现实状况下靠一份工资难以生活而干杯。” 679）外国人说：你们喝不到白兰地，真遗憾！苏联工人说：不，我们已经通过政府的干部喝到了，他们是我们的代表嘛。 680）“请问，你从哪儿弄到的厕纸？”“我去干洗店干洗了一下，然后重新用。” 681）一位《真理报》记者被派去采访村民。他的工作就是以教育性的谈话来向村民宣传党对国际事件的路线和政策。一晚上的谈话后，他做最后总结：“我们《真理报》就是为人民服务的，你们觉得我们还应该怎么改善报纸才能更有益于你们？”大厅后面传来声音：“再少用点墨水。” 682）工人问道：“勃列日涅夫同志，我们的国家正走在通向共产主义的大路上，可到处都缺少供应，人民没什么吃的，这该怎么理解？”勃列日涅夫答道：“谁答应在路上供应吃的啦？” 683）问：食品供给计划施行后怎么样？答：还是有人活下来了。 684）问：等我们到了共产主义之后，该怎么解决购物排队的问题？答：很简单，到时候就已经没东西让你排队了。 685）在理发馆，理发师一直在问勃列日涅夫波兰的问题。最终，烦躁的勃列日涅夫嚷了起来：“你为什么一直不断地问我波兰问题？！”“这样有利于我工作。每次我问你的时候你都怒发冲冠。” 686）一个捷克人在街上遇见了在边防部队当军官的朋友，于是问道，“你工作忙吗？”“你知道，”朋友摇摇头，“我们捷克斯洛伐克是个没有国界的国家，我们还有什么事儿可干呢？” 687）塔斯社：签署苏捷关系正常化的苏联领导人是勃列日涅夫同志、格列奇科同志和T-64同志。 688）一个美国人和一个罗马尼亚人到苏联朋友家作客，他们发现这家人没有小汽车，就问为什么。“我们有地铁。”苏联人答道。“那你去走访朋友的时候怎么办？”美国人又问道。“他们一般是坐坦克去的。”罗马尼亚人插嘴道。 689）问：2000年，一瓶伏特加多少钱？答：五元。（注：注意，不是卢布，是“元”……） 690）现在苏联学校教两种外语，想离开的人学意地绪语（注：一种犹太人流行的语言），想留下的人学汉语。 691）卡特和葛洛米柯从对面各自的房间出来，进了另一间房子。“我们终于彻底裁军了。”卡特说。“是啊，我们最终可以完全信任彼此了！”葛洛米柯说。“谈的够多了，请回到你们自己的营房里吧！”一个中国卫兵说。 692）六日战争爆发了，纳赛尔给勃列日涅夫拍电报求救：“莫斯科。克里姆林宫。犹太人进攻。救援。苏联。”（注：国名写在最后一般是国内电报） 693）在阿以战争期间，纳赛尔深受俄罗斯的影响，借用了库图佐夫对抗拿破仑的战术：他诱敌深入埃及腹地，并正在等待冬季封冻的到来。 694）勃列日涅夫到西伯利亚铁路贝阿线的工程现场去参观，看到了几百名身穿条纹服装的囚犯劳力。“你们好，海员同志们。”他向她们问候道。 695）自治区党委员会大楼上的标语：“不劳动者不得食。” 696）问：苏联的什么水平最为先进？答：苏联在各个方面的瘫痪水平。 697）十月革命前楚科奇人只感到寒冷和饥饿，现在他们感到寒冷、饥饿，还有对党深深的感激之情。 698）一个楚科奇人从莫斯科访问回来，向他的家人解释革命是为了什么——“一切依靠人民，一切为了人民。”他深深地理解了现在的生活：“我终于知道人民指的是谁了。” 699）问：勃列日涅夫为什么获得了最后一枚奖章？答：从犹太人手中解放了敖德萨市。（注：敖德萨是苏联的犹太聚居区，在勃列日涅夫时期有1/4的犹太人移民以色列） 700）地方的农业指导员在集体农庄会议上讲养鸡的好处，养一只鸡每年都能获得许多卢布。一个农民打断他，说道：“如果犹太人离开，他们得为他们的教育付多少钱？”（注：上缴相对高额的费用是苏联限制犹太人移民的手段之一）“四千卢布。别打岔，同志们。”他继续讲养羊的利润，但又被打断了。“如果一个犹太工程师离开，他得付多少钱？”“八千卢布。让我继续讲，同志们。”他继续讲养牛，但又被打断了。“如果那犹太人上过大学呢？”“两万卢布。但……”“或许我们最好养犹太人。” 701）警察对迷路的小孩说道：“别哭了。我们将通过电台广播你的名字。很快你的妈妈就来接你回家了。”“好啊。但你们最好通过BBC，我的爸爸妈妈只听那个频道。”","categories":[{"name":"转载","slug":"转载","permalink":"https://orwell-yu.github.io/categories/转载/"}],"tags":[{"name":"web","slug":"web","permalink":"https://orwell-yu.github.io/tags/web/"},{"name":"历史","slug":"历史","permalink":"https://orwell-yu.github.io/tags/历史/"},{"name":"娱乐","slug":"娱乐","permalink":"https://orwell-yu.github.io/tags/娱乐/"}],"keywords":[{"name":"转载","slug":"转载","permalink":"https://orwell-yu.github.io/categories/转载/"}]}]}